{
	"id": "a492f9522c790ad49f8072b146e39eb1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    // function transferFrom(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId\n    // ) public virtual override {\n    //     //solhint-disable-next-line max-line-length\n    //     require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n    //     _transfer(from, to, tokenId);\n    // }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    // function safeTransferFrom(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId\n    // ) public virtual override {\n    //     safeTransferFrom(from, to, tokenId, \"\");\n    // }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    // function safeTransferFrom(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId,\n    //     bytes memory data\n    // ) public virtual override {\n    //     require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n    //     _safeTransfer(from, to, tokenId, data);\n    // }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    // function safeTransferFrom(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId,\n    //     bytes calldata data\n    // ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    // function safeTransferFrom(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId\n    // ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    // function transferFrom(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId\n    // ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol": {
				"ERC721Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":751:17881  contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":751:17881  contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_13\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_13:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":1987:2331  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {... */\n    tag_3:\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      tag_17\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      tag_18\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2932:3030  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4407:4574  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_5:\n      tag_24\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      tag_27\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      tag_28\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3929:4346  function approve(address to, uint256 tokenId) public virtual override {... */\n    tag_6:\n      tag_30\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_31\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n    tag_30:\n      stop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2651:2870  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_7:\n      tag_34\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_35\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_35:\n      tag_36\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_37\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2390:2594  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n    tag_8:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_42\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3094:3196  function symbol() public view virtual override returns (string memory) {... */\n    tag_9:\n      tag_44\n      tag_45\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4641:4794  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_10:\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_48\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      tag_50\n      jump\t// in\n    tag_47:\n      stop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3262:3538  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_11:\n      tag_51\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_52\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_54\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4860:5022  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_12:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n    tag_56:\n      tag_58\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_59\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":1987:2331  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {... */\n    tag_17:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2111:2115  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2161:2197  type(IERC721Upgradeable).interfaceId */\n      0x591d4bc000000000000000000000000000000000000000000000000000000000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2146:2197  interfaceId == type(IERC721Upgradeable).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2146:2157  interfaceId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2146:2197  interfaceId == type(IERC721Upgradeable).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2146:2272  interfaceId == type(IERC721Upgradeable).interfaceId ||... */\n      dup1\n      tag_61\n      jumpi\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2228:2272  type(IERC721MetadataUpgradeable).interfaceId */\n      0x5b5e139f00000000000000000000000000000000000000000000000000000000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2213:2272  interfaceId == type(IERC721MetadataUpgradeable).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2213:2224  interfaceId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2213:2272  interfaceId == type(IERC721MetadataUpgradeable).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2146:2272  interfaceId == type(IERC721Upgradeable).interfaceId ||... */\n    tag_61:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2146:2324  interfaceId == type(IERC721Upgradeable).interfaceId ||... */\n      dup1\n      tag_62\n      jumpi\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2288:2324  super.supportsInterface(interfaceId) */\n      tag_63\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2312:2323  interfaceId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2288:2311  super.supportsInterface */\n      tag_64\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2288:2324  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_63:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2146:2324  interfaceId == type(IERC721Upgradeable).interfaceId ||... */\n    tag_62:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2127:2324  return... */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":1987:2331  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2932:3030  function name() public view virtual override returns (string memory) {... */\n    tag_21:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2986:2999  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3018:3023  _name */\n      0x65\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3011:3023  return _name */\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_67\n      jump\t// in\n    tag_66:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_68\n      swap1\n      tag_67\n      jump\t// in\n    tag_68:\n      dup1\n      iszero\n      tag_69\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_70\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_69)\n    tag_70:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_71:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_71\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_69:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2932:3030  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4407:4574  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_27:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4483:4490  address */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4502:4525  _requireMinted(tokenId) */\n      tag_73\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4517:4524  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4502:4516  _requireMinted */\n      tag_74\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4502:4525  _requireMinted(tokenId) */\n      jump\t// in\n    tag_73:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4543:4558  _tokenApprovals */\n      0x69\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4543:4567  _tokenApprovals[tokenId] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4559:4566  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4543:4567  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4536:4567  return _tokenApprovals[tokenId] */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4407:4574  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3929:4346  function approve(address to, uint256 tokenId) public virtual override {... */\n    tag_33:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4009:4022  address owner */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4025:4059  ERC721Upgradeable.ownerOf(tokenId) */\n      tag_76\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4051:4058  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4025:4050  ERC721Upgradeable.ownerOf */\n      tag_36\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4025:4059  ERC721Upgradeable.ownerOf(tokenId) */\n      jump\t// in\n    tag_76:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4009:4059  address owner = ERC721Upgradeable.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4083:4088  owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4077:4088  to != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4077:4079  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4077:4088  to != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4069:4126  require(to != owner, \"ERC721: approval to current owner\") */\n      tag_77\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_78\n      swap1\n      tag_79\n      jump\t// in\n    tag_78:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_77:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4174:4179  owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4158:4179  _msgSender() == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4158:4170  _msgSender() */\n      tag_80\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4158:4168  _msgSender */\n      tag_81\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4158:4170  _msgSender() */\n      jump\t// in\n    tag_80:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4158:4179  _msgSender() == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4158:4220  _msgSender() == owner || isApprovedForAll(owner, _msgSender()) */\n      dup1\n      tag_82\n      jumpi\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4183:4220  isApprovedForAll(owner, _msgSender()) */\n      tag_83\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4200:4205  owner */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4207:4219  _msgSender() */\n      tag_84\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4207:4217  _msgSender */\n      tag_81\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4207:4219  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4183:4199  isApprovedForAll */\n      tag_58\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4183:4220  isApprovedForAll(owner, _msgSender()) */\n      jump\t// in\n    tag_83:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4158:4220  _msgSender() == owner || isApprovedForAll(owner, _msgSender()) */\n    tag_82:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4137:4307  require(... */\n      tag_85\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_86\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_85:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4318:4339  _approve(to, tokenId) */\n      tag_88\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4327:4329  to */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4331:4338  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4318:4326  _approve */\n      tag_89\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4318:4339  _approve(to, tokenId) */\n      jump\t// in\n    tag_88:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3999:4346  {... */\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3929:4346  function approve(address to, uint256 tokenId) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2651:2870  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_36:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2723:2730  address */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2742:2755  address owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2758:2775  _ownerOf(tokenId) */\n      tag_91\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2767:2774  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2758:2766  _ownerOf */\n      tag_92\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2758:2775  _ownerOf(tokenId) */\n      jump\t// in\n    tag_91:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2742:2775  address owner = _ownerOf(tokenId) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2810:2811  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2793:2812  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2793:2798  owner */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2793:2812  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2785:2841  require(owner != address(0), \"ERC721: invalid token ID\") */\n      tag_93\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_94\n      swap1\n      tag_95\n      jump\t// in\n    tag_94:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_93:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2858:2863  owner */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2851:2863  return owner */\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2651:2870  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2390:2594  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n    tag_41:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2462:2469  uint256 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2506:2507  0 */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2489:2508  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2489:2494  owner */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2489:2508  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2481:2554  require(owner != address(0), \"ERC721: address zero is not a valid owner\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_98\n      swap1\n      tag_99\n      jump\t// in\n    tag_98:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2571:2580  _balances */\n      0x68\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2571:2587  _balances[owner] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2581:2586  owner */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2571:2587  _balances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2564:2587  return _balances[owner] */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":2390:2594  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3094:3196  function symbol() public view virtual override returns (string memory) {... */\n    tag_45:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3150:3163  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3182:3189  _symbol */\n      0x66\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3175:3189  return _symbol */\n      dup1\n      sload\n      tag_101\n      swap1\n      tag_67\n      jump\t// in\n    tag_101:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_102\n      swap1\n      tag_67\n      jump\t// in\n    tag_102:\n      dup1\n      iszero\n      tag_103\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_104\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_103)\n    tag_104:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_105:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_105\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_103:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3094:3196  function symbol() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4641:4794  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_50:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4735:4787  _setApprovalForAll(_msgSender(), operator, approved) */\n      tag_107\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4754:4766  _msgSender() */\n      tag_108\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4754:4764  _msgSender */\n      tag_81\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4754:4766  _msgSender() */\n      jump\t// in\n    tag_108:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4768:4776  operator */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4778:4786  approved */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4735:4753  _setApprovalForAll */\n      tag_109\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4735:4787  _setApprovalForAll(_msgSender(), operator, approved) */\n      jump\t// in\n    tag_107:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4641:4794  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3262:3538  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_53:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3335:3348  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3360:3383  _requireMinted(tokenId) */\n      tag_111\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3375:3382  tokenId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3360:3374  _requireMinted */\n      tag_74\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3360:3383  _requireMinted(tokenId) */\n      jump\t// in\n    tag_111:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3394:3415  string memory baseURI */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3418:3428  _baseURI() */\n      tag_112\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3418:3426  _baseURI */\n      tag_113\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3418:3428  _baseURI() */\n      jump\t// in\n    tag_112:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3394:3428  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3469:3470  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3451:3458  baseURI */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3445:3466  bytes(baseURI).length */\n      mload\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3445:3470  bytes(baseURI).length > 0 */\n      gt\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3445:3531  bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n      tag_114\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_115)\n    tag_114:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3497:3504  baseURI */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3506:3524  tokenId.toString() */\n      tag_116\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3506:3513  tokenId */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3506:3522  tokenId.toString */\n      tag_117\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3506:3524  tokenId.toString() */\n      jump\t// in\n    tag_116:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3480:3525  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_118\n      swap3\n      swap2\n      swap1\n      tag_119\n      jump\t// in\n    tag_118:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3445:3531  bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n    tag_115:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3438:3531  return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3262:3538  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4860:5022  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_58:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4957:4961  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4980:4998  _operatorApprovals */\n      0x6a\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4980:5005  _operatorApprovals[owner] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4999:5004  owner */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4980:5005  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4980:5015  _operatorApprovals[owner][operator] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":5006:5014  operator */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4980:5015  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4973:5015  return _operatorApprovals[owner][operator] */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":4860:5022  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1060:1226  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_64:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1145:1149  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1183:1219  type(IERC165Upgradeable).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1168:1219  interfaceId == type(IERC165Upgradeable).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1168:1179  interfaceId */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1168:1219  interfaceId == type(IERC165Upgradeable).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1161:1219  return interfaceId == type(IERC165Upgradeable).interfaceId */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1060:1226  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":14079:14212  function _requireMinted(uint256 tokenId) internal view virtual {... */\n    tag_74:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":14160:14176  _exists(tokenId) */\n      tag_123\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":14168:14175  tokenId */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":14160:14167  _exists */\n      tag_124\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":14160:14176  _exists(tokenId) */\n      jump\t// in\n    tag_123:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":14152:14205  require(_exists(tokenId), \"ERC721: invalid token ID\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_126\n      swap1\n      tag_95\n      jump\t// in\n    tag_126:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_125:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":14079:14212  function _requireMinted(uint256 tokenId) internal view virtual {... */\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n    tag_81:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":903:910  address */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":922:939  return msg.sender */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13370:13552  function _approve(address to, uint256 tokenId) internal virtual {... */\n    tag_89:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13471:13473  to */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13444:13459  _tokenApprovals */\n      0x69\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13444:13468  _tokenApprovals[tokenId] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13460:13467  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13444:13468  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13444:13473  _tokenApprovals[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13537:13544  tokenId */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13533:13535  to */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13488:13545  Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13497:13531  ERC721Upgradeable.ownerOf(tokenId) */\n      tag_129\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13523:13530  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13497:13522  ERC721Upgradeable.ownerOf */\n      tag_36\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13497:13531  ERC721Upgradeable.ownerOf(tokenId) */\n      jump\t// in\n    tag_129:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13488:13545  Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13370:13552  function _approve(address to, uint256 tokenId) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7385:7500  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n    tag_92:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7451:7458  address */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7477:7484  _owners */\n      0x67\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7477:7493  _owners[tokenId] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7485:7492  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7477:7493  _owners[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7470:7493  return _owners[tokenId] */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7385:7500  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13688:13995  function _setApprovalForAll(... */\n    tag_109:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13838:13846  operator */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13829:13846  owner != operator */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13829:13834  owner */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13829:13846  owner != operator */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13821:13876  require(owner != operator, \"ERC721: approve to caller\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_133\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_132:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13924:13932  approved */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13886:13904  _operatorApprovals */\n      0x6a\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13886:13911  _operatorApprovals[owner] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13905:13910  owner */\n      dup6\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13886:13911  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13886:13921  _operatorApprovals[owner][operator] */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13912:13920  operator */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13886:13921  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13886:13932  _operatorApprovals[owner][operator] = approved */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13969:13977  operator */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13947:13988  ApprovalForAll(owner, operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13962:13967  owner */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13947:13988  ApprovalForAll(owner, operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13979:13987  approved */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13947:13988  ApprovalForAll(owner, operator, approved) */\n      mload(0x40)\n      tag_135\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":13688:13995  function _setApprovalForAll(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3780:3872  function _baseURI() internal view virtual returns (string memory) {... */\n    tag_113:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3831:3844  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3856:3865  return \"\" */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":3780:3872  function _baseURI() internal view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":437:1144  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_117:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":493:506  string memory */\n      0x60\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":542:556  uint256 length */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":590:591  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":559:587  MathUpgradeable.log10(value) */\n      tag_138\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":581:586  value */\n      dup5\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":559:580  MathUpgradeable.log10 */\n      tag_139\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":559:587  MathUpgradeable.log10(value) */\n      jump\t// in\n    tag_138:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":559:591  MathUpgradeable.log10(value) + 1 */\n      add\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":542:591  uint256 length = MathUpgradeable.log10(value) + 1 */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":605:625  string memory buffer */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":639:645  length */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":628:646  new string(length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_140\n      jumpi\n      tag_141\n      tag_142\n      jump\t// in\n    tag_141:\n    tag_140:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_143\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_143:\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":605:646  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":660:671  uint256 ptr */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":786:792  length */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":782:784  32 */\n      0x20\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":778:793  add(32, length) */\n      add\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":770:776  buffer */\n      dup3\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":766:794  add(buffer, add(32, length)) */\n      add\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":759:794  ptr := add(buffer, add(32, length)) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":821:1101  while (true) {... */\n    tag_144:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":828:832  true */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":821:1101  while (true) {... */\n      iszero\n      tag_145\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":852:857  ptr-- */\n      dup1\n      dup1\n      0x01\n      swap1\n      sub\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":991:999  _SYMBOLS */\n      0x3031323334353637383961626364656600000000000000000000000000000000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":986:988  10 */\n      0x0a\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":979:984  value */\n      dup7\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":975:989  mod(value, 10) */\n      mod\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":970:1000  byte(mod(value, 10), _SYMBOLS) */\n      byte\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":965:968  ptr */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":957:1001  mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) */\n      mstore8\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1045:1047  10 */\n      0x0a\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1036:1047  value /= 10 */\n      dup6\n      dup2\n      tag_146\n      jumpi\n      tag_147\n      tag_148\n      jump\t// in\n    tag_147:\n    tag_146:\n      div\n      swap5\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1078:1079  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1069:1074  value */\n      dup6\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1069:1079  value == 0 */\n      eq\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1065:1086  if (value == 0) break */\n      iszero\n      tag_149\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1081:1086  break */\n      jump(tag_145)\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1065:1086  if (value == 0) break */\n    tag_149:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":821:1101  while (true) {... */\n      jump(tag_144)\n    tag_145:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1121:1127  buffer */\n      dup2\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":1114:1127  return buffer */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":437:1144  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7803:7929  function _exists(uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_124:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7868:7872  bool */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7920:7921  0 */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7891:7922  _ownerOf(tokenId) != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7891:7908  _ownerOf(tokenId) */\n      tag_151\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7900:7907  tokenId */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7891:7899  _ownerOf */\n      tag_92\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7891:7908  _ownerOf(tokenId) */\n      jump\t// in\n    tag_151:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7891:7922  _ownerOf(tokenId) != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7884:7922  return _ownerOf(tokenId) != address(0) */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":7803:7929  function _exists(uint256 tokenId) internal view virtual returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":9900:10790  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_139:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":9953:9960  uint256 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":9972:9986  uint256 result */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":9989:9990  0 */\n      0x00\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":9972:9990  uint256 result = 0 */\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10037:10043  10**64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10028:10033  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10028:10043  value >= 10**64 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10024:10123  if (value >= 10**64) {... */\n      tag_153\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10072:10078  10**64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10063:10078  value /= 10**64 */\n      dup4\n      dup2\n      tag_154\n      jumpi\n      tag_155\n      tag_148\n      jump\t// in\n    tag_155:\n    tag_154:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10106:10108  64 */\n      0x40\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10096:10108  result += 64 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10024:10123  if (value >= 10**64) {... */\n    tag_153:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10149:10155  10**32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10140:10145  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10140:10155  value >= 10**32 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10136:10235  if (value >= 10**32) {... */\n      tag_156\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10184:10190  10**32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10175:10190  value /= 10**32 */\n      dup4\n      dup2\n      tag_157\n      jumpi\n      tag_158\n      tag_148\n      jump\t// in\n    tag_158:\n    tag_157:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10218:10220  32 */\n      0x20\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10208:10220  result += 32 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10136:10235  if (value >= 10**32) {... */\n    tag_156:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10261:10267  10**16 */\n      0x2386f26fc10000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10252:10257  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10252:10267  value >= 10**16 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10248:10347  if (value >= 10**16) {... */\n      tag_159\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10296:10302  10**16 */\n      0x2386f26fc10000\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10287:10302  value /= 10**16 */\n      dup4\n      dup2\n      tag_160\n      jumpi\n      tag_161\n      tag_148\n      jump\t// in\n    tag_161:\n    tag_160:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10330:10332  16 */\n      0x10\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10320:10332  result += 16 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10248:10347  if (value >= 10**16) {... */\n    tag_159:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10373:10378  10**8 */\n      0x05f5e100\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10364:10369  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10364:10378  value >= 10**8 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10360:10456  if (value >= 10**8) {... */\n      tag_162\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10407:10412  10**8 */\n      0x05f5e100\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10398:10412  value /= 10**8 */\n      dup4\n      dup2\n      tag_163\n      jumpi\n      tag_164\n      tag_148\n      jump\t// in\n    tag_164:\n    tag_163:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10440:10441  8 */\n      0x08\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10430:10441  result += 8 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10360:10456  if (value >= 10**8) {... */\n    tag_162:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10482:10487  10**4 */\n      0x2710\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10473:10478  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10473:10487  value >= 10**4 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10469:10565  if (value >= 10**4) {... */\n      tag_165\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10516:10521  10**4 */\n      0x2710\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10507:10521  value /= 10**4 */\n      dup4\n      dup2\n      tag_166\n      jumpi\n      tag_167\n      tag_148\n      jump\t// in\n    tag_167:\n    tag_166:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10549:10550  4 */\n      0x04\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10539:10550  result += 4 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10469:10565  if (value >= 10**4) {... */\n    tag_165:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10591:10596  10**2 */\n      0x64\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10582:10587  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10582:10596  value >= 10**2 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10578:10674  if (value >= 10**2) {... */\n      tag_168\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10625:10630  10**2 */\n      0x64\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10616:10630  value /= 10**2 */\n      dup4\n      dup2\n      tag_169\n      jumpi\n      tag_170\n      tag_148\n      jump\t// in\n    tag_170:\n    tag_169:\n      div\n      swap3\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10658:10659  2 */\n      0x02\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10648:10659  result += 2 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10578:10674  if (value >= 10**2) {... */\n    tag_168:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10700:10705  10**1 */\n      0x0a\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10691:10696  value */\n      dup4\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10691:10705  value >= 10**1 */\n      lt\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10687:10751  if (value >= 10**1) {... */\n      tag_171\n      jumpi\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10735:10736  1 */\n      0x01\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10725:10736  result += 1 */\n      dup2\n      add\n      swap1\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10687:10751  if (value >= 10**1) {... */\n    tag_171:\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10777:10783  result */\n      dup1\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":10770:10783  return result */\n      swap2\n      pop\n      pop\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":9900:10790  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_173:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_175\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_176\n      jump\t// in\n    tag_175:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:285   */\n    tag_177:\n        /* \"#utility.yul\":195:200   */\n      0x00\n        /* \"#utility.yul\":233:239   */\n      dup2\n        /* \"#utility.yul\":220:240   */\n      calldataload\n        /* \"#utility.yul\":211:240   */\n      swap1\n      pop\n        /* \"#utility.yul\":249:279   */\n      tag_179\n        /* \"#utility.yul\":273:278   */\n      dup2\n        /* \"#utility.yul\":249:279   */\n      tag_180\n      jump\t// in\n    tag_179:\n        /* \"#utility.yul\":152:285   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":291:428   */\n    tag_181:\n        /* \"#utility.yul\":336:341   */\n      0x00\n        /* \"#utility.yul\":374:380   */\n      dup2\n        /* \"#utility.yul\":361:381   */\n      calldataload\n        /* \"#utility.yul\":352:381   */\n      swap1\n      pop\n        /* \"#utility.yul\":390:422   */\n      tag_183\n        /* \"#utility.yul\":416:421   */\n      dup2\n        /* \"#utility.yul\":390:422   */\n      tag_184\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":291:428   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":434:573   */\n    tag_185:\n        /* \"#utility.yul\":480:485   */\n      0x00\n        /* \"#utility.yul\":518:524   */\n      dup2\n        /* \"#utility.yul\":505:525   */\n      calldataload\n        /* \"#utility.yul\":496:525   */\n      swap1\n      pop\n        /* \"#utility.yul\":534:567   */\n      tag_187\n        /* \"#utility.yul\":561:566   */\n      dup2\n        /* \"#utility.yul\":534:567   */\n      tag_188\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":434:573   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":579:908   */\n    tag_40:\n        /* \"#utility.yul\":638:644   */\n      0x00\n        /* \"#utility.yul\":687:689   */\n      0x20\n        /* \"#utility.yul\":675:684   */\n      dup3\n        /* \"#utility.yul\":666:673   */\n      dup5\n        /* \"#utility.yul\":662:685   */\n      sub\n        /* \"#utility.yul\":658:690   */\n      slt\n        /* \"#utility.yul\":655:774   */\n      iszero\n      tag_190\n      jumpi\n        /* \"#utility.yul\":693:772   */\n      tag_191\n      tag_192\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":655:774   */\n    tag_190:\n        /* \"#utility.yul\":813:814   */\n      0x00\n        /* \"#utility.yul\":838:891   */\n      tag_193\n        /* \"#utility.yul\":883:890   */\n      dup5\n        /* \"#utility.yul\":874:880   */\n      dup3\n        /* \"#utility.yul\":863:872   */\n      dup6\n        /* \"#utility.yul\":859:881   */\n      add\n        /* \"#utility.yul\":838:891   */\n      tag_173\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":828:891   */\n      swap2\n      pop\n        /* \"#utility.yul\":784:901   */\n      pop\n        /* \"#utility.yul\":579:908   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":914:1388   */\n    tag_57:\n        /* \"#utility.yul\":982:988   */\n      0x00\n        /* \"#utility.yul\":990:996   */\n      dup1\n        /* \"#utility.yul\":1039:1041   */\n      0x40\n        /* \"#utility.yul\":1027:1036   */\n      dup4\n        /* \"#utility.yul\":1018:1025   */\n      dup6\n        /* \"#utility.yul\":1014:1037   */\n      sub\n        /* \"#utility.yul\":1010:1042   */\n      slt\n        /* \"#utility.yul\":1007:1126   */\n      iszero\n      tag_195\n      jumpi\n        /* \"#utility.yul\":1045:1124   */\n      tag_196\n      tag_192\n      jump\t// in\n    tag_196:\n        /* \"#utility.yul\":1007:1126   */\n    tag_195:\n        /* \"#utility.yul\":1165:1166   */\n      0x00\n        /* \"#utility.yul\":1190:1243   */\n      tag_197\n        /* \"#utility.yul\":1235:1242   */\n      dup6\n        /* \"#utility.yul\":1226:1232   */\n      dup3\n        /* \"#utility.yul\":1215:1224   */\n      dup7\n        /* \"#utility.yul\":1211:1233   */\n      add\n        /* \"#utility.yul\":1190:1243   */\n      tag_173\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":1180:1243   */\n      swap3\n      pop\n        /* \"#utility.yul\":1136:1253   */\n      pop\n        /* \"#utility.yul\":1292:1294   */\n      0x20\n        /* \"#utility.yul\":1318:1371   */\n      tag_198\n        /* \"#utility.yul\":1363:1370   */\n      dup6\n        /* \"#utility.yul\":1354:1360   */\n      dup3\n        /* \"#utility.yul\":1343:1352   */\n      dup7\n        /* \"#utility.yul\":1339:1361   */\n      add\n        /* \"#utility.yul\":1318:1371   */\n      tag_173\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":1308:1371   */\n      swap2\n      pop\n        /* \"#utility.yul\":1263:1381   */\n      pop\n        /* \"#utility.yul\":914:1388   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1394:1862   */\n    tag_49:\n        /* \"#utility.yul\":1459:1465   */\n      0x00\n        /* \"#utility.yul\":1467:1473   */\n      dup1\n        /* \"#utility.yul\":1516:1518   */\n      0x40\n        /* \"#utility.yul\":1504:1513   */\n      dup4\n        /* \"#utility.yul\":1495:1502   */\n      dup6\n        /* \"#utility.yul\":1491:1514   */\n      sub\n        /* \"#utility.yul\":1487:1519   */\n      slt\n        /* \"#utility.yul\":1484:1603   */\n      iszero\n      tag_200\n      jumpi\n        /* \"#utility.yul\":1522:1601   */\n      tag_201\n      tag_192\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":1484:1603   */\n    tag_200:\n        /* \"#utility.yul\":1642:1643   */\n      0x00\n        /* \"#utility.yul\":1667:1720   */\n      tag_202\n        /* \"#utility.yul\":1712:1719   */\n      dup6\n        /* \"#utility.yul\":1703:1709   */\n      dup3\n        /* \"#utility.yul\":1692:1701   */\n      dup7\n        /* \"#utility.yul\":1688:1710   */\n      add\n        /* \"#utility.yul\":1667:1720   */\n      tag_173\n      jump\t// in\n    tag_202:\n        /* \"#utility.yul\":1657:1720   */\n      swap3\n      pop\n        /* \"#utility.yul\":1613:1730   */\n      pop\n        /* \"#utility.yul\":1769:1771   */\n      0x20\n        /* \"#utility.yul\":1795:1845   */\n      tag_203\n        /* \"#utility.yul\":1837:1844   */\n      dup6\n        /* \"#utility.yul\":1828:1834   */\n      dup3\n        /* \"#utility.yul\":1817:1826   */\n      dup7\n        /* \"#utility.yul\":1813:1835   */\n      add\n        /* \"#utility.yul\":1795:1845   */\n      tag_177\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":1785:1845   */\n      swap2\n      pop\n        /* \"#utility.yul\":1740:1855   */\n      pop\n        /* \"#utility.yul\":1394:1862   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1868:2342   */\n    tag_32:\n        /* \"#utility.yul\":1936:1942   */\n      0x00\n        /* \"#utility.yul\":1944:1950   */\n      dup1\n        /* \"#utility.yul\":1993:1995   */\n      0x40\n        /* \"#utility.yul\":1981:1990   */\n      dup4\n        /* \"#utility.yul\":1972:1979   */\n      dup6\n        /* \"#utility.yul\":1968:1991   */\n      sub\n        /* \"#utility.yul\":1964:1996   */\n      slt\n        /* \"#utility.yul\":1961:2080   */\n      iszero\n      tag_205\n      jumpi\n        /* \"#utility.yul\":1999:2078   */\n      tag_206\n      tag_192\n      jump\t// in\n    tag_206:\n        /* \"#utility.yul\":1961:2080   */\n    tag_205:\n        /* \"#utility.yul\":2119:2120   */\n      0x00\n        /* \"#utility.yul\":2144:2197   */\n      tag_207\n        /* \"#utility.yul\":2189:2196   */\n      dup6\n        /* \"#utility.yul\":2180:2186   */\n      dup3\n        /* \"#utility.yul\":2169:2178   */\n      dup7\n        /* \"#utility.yul\":2165:2187   */\n      add\n        /* \"#utility.yul\":2144:2197   */\n      tag_173\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":2134:2197   */\n      swap3\n      pop\n        /* \"#utility.yul\":2090:2207   */\n      pop\n        /* \"#utility.yul\":2246:2248   */\n      0x20\n        /* \"#utility.yul\":2272:2325   */\n      tag_208\n        /* \"#utility.yul\":2317:2324   */\n      dup6\n        /* \"#utility.yul\":2308:2314   */\n      dup3\n        /* \"#utility.yul\":2297:2306   */\n      dup7\n        /* \"#utility.yul\":2293:2315   */\n      add\n        /* \"#utility.yul\":2272:2325   */\n      tag_185\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":2262:2325   */\n      swap2\n      pop\n        /* \"#utility.yul\":2217:2335   */\n      pop\n        /* \"#utility.yul\":1868:2342   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2348:2675   */\n    tag_16:\n        /* \"#utility.yul\":2406:2412   */\n      0x00\n        /* \"#utility.yul\":2455:2457   */\n      0x20\n        /* \"#utility.yul\":2443:2452   */\n      dup3\n        /* \"#utility.yul\":2434:2441   */\n      dup5\n        /* \"#utility.yul\":2430:2453   */\n      sub\n        /* \"#utility.yul\":2426:2458   */\n      slt\n        /* \"#utility.yul\":2423:2542   */\n      iszero\n      tag_210\n      jumpi\n        /* \"#utility.yul\":2461:2540   */\n      tag_211\n      tag_192\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":2423:2542   */\n    tag_210:\n        /* \"#utility.yul\":2581:2582   */\n      0x00\n        /* \"#utility.yul\":2606:2658   */\n      tag_212\n        /* \"#utility.yul\":2650:2657   */\n      dup5\n        /* \"#utility.yul\":2641:2647   */\n      dup3\n        /* \"#utility.yul\":2630:2639   */\n      dup6\n        /* \"#utility.yul\":2626:2648   */\n      add\n        /* \"#utility.yul\":2606:2658   */\n      tag_181\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":2596:2658   */\n      swap2\n      pop\n        /* \"#utility.yul\":2552:2668   */\n      pop\n        /* \"#utility.yul\":2348:2675   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2681:3010   */\n    tag_26:\n        /* \"#utility.yul\":2740:2746   */\n      0x00\n        /* \"#utility.yul\":2789:2791   */\n      0x20\n        /* \"#utility.yul\":2777:2786   */\n      dup3\n        /* \"#utility.yul\":2768:2775   */\n      dup5\n        /* \"#utility.yul\":2764:2787   */\n      sub\n        /* \"#utility.yul\":2760:2792   */\n      slt\n        /* \"#utility.yul\":2757:2876   */\n      iszero\n      tag_214\n      jumpi\n        /* \"#utility.yul\":2795:2874   */\n      tag_215\n      tag_192\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":2757:2876   */\n    tag_214:\n        /* \"#utility.yul\":2915:2916   */\n      0x00\n        /* \"#utility.yul\":2940:2993   */\n      tag_216\n        /* \"#utility.yul\":2985:2992   */\n      dup5\n        /* \"#utility.yul\":2976:2982   */\n      dup3\n        /* \"#utility.yul\":2965:2974   */\n      dup6\n        /* \"#utility.yul\":2961:2983   */\n      add\n        /* \"#utility.yul\":2940:2993   */\n      tag_185\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":2930:2993   */\n      swap2\n      pop\n        /* \"#utility.yul\":2886:3003   */\n      pop\n        /* \"#utility.yul\":2681:3010   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3016:3134   */\n    tag_217:\n        /* \"#utility.yul\":3103:3127   */\n      tag_219\n        /* \"#utility.yul\":3121:3126   */\n      dup2\n        /* \"#utility.yul\":3103:3127   */\n      tag_220\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":3098:3101   */\n      dup3\n        /* \"#utility.yul\":3091:3128   */\n      mstore\n        /* \"#utility.yul\":3016:3134   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3140:3249   */\n    tag_221:\n        /* \"#utility.yul\":3221:3242   */\n      tag_223\n        /* \"#utility.yul\":3236:3241   */\n      dup2\n        /* \"#utility.yul\":3221:3242   */\n      tag_224\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":3216:3219   */\n      dup3\n        /* \"#utility.yul\":3209:3243   */\n      mstore\n        /* \"#utility.yul\":3140:3249   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3255:3619   */\n    tag_225:\n        /* \"#utility.yul\":3343:3346   */\n      0x00\n        /* \"#utility.yul\":3371:3410   */\n      tag_227\n        /* \"#utility.yul\":3404:3409   */\n      dup3\n        /* \"#utility.yul\":3371:3410   */\n      tag_228\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":3426:3497   */\n      tag_229\n        /* \"#utility.yul\":3490:3496   */\n      dup2\n        /* \"#utility.yul\":3485:3488   */\n      dup6\n        /* \"#utility.yul\":3426:3497   */\n      tag_230\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":3419:3497   */\n      swap4\n      pop\n        /* \"#utility.yul\":3506:3558   */\n      tag_231\n        /* \"#utility.yul\":3551:3557   */\n      dup2\n        /* \"#utility.yul\":3546:3549   */\n      dup6\n        /* \"#utility.yul\":3539:3543   */\n      0x20\n        /* \"#utility.yul\":3532:3537   */\n      dup7\n        /* \"#utility.yul\":3528:3544   */\n      add\n        /* \"#utility.yul\":3506:3558   */\n      tag_232\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":3583:3612   */\n      tag_233\n        /* \"#utility.yul\":3605:3611   */\n      dup2\n        /* \"#utility.yul\":3583:3612   */\n      tag_234\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":3578:3581   */\n      dup5\n        /* \"#utility.yul\":3574:3613   */\n      add\n        /* \"#utility.yul\":3567:3613   */\n      swap2\n      pop\n        /* \"#utility.yul\":3347:3619   */\n      pop\n        /* \"#utility.yul\":3255:3619   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3625:4002   */\n    tag_235:\n        /* \"#utility.yul\":3731:3734   */\n      0x00\n        /* \"#utility.yul\":3759:3798   */\n      tag_237\n        /* \"#utility.yul\":3792:3797   */\n      dup3\n        /* \"#utility.yul\":3759:3798   */\n      tag_228\n      jump\t// in\n    tag_237:\n        /* \"#utility.yul\":3814:3903   */\n      tag_238\n        /* \"#utility.yul\":3896:3902   */\n      dup2\n        /* \"#utility.yul\":3891:3894   */\n      dup6\n        /* \"#utility.yul\":3814:3903   */\n      tag_239\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":3807:3903   */\n      swap4\n      pop\n        /* \"#utility.yul\":3912:3964   */\n      tag_240\n        /* \"#utility.yul\":3957:3963   */\n      dup2\n        /* \"#utility.yul\":3952:3955   */\n      dup6\n        /* \"#utility.yul\":3945:3949   */\n      0x20\n        /* \"#utility.yul\":3938:3943   */\n      dup7\n        /* \"#utility.yul\":3934:3950   */\n      add\n        /* \"#utility.yul\":3912:3964   */\n      tag_232\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":3989:3995   */\n      dup1\n        /* \"#utility.yul\":3984:3987   */\n      dup5\n        /* \"#utility.yul\":3980:3996   */\n      add\n        /* \"#utility.yul\":3973:3996   */\n      swap2\n      pop\n        /* \"#utility.yul\":3735:4002   */\n      pop\n        /* \"#utility.yul\":3625:4002   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4008:4374   */\n    tag_241:\n        /* \"#utility.yul\":4150:4153   */\n      0x00\n        /* \"#utility.yul\":4171:4238   */\n      tag_243\n        /* \"#utility.yul\":4235:4237   */\n      0x19\n        /* \"#utility.yul\":4230:4233   */\n      dup4\n        /* \"#utility.yul\":4171:4238   */\n      tag_230\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":4164:4238   */\n      swap2\n      pop\n        /* \"#utility.yul\":4247:4340   */\n      tag_244\n        /* \"#utility.yul\":4336:4339   */\n      dup3\n        /* \"#utility.yul\":4247:4340   */\n      tag_245\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":4365:4367   */\n      0x20\n        /* \"#utility.yul\":4360:4363   */\n      dup3\n        /* \"#utility.yul\":4356:4368   */\n      add\n        /* \"#utility.yul\":4349:4368   */\n      swap1\n      pop\n        /* \"#utility.yul\":4008:4374   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4380:4746   */\n    tag_246:\n        /* \"#utility.yul\":4522:4525   */\n      0x00\n        /* \"#utility.yul\":4543:4610   */\n      tag_248\n        /* \"#utility.yul\":4607:4609   */\n      0x29\n        /* \"#utility.yul\":4602:4605   */\n      dup4\n        /* \"#utility.yul\":4543:4610   */\n      tag_230\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":4536:4610   */\n      swap2\n      pop\n        /* \"#utility.yul\":4619:4712   */\n      tag_249\n        /* \"#utility.yul\":4708:4711   */\n      dup3\n        /* \"#utility.yul\":4619:4712   */\n      tag_250\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":4737:4739   */\n      0x40\n        /* \"#utility.yul\":4732:4735   */\n      dup3\n        /* \"#utility.yul\":4728:4740   */\n      add\n        /* \"#utility.yul\":4721:4740   */\n      swap1\n      pop\n        /* \"#utility.yul\":4380:4746   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4752:5118   */\n    tag_251:\n        /* \"#utility.yul\":4894:4897   */\n      0x00\n        /* \"#utility.yul\":4915:4982   */\n      tag_253\n        /* \"#utility.yul\":4979:4981   */\n      0x18\n        /* \"#utility.yul\":4974:4977   */\n      dup4\n        /* \"#utility.yul\":4915:4982   */\n      tag_230\n      jump\t// in\n    tag_253:\n        /* \"#utility.yul\":4908:4982   */\n      swap2\n      pop\n        /* \"#utility.yul\":4991:5084   */\n      tag_254\n        /* \"#utility.yul\":5080:5083   */\n      dup3\n        /* \"#utility.yul\":4991:5084   */\n      tag_255\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":5109:5111   */\n      0x20\n        /* \"#utility.yul\":5104:5107   */\n      dup3\n        /* \"#utility.yul\":5100:5112   */\n      add\n        /* \"#utility.yul\":5093:5112   */\n      swap1\n      pop\n        /* \"#utility.yul\":4752:5118   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5124:5490   */\n    tag_256:\n        /* \"#utility.yul\":5266:5269   */\n      0x00\n        /* \"#utility.yul\":5287:5354   */\n      tag_258\n        /* \"#utility.yul\":5351:5353   */\n      0x21\n        /* \"#utility.yul\":5346:5349   */\n      dup4\n        /* \"#utility.yul\":5287:5354   */\n      tag_230\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":5280:5354   */\n      swap2\n      pop\n        /* \"#utility.yul\":5363:5456   */\n      tag_259\n        /* \"#utility.yul\":5452:5455   */\n      dup3\n        /* \"#utility.yul\":5363:5456   */\n      tag_260\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":5481:5483   */\n      0x40\n        /* \"#utility.yul\":5476:5479   */\n      dup3\n        /* \"#utility.yul\":5472:5484   */\n      add\n        /* \"#utility.yul\":5465:5484   */\n      swap1\n      pop\n        /* \"#utility.yul\":5124:5490   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5496:5862   */\n    tag_261:\n        /* \"#utility.yul\":5638:5641   */\n      0x00\n        /* \"#utility.yul\":5659:5726   */\n      tag_263\n        /* \"#utility.yul\":5723:5725   */\n      0x3d\n        /* \"#utility.yul\":5718:5721   */\n      dup4\n        /* \"#utility.yul\":5659:5726   */\n      tag_230\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":5652:5726   */\n      swap2\n      pop\n        /* \"#utility.yul\":5735:5828   */\n      tag_264\n        /* \"#utility.yul\":5824:5827   */\n      dup3\n        /* \"#utility.yul\":5735:5828   */\n      tag_265\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":5853:5855   */\n      0x40\n        /* \"#utility.yul\":5848:5851   */\n      dup3\n        /* \"#utility.yul\":5844:5856   */\n      add\n        /* \"#utility.yul\":5837:5856   */\n      swap1\n      pop\n        /* \"#utility.yul\":5496:5862   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5868:5986   */\n    tag_266:\n        /* \"#utility.yul\":5955:5979   */\n      tag_268\n        /* \"#utility.yul\":5973:5978   */\n      dup2\n        /* \"#utility.yul\":5955:5979   */\n      tag_269\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":5950:5953   */\n      dup3\n        /* \"#utility.yul\":5943:5980   */\n      mstore\n        /* \"#utility.yul\":5868:5986   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5992:6427   */\n    tag_119:\n        /* \"#utility.yul\":6172:6175   */\n      0x00\n        /* \"#utility.yul\":6194:6289   */\n      tag_271\n        /* \"#utility.yul\":6285:6288   */\n      dup3\n        /* \"#utility.yul\":6276:6282   */\n      dup6\n        /* \"#utility.yul\":6194:6289   */\n      tag_235\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":6187:6289   */\n      swap2\n      pop\n        /* \"#utility.yul\":6306:6401   */\n      tag_272\n        /* \"#utility.yul\":6397:6400   */\n      dup3\n        /* \"#utility.yul\":6388:6394   */\n      dup5\n        /* \"#utility.yul\":6306:6401   */\n      tag_235\n      jump\t// in\n    tag_272:\n        /* \"#utility.yul\":6299:6401   */\n      swap2\n      pop\n        /* \"#utility.yul\":6418:6421   */\n      dup2\n        /* \"#utility.yul\":6411:6421   */\n      swap1\n      pop\n        /* \"#utility.yul\":5992:6427   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6433:6655   */\n    tag_29:\n        /* \"#utility.yul\":6526:6530   */\n      0x00\n        /* \"#utility.yul\":6564:6566   */\n      0x20\n        /* \"#utility.yul\":6553:6562   */\n      dup3\n        /* \"#utility.yul\":6549:6567   */\n      add\n        /* \"#utility.yul\":6541:6567   */\n      swap1\n      pop\n        /* \"#utility.yul\":6577:6648   */\n      tag_274\n        /* \"#utility.yul\":6645:6646   */\n      0x00\n        /* \"#utility.yul\":6634:6643   */\n      dup4\n        /* \"#utility.yul\":6630:6647   */\n      add\n        /* \"#utility.yul\":6621:6627   */\n      dup5\n        /* \"#utility.yul\":6577:6648   */\n      tag_217\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":6433:6655   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6661:6871   */\n    tag_19:\n        /* \"#utility.yul\":6748:6752   */\n      0x00\n        /* \"#utility.yul\":6786:6788   */\n      0x20\n        /* \"#utility.yul\":6775:6784   */\n      dup3\n        /* \"#utility.yul\":6771:6789   */\n      add\n        /* \"#utility.yul\":6763:6789   */\n      swap1\n      pop\n        /* \"#utility.yul\":6799:6864   */\n      tag_276\n        /* \"#utility.yul\":6861:6862   */\n      0x00\n        /* \"#utility.yul\":6850:6859   */\n      dup4\n        /* \"#utility.yul\":6846:6863   */\n      add\n        /* \"#utility.yul\":6837:6843   */\n      dup5\n        /* \"#utility.yul\":6799:6864   */\n      tag_221\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":6661:6871   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6877:7190   */\n    tag_23:\n        /* \"#utility.yul\":6990:6994   */\n      0x00\n        /* \"#utility.yul\":7028:7030   */\n      0x20\n        /* \"#utility.yul\":7017:7026   */\n      dup3\n        /* \"#utility.yul\":7013:7031   */\n      add\n        /* \"#utility.yul\":7005:7031   */\n      swap1\n      pop\n        /* \"#utility.yul\":7077:7086   */\n      dup2\n        /* \"#utility.yul\":7071:7075   */\n      dup2\n        /* \"#utility.yul\":7067:7087   */\n      sub\n        /* \"#utility.yul\":7063:7064   */\n      0x00\n        /* \"#utility.yul\":7052:7061   */\n      dup4\n        /* \"#utility.yul\":7048:7065   */\n      add\n        /* \"#utility.yul\":7041:7088   */\n      mstore\n        /* \"#utility.yul\":7105:7183   */\n      tag_278\n        /* \"#utility.yul\":7178:7182   */\n      dup2\n        /* \"#utility.yul\":7169:7175   */\n      dup5\n        /* \"#utility.yul\":7105:7183   */\n      tag_225\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":7097:7183   */\n      swap1\n      pop\n        /* \"#utility.yul\":6877:7190   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7196:7615   */\n    tag_134:\n        /* \"#utility.yul\":7362:7366   */\n      0x00\n        /* \"#utility.yul\":7400:7402   */\n      0x20\n        /* \"#utility.yul\":7389:7398   */\n      dup3\n        /* \"#utility.yul\":7385:7403   */\n      add\n        /* \"#utility.yul\":7377:7403   */\n      swap1\n      pop\n        /* \"#utility.yul\":7449:7458   */\n      dup2\n        /* \"#utility.yul\":7443:7447   */\n      dup2\n        /* \"#utility.yul\":7439:7459   */\n      sub\n        /* \"#utility.yul\":7435:7436   */\n      0x00\n        /* \"#utility.yul\":7424:7433   */\n      dup4\n        /* \"#utility.yul\":7420:7437   */\n      add\n        /* \"#utility.yul\":7413:7460   */\n      mstore\n        /* \"#utility.yul\":7477:7608   */\n      tag_280\n        /* \"#utility.yul\":7603:7607   */\n      dup2\n        /* \"#utility.yul\":7477:7608   */\n      tag_241\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":7469:7608   */\n      swap1\n      pop\n        /* \"#utility.yul\":7196:7615   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7621:8040   */\n    tag_99:\n        /* \"#utility.yul\":7787:7791   */\n      0x00\n        /* \"#utility.yul\":7825:7827   */\n      0x20\n        /* \"#utility.yul\":7814:7823   */\n      dup3\n        /* \"#utility.yul\":7810:7828   */\n      add\n        /* \"#utility.yul\":7802:7828   */\n      swap1\n      pop\n        /* \"#utility.yul\":7874:7883   */\n      dup2\n        /* \"#utility.yul\":7868:7872   */\n      dup2\n        /* \"#utility.yul\":7864:7884   */\n      sub\n        /* \"#utility.yul\":7860:7861   */\n      0x00\n        /* \"#utility.yul\":7849:7858   */\n      dup4\n        /* \"#utility.yul\":7845:7862   */\n      add\n        /* \"#utility.yul\":7838:7885   */\n      mstore\n        /* \"#utility.yul\":7902:8033   */\n      tag_282\n        /* \"#utility.yul\":8028:8032   */\n      dup2\n        /* \"#utility.yul\":7902:8033   */\n      tag_246\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":7894:8033   */\n      swap1\n      pop\n        /* \"#utility.yul\":7621:8040   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8046:8465   */\n    tag_95:\n        /* \"#utility.yul\":8212:8216   */\n      0x00\n        /* \"#utility.yul\":8250:8252   */\n      0x20\n        /* \"#utility.yul\":8239:8248   */\n      dup3\n        /* \"#utility.yul\":8235:8253   */\n      add\n        /* \"#utility.yul\":8227:8253   */\n      swap1\n      pop\n        /* \"#utility.yul\":8299:8308   */\n      dup2\n        /* \"#utility.yul\":8293:8297   */\n      dup2\n        /* \"#utility.yul\":8289:8309   */\n      sub\n        /* \"#utility.yul\":8285:8286   */\n      0x00\n        /* \"#utility.yul\":8274:8283   */\n      dup4\n        /* \"#utility.yul\":8270:8287   */\n      add\n        /* \"#utility.yul\":8263:8310   */\n      mstore\n        /* \"#utility.yul\":8327:8458   */\n      tag_284\n        /* \"#utility.yul\":8453:8457   */\n      dup2\n        /* \"#utility.yul\":8327:8458   */\n      tag_251\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":8319:8458   */\n      swap1\n      pop\n        /* \"#utility.yul\":8046:8465   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8471:8890   */\n    tag_79:\n        /* \"#utility.yul\":8637:8641   */\n      0x00\n        /* \"#utility.yul\":8675:8677   */\n      0x20\n        /* \"#utility.yul\":8664:8673   */\n      dup3\n        /* \"#utility.yul\":8660:8678   */\n      add\n        /* \"#utility.yul\":8652:8678   */\n      swap1\n      pop\n        /* \"#utility.yul\":8724:8733   */\n      dup2\n        /* \"#utility.yul\":8718:8722   */\n      dup2\n        /* \"#utility.yul\":8714:8734   */\n      sub\n        /* \"#utility.yul\":8710:8711   */\n      0x00\n        /* \"#utility.yul\":8699:8708   */\n      dup4\n        /* \"#utility.yul\":8695:8712   */\n      add\n        /* \"#utility.yul\":8688:8735   */\n      mstore\n        /* \"#utility.yul\":8752:8883   */\n      tag_286\n        /* \"#utility.yul\":8878:8882   */\n      dup2\n        /* \"#utility.yul\":8752:8883   */\n      tag_256\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":8744:8883   */\n      swap1\n      pop\n        /* \"#utility.yul\":8471:8890   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8896:9315   */\n    tag_87:\n        /* \"#utility.yul\":9062:9066   */\n      0x00\n        /* \"#utility.yul\":9100:9102   */\n      0x20\n        /* \"#utility.yul\":9089:9098   */\n      dup3\n        /* \"#utility.yul\":9085:9103   */\n      add\n        /* \"#utility.yul\":9077:9103   */\n      swap1\n      pop\n        /* \"#utility.yul\":9149:9158   */\n      dup2\n        /* \"#utility.yul\":9143:9147   */\n      dup2\n        /* \"#utility.yul\":9139:9159   */\n      sub\n        /* \"#utility.yul\":9135:9136   */\n      0x00\n        /* \"#utility.yul\":9124:9133   */\n      dup4\n        /* \"#utility.yul\":9120:9137   */\n      add\n        /* \"#utility.yul\":9113:9160   */\n      mstore\n        /* \"#utility.yul\":9177:9308   */\n      tag_288\n        /* \"#utility.yul\":9303:9307   */\n      dup2\n        /* \"#utility.yul\":9177:9308   */\n      tag_261\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":9169:9308   */\n      swap1\n      pop\n        /* \"#utility.yul\":8896:9315   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9321:9543   */\n    tag_43:\n        /* \"#utility.yul\":9414:9418   */\n      0x00\n        /* \"#utility.yul\":9452:9454   */\n      0x20\n        /* \"#utility.yul\":9441:9450   */\n      dup3\n        /* \"#utility.yul\":9437:9455   */\n      add\n        /* \"#utility.yul\":9429:9455   */\n      swap1\n      pop\n        /* \"#utility.yul\":9465:9536   */\n      tag_290\n        /* \"#utility.yul\":9533:9534   */\n      0x00\n        /* \"#utility.yul\":9522:9531   */\n      dup4\n        /* \"#utility.yul\":9518:9535   */\n      add\n        /* \"#utility.yul\":9509:9515   */\n      dup5\n        /* \"#utility.yul\":9465:9536   */\n      tag_266\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":9321:9543   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9630:9729   */\n    tag_228:\n        /* \"#utility.yul\":9682:9688   */\n      0x00\n        /* \"#utility.yul\":9716:9721   */\n      dup2\n        /* \"#utility.yul\":9710:9722   */\n      mload\n        /* \"#utility.yul\":9700:9722   */\n      swap1\n      pop\n        /* \"#utility.yul\":9630:9729   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9735:9904   */\n    tag_230:\n        /* \"#utility.yul\":9819:9830   */\n      0x00\n        /* \"#utility.yul\":9853:9859   */\n      dup3\n        /* \"#utility.yul\":9848:9851   */\n      dup3\n        /* \"#utility.yul\":9841:9860   */\n      mstore\n        /* \"#utility.yul\":9893:9897   */\n      0x20\n        /* \"#utility.yul\":9888:9891   */\n      dup3\n        /* \"#utility.yul\":9884:9898   */\n      add\n        /* \"#utility.yul\":9869:9898   */\n      swap1\n      pop\n        /* \"#utility.yul\":9735:9904   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9910:10058   */\n    tag_239:\n        /* \"#utility.yul\":10012:10023   */\n      0x00\n        /* \"#utility.yul\":10049:10052   */\n      dup2\n        /* \"#utility.yul\":10034:10052   */\n      swap1\n      pop\n        /* \"#utility.yul\":9910:10058   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10064:10160   */\n    tag_220:\n        /* \"#utility.yul\":10101:10108   */\n      0x00\n        /* \"#utility.yul\":10130:10154   */\n      tag_297\n        /* \"#utility.yul\":10148:10153   */\n      dup3\n        /* \"#utility.yul\":10130:10154   */\n      tag_298\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":10119:10154   */\n      swap1\n      pop\n        /* \"#utility.yul\":10064:10160   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10166:10256   */\n    tag_224:\n        /* \"#utility.yul\":10200:10207   */\n      0x00\n        /* \"#utility.yul\":10243:10248   */\n      dup2\n        /* \"#utility.yul\":10236:10249   */\n      iszero\n        /* \"#utility.yul\":10229:10250   */\n      iszero\n        /* \"#utility.yul\":10218:10250   */\n      swap1\n      pop\n        /* \"#utility.yul\":10166:10256   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10262:10411   */\n    tag_300:\n        /* \"#utility.yul\":10298:10305   */\n      0x00\n        /* \"#utility.yul\":10338:10404   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10331:10336   */\n      dup3\n        /* \"#utility.yul\":10327:10405   */\n      and\n        /* \"#utility.yul\":10316:10405   */\n      swap1\n      pop\n        /* \"#utility.yul\":10262:10411   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10417:10543   */\n    tag_298:\n        /* \"#utility.yul\":10454:10461   */\n      0x00\n        /* \"#utility.yul\":10494:10536   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":10487:10492   */\n      dup3\n        /* \"#utility.yul\":10483:10537   */\n      and\n        /* \"#utility.yul\":10472:10537   */\n      swap1\n      pop\n        /* \"#utility.yul\":10417:10543   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10549:10626   */\n    tag_269:\n        /* \"#utility.yul\":10586:10593   */\n      0x00\n        /* \"#utility.yul\":10615:10620   */\n      dup2\n        /* \"#utility.yul\":10604:10620   */\n      swap1\n      pop\n        /* \"#utility.yul\":10549:10626   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10632:10939   */\n    tag_232:\n        /* \"#utility.yul\":10700:10701   */\n      0x00\n        /* \"#utility.yul\":10710:10823   */\n    tag_305:\n        /* \"#utility.yul\":10724:10730   */\n      dup4\n        /* \"#utility.yul\":10721:10722   */\n      dup2\n        /* \"#utility.yul\":10718:10731   */\n      lt\n        /* \"#utility.yul\":10710:10823   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":10809:10810   */\n      dup1\n        /* \"#utility.yul\":10804:10807   */\n      dup3\n        /* \"#utility.yul\":10800:10811   */\n      add\n        /* \"#utility.yul\":10794:10812   */\n      mload\n        /* \"#utility.yul\":10790:10791   */\n      dup2\n        /* \"#utility.yul\":10785:10788   */\n      dup5\n        /* \"#utility.yul\":10781:10792   */\n      add\n        /* \"#utility.yul\":10774:10813   */\n      mstore\n        /* \"#utility.yul\":10746:10748   */\n      0x20\n        /* \"#utility.yul\":10743:10744   */\n      dup2\n        /* \"#utility.yul\":10739:10749   */\n      add\n        /* \"#utility.yul\":10734:10749   */\n      swap1\n      pop\n        /* \"#utility.yul\":10710:10823   */\n      jump(tag_305)\n    tag_307:\n        /* \"#utility.yul\":10841:10847   */\n      dup4\n        /* \"#utility.yul\":10838:10839   */\n      dup2\n        /* \"#utility.yul\":10835:10848   */\n      gt\n        /* \"#utility.yul\":10832:10933   */\n      iszero\n      tag_308\n      jumpi\n        /* \"#utility.yul\":10921:10922   */\n      0x00\n        /* \"#utility.yul\":10912:10918   */\n      dup5\n        /* \"#utility.yul\":10907:10910   */\n      dup5\n        /* \"#utility.yul\":10903:10919   */\n      add\n        /* \"#utility.yul\":10896:10923   */\n      mstore\n        /* \"#utility.yul\":10832:10933   */\n    tag_308:\n        /* \"#utility.yul\":10681:10939   */\n      pop\n        /* \"#utility.yul\":10632:10939   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10945:11265   */\n    tag_67:\n        /* \"#utility.yul\":10989:10995   */\n      0x00\n        /* \"#utility.yul\":11026:11027   */\n      0x02\n        /* \"#utility.yul\":11020:11024   */\n      dup3\n        /* \"#utility.yul\":11016:11028   */\n      div\n        /* \"#utility.yul\":11006:11028   */\n      swap1\n      pop\n        /* \"#utility.yul\":11073:11074   */\n      0x01\n        /* \"#utility.yul\":11067:11071   */\n      dup3\n        /* \"#utility.yul\":11063:11075   */\n      and\n        /* \"#utility.yul\":11094:11112   */\n      dup1\n        /* \"#utility.yul\":11084:11165   */\n      tag_310\n      jumpi\n        /* \"#utility.yul\":11150:11154   */\n      0x7f\n        /* \"#utility.yul\":11142:11148   */\n      dup3\n        /* \"#utility.yul\":11138:11155   */\n      and\n        /* \"#utility.yul\":11128:11155   */\n      swap2\n      pop\n        /* \"#utility.yul\":11084:11165   */\n    tag_310:\n        /* \"#utility.yul\":11212:11214   */\n      0x20\n        /* \"#utility.yul\":11204:11210   */\n      dup3\n        /* \"#utility.yul\":11201:11215   */\n      lt\n        /* \"#utility.yul\":11181:11199   */\n      dup2\n        /* \"#utility.yul\":11178:11216   */\n      eq\n        /* \"#utility.yul\":11175:11259   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":11231:11249   */\n      tag_312\n      tag_313\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":11175:11259   */\n    tag_311:\n        /* \"#utility.yul\":10996:11265   */\n      pop\n        /* \"#utility.yul\":10945:11265   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11271:11451   */\n    tag_148:\n        /* \"#utility.yul\":11319:11396   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11316:11317   */\n      0x00\n        /* \"#utility.yul\":11309:11397   */\n      mstore\n        /* \"#utility.yul\":11416:11420   */\n      0x12\n        /* \"#utility.yul\":11413:11414   */\n      0x04\n        /* \"#utility.yul\":11406:11421   */\n      mstore\n        /* \"#utility.yul\":11440:11444   */\n      0x24\n        /* \"#utility.yul\":11437:11438   */\n      0x00\n        /* \"#utility.yul\":11430:11445   */\n      revert\n        /* \"#utility.yul\":11457:11637   */\n    tag_313:\n        /* \"#utility.yul\":11505:11582   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11502:11503   */\n      0x00\n        /* \"#utility.yul\":11495:11583   */\n      mstore\n        /* \"#utility.yul\":11602:11606   */\n      0x22\n        /* \"#utility.yul\":11599:11600   */\n      0x04\n        /* \"#utility.yul\":11592:11607   */\n      mstore\n        /* \"#utility.yul\":11626:11630   */\n      0x24\n        /* \"#utility.yul\":11623:11624   */\n      0x00\n        /* \"#utility.yul\":11616:11631   */\n      revert\n        /* \"#utility.yul\":11643:11823   */\n    tag_142:\n        /* \"#utility.yul\":11691:11768   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11688:11689   */\n      0x00\n        /* \"#utility.yul\":11681:11769   */\n      mstore\n        /* \"#utility.yul\":11788:11792   */\n      0x41\n        /* \"#utility.yul\":11785:11786   */\n      0x04\n        /* \"#utility.yul\":11778:11793   */\n      mstore\n        /* \"#utility.yul\":11812:11816   */\n      0x24\n        /* \"#utility.yul\":11809:11810   */\n      0x00\n        /* \"#utility.yul\":11802:11817   */\n      revert\n        /* \"#utility.yul\":11952:12069   */\n    tag_192:\n        /* \"#utility.yul\":12061:12062   */\n      0x00\n        /* \"#utility.yul\":12058:12059   */\n      dup1\n        /* \"#utility.yul\":12051:12063   */\n      revert\n        /* \"#utility.yul\":12075:12177   */\n    tag_234:\n        /* \"#utility.yul\":12116:12122   */\n      0x00\n        /* \"#utility.yul\":12167:12169   */\n      0x1f\n        /* \"#utility.yul\":12163:12170   */\n      not\n        /* \"#utility.yul\":12158:12160   */\n      0x1f\n        /* \"#utility.yul\":12151:12156   */\n      dup4\n        /* \"#utility.yul\":12147:12161   */\n      add\n        /* \"#utility.yul\":12143:12171   */\n      and\n        /* \"#utility.yul\":12133:12171   */\n      swap1\n      pop\n        /* \"#utility.yul\":12075:12177   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12183:12358   */\n    tag_245:\n        /* \"#utility.yul\":12323:12350   */\n      0x4552433732313a20617070726f766520746f2063616c6c657200000000000000\n        /* \"#utility.yul\":12319:12320   */\n      0x00\n        /* \"#utility.yul\":12311:12317   */\n      dup3\n        /* \"#utility.yul\":12307:12321   */\n      add\n        /* \"#utility.yul\":12300:12351   */\n      mstore\n        /* \"#utility.yul\":12183:12358   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12364:12592   */\n    tag_250:\n        /* \"#utility.yul\":12504:12538   */\n      0x4552433732313a2061646472657373207a65726f206973206e6f742061207661\n        /* \"#utility.yul\":12500:12501   */\n      0x00\n        /* \"#utility.yul\":12492:12498   */\n      dup3\n        /* \"#utility.yul\":12488:12502   */\n      add\n        /* \"#utility.yul\":12481:12539   */\n      mstore\n        /* \"#utility.yul\":12573:12584   */\n      0x6c6964206f776e65720000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12568:12570   */\n      0x20\n        /* \"#utility.yul\":12560:12566   */\n      dup3\n        /* \"#utility.yul\":12556:12571   */\n      add\n        /* \"#utility.yul\":12549:12585   */\n      mstore\n        /* \"#utility.yul\":12364:12592   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12598:12772   */\n    tag_255:\n        /* \"#utility.yul\":12738:12764   */\n      0x4552433732313a20696e76616c696420746f6b656e2049440000000000000000\n        /* \"#utility.yul\":12734:12735   */\n      0x00\n        /* \"#utility.yul\":12726:12732   */\n      dup3\n        /* \"#utility.yul\":12722:12736   */\n      add\n        /* \"#utility.yul\":12715:12765   */\n      mstore\n        /* \"#utility.yul\":12598:12772   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12778:12998   */\n    tag_260:\n        /* \"#utility.yul\":12918:12952   */\n      0x4552433732313a20617070726f76616c20746f2063757272656e74206f776e65\n        /* \"#utility.yul\":12914:12915   */\n      0x00\n        /* \"#utility.yul\":12906:12912   */\n      dup3\n        /* \"#utility.yul\":12902:12916   */\n      add\n        /* \"#utility.yul\":12895:12953   */\n      mstore\n        /* \"#utility.yul\":12987:12990   */\n      0x7200000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12982:12984   */\n      0x20\n        /* \"#utility.yul\":12974:12980   */\n      dup3\n        /* \"#utility.yul\":12970:12985   */\n      add\n        /* \"#utility.yul\":12963:12991   */\n      mstore\n        /* \"#utility.yul\":12778:12998   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13004:13252   */\n    tag_265:\n        /* \"#utility.yul\":13144:13178   */\n      0x4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f\n        /* \"#utility.yul\":13140:13141   */\n      0x00\n        /* \"#utility.yul\":13132:13138   */\n      dup3\n        /* \"#utility.yul\":13128:13142   */\n      add\n        /* \"#utility.yul\":13121:13179   */\n      mstore\n        /* \"#utility.yul\":13213:13244   */\n      0x6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000\n        /* \"#utility.yul\":13208:13210   */\n      0x20\n        /* \"#utility.yul\":13200:13206   */\n      dup3\n        /* \"#utility.yul\":13196:13211   */\n      add\n        /* \"#utility.yul\":13189:13245   */\n      mstore\n        /* \"#utility.yul\":13004:13252   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13258:13380   */\n    tag_176:\n        /* \"#utility.yul\":13331:13355   */\n      tag_327\n        /* \"#utility.yul\":13349:13354   */\n      dup2\n        /* \"#utility.yul\":13331:13355   */\n      tag_220\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":13324:13329   */\n      dup2\n        /* \"#utility.yul\":13321:13356   */\n      eq\n        /* \"#utility.yul\":13311:13374   */\n      tag_328\n      jumpi\n        /* \"#utility.yul\":13370:13371   */\n      0x00\n        /* \"#utility.yul\":13367:13368   */\n      dup1\n        /* \"#utility.yul\":13360:13372   */\n      revert\n        /* \"#utility.yul\":13311:13374   */\n    tag_328:\n        /* \"#utility.yul\":13258:13380   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13386:13502   */\n    tag_180:\n        /* \"#utility.yul\":13456:13477   */\n      tag_330\n        /* \"#utility.yul\":13471:13476   */\n      dup2\n        /* \"#utility.yul\":13456:13477   */\n      tag_224\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":13449:13454   */\n      dup2\n        /* \"#utility.yul\":13446:13478   */\n      eq\n        /* \"#utility.yul\":13436:13496   */\n      tag_331\n      jumpi\n        /* \"#utility.yul\":13492:13493   */\n      0x00\n        /* \"#utility.yul\":13489:13490   */\n      dup1\n        /* \"#utility.yul\":13482:13494   */\n      revert\n        /* \"#utility.yul\":13436:13496   */\n    tag_331:\n        /* \"#utility.yul\":13386:13502   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13508:13628   */\n    tag_184:\n        /* \"#utility.yul\":13580:13603   */\n      tag_333\n        /* \"#utility.yul\":13597:13602   */\n      dup2\n        /* \"#utility.yul\":13580:13603   */\n      tag_300\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":13573:13578   */\n      dup2\n        /* \"#utility.yul\":13570:13604   */\n      eq\n        /* \"#utility.yul\":13560:13622   */\n      tag_334\n      jumpi\n        /* \"#utility.yul\":13618:13619   */\n      0x00\n        /* \"#utility.yul\":13615:13616   */\n      dup1\n        /* \"#utility.yul\":13608:13620   */\n      revert\n        /* \"#utility.yul\":13560:13622   */\n    tag_334:\n        /* \"#utility.yul\":13508:13628   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13634:13756   */\n    tag_188:\n        /* \"#utility.yul\":13707:13731   */\n      tag_336\n        /* \"#utility.yul\":13725:13730   */\n      dup2\n        /* \"#utility.yul\":13707:13731   */\n      tag_269\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":13700:13705   */\n      dup2\n        /* \"#utility.yul\":13697:13732   */\n      eq\n        /* \"#utility.yul\":13687:13750   */\n      tag_337\n      jumpi\n        /* \"#utility.yul\":13746:13747   */\n      0x00\n        /* \"#utility.yul\":13743:13744   */\n      dup1\n        /* \"#utility.yul\":13736:13748   */\n      revert\n        /* \"#utility.yul\":13687:13750   */\n    tag_337:\n        /* \"#utility.yul\":13634:13756   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122053cb157847aea0b4d18989b71b79ced91622827c1222ee4bfd41f11c2a7c68c064736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061151b806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461016d57806395d89b411461019d578063a22cb465146101bb578063c87b56dd146101d7578063e985e9c5146102075761009e565b806301ffc9a7146100a357806306fdde03146100d3578063081812fc146100f1578063095ea7b3146101215780636352211e1461013d575b600080fd5b6100bd60048036038101906100b89190610ed0565b610237565b6040516100ca91906110af565b60405180910390f35b6100db610319565b6040516100e891906110ca565b60405180910390f35b61010b60048036038101906101069190610efd565b6103ab565b6040516101189190611094565b60405180910390f35b61013b60048036038101906101369190610e90565b6103f1565b005b61015760048036038101906101529190610efd565b610509565b6040516101649190611094565b60405180910390f35b61018760048036038101906101829190610de3565b610590565b604051610194919061118c565b60405180910390f35b6101a5610648565b6040516101b291906110ca565b60405180910390f35b6101d560048036038101906101d09190610e50565b6106da565b005b6101f160048036038101906101ec9190610efd565b6106f0565b6040516101fe91906110ca565b60405180910390f35b610221600480360381019061021c9190610e10565b610758565b60405161022e91906110af565b60405180910390f35b60007f591d4bc0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061030257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103125750610311826107ec565b5b9050919050565b60606065805461032890611275565b80601f016020809104026020016040519081016040528092919081815260200182805461035490611275565b80156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b5050505050905090565b60006103b682610856565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006103fc82610509565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561046d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104649061114c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661048c6108a1565b73ffffffffffffffffffffffffffffffffffffffff1614806104bb57506104ba816104b56108a1565b610758565b5b6104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f19061116c565b60405180910390fd5b61050483836108a9565b505050565b60008061051583610962565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e9061112c565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f89061110c565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606066805461065790611275565b80601f016020809104026020016040519081016040528092919081815260200182805461068390611275565b80156106d05780601f106106a5576101008083540402835291602001916106d0565b820191906000526020600020905b8154815290600101906020018083116106b357829003601f168201915b5050505050905090565b6106ec6106e56108a1565b838361099f565b5050565b60606106fb82610856565b6000610705610b0c565b905060008151116107255760405180602001604052806000815250610750565b8061072f84610b23565b604051602001610740929190611070565b6040516020818303038152906040525b915050919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61085f81610bfb565b61089e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108959061112c565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661091c83610509565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a05906110ec565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610aff91906110af565b60405180910390a3505050565b606060405180602001604052806000815250905090565b606060006001610b3284610c3c565b01905060008167ffffffffffffffff811115610b5157610b50611305565b5b6040519080825280601f01601f191660200182016040528015610b835781602001600182028036833780820191505090505b509050600082602001820190505b600115610bf0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610bda57610bd96112a7565b5b0494506000851415610beb57610bf0565b610b91565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16610c1d83610962565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610c9a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610c9057610c8f6112a7565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610cd7576d04ee2d6d415b85acef81000000008381610ccd57610ccc6112a7565b5b0492506020810190505b662386f26fc100008310610d0657662386f26fc100008381610cfc57610cfb6112a7565b5b0492506010810190505b6305f5e1008310610d2f576305f5e1008381610d2557610d246112a7565b5b0492506008810190505b6127108310610d54576127108381610d4a57610d496112a7565b5b0492506004810190505b60648310610d775760648381610d6d57610d6c6112a7565b5b0492506002810190505b600a8310610d86576001810190505b80915050919050565b600081359050610d9e81611489565b92915050565b600081359050610db3816114a0565b92915050565b600081359050610dc8816114b7565b92915050565b600081359050610ddd816114ce565b92915050565b600060208284031215610df957610df8611334565b5b6000610e0784828501610d8f565b91505092915050565b60008060408385031215610e2757610e26611334565b5b6000610e3585828601610d8f565b9250506020610e4685828601610d8f565b9150509250929050565b60008060408385031215610e6757610e66611334565b5b6000610e7585828601610d8f565b9250506020610e8685828601610da4565b9150509250929050565b60008060408385031215610ea757610ea6611334565b5b6000610eb585828601610d8f565b9250506020610ec685828601610dce565b9150509250929050565b600060208284031215610ee657610ee5611334565b5b6000610ef484828501610db9565b91505092915050565b600060208284031215610f1357610f12611334565b5b6000610f2184828501610dce565b91505092915050565b610f33816111ce565b82525050565b610f42816111e0565b82525050565b6000610f53826111a7565b610f5d81856111b2565b9350610f6d818560208601611242565b610f7681611339565b840191505092915050565b6000610f8c826111a7565b610f9681856111c3565b9350610fa6818560208601611242565b80840191505092915050565b6000610fbf6019836111b2565b9150610fca8261134a565b602082019050919050565b6000610fe26029836111b2565b9150610fed82611373565b604082019050919050565b60006110056018836111b2565b9150611010826113c2565b602082019050919050565b60006110286021836111b2565b9150611033826113eb565b604082019050919050565b600061104b603d836111b2565b91506110568261143a565b604082019050919050565b61106a81611238565b82525050565b600061107c8285610f81565b91506110888284610f81565b91508190509392505050565b60006020820190506110a96000830184610f2a565b92915050565b60006020820190506110c46000830184610f39565b92915050565b600060208201905081810360008301526110e48184610f48565b905092915050565b6000602082019050818103600083015261110581610fb2565b9050919050565b6000602082019050818103600083015261112581610fd5565b9050919050565b6000602082019050818103600083015261114581610ff8565b9050919050565b600060208201905081810360008301526111658161101b565b9050919050565b600060208201905081810360008301526111858161103e565b9050919050565b60006020820190506111a16000830184611061565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111d982611218565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611260578082015181840152602081019050611245565b8381111561126f576000848401525b50505050565b6000600282049050600182168061128d57607f821691505b602082108114156112a1576112a06112d6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b611492816111ce565b811461149d57600080fd5b50565b6114a9816111e0565b81146114b457600080fd5b50565b6114c0816111ec565b81146114cb57600080fd5b50565b6114d781611238565b81146114e257600080fd5b5056fea264697066735822122053cb157847aea0b4d18989b71b79ced91622827c1222ee4bfd41f11c2a7c68c064736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x151B DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x207 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDB PUSH2 0x319 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x106 SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x3AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x1094 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x136 SWAP2 SWAP1 PUSH2 0xE90 JUMP JUMPDEST PUSH2 0x3F1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x157 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x152 SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x509 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x1094 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0xDE3 JUMP JUMPDEST PUSH2 0x590 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x118C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH2 0x648 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0xE50 JUMP JUMPDEST PUSH2 0x6DA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x6F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21C SWAP2 SWAP1 PUSH2 0xE10 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22E SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x591D4BC000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x302 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x312 JUMPI POP PUSH2 0x311 DUP3 PUSH2 0x7EC JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x328 SWAP1 PUSH2 0x1275 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x354 SWAP1 PUSH2 0x1275 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3A1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x376 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3A1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x384 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B6 DUP3 PUSH2 0x856 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC DUP3 PUSH2 0x509 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x46D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x464 SWAP1 PUSH2 0x114C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x48C PUSH2 0x8A1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4BB JUMPI POP PUSH2 0x4BA DUP2 PUSH2 0x4B5 PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST JUMPDEST PUSH2 0x4FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F1 SWAP1 PUSH2 0x116C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x504 DUP4 DUP4 PUSH2 0x8A9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x515 DUP4 PUSH2 0x962 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x587 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57E SWAP1 PUSH2 0x112C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x601 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F8 SWAP1 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x68 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x657 SWAP1 PUSH2 0x1275 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x683 SWAP1 PUSH2 0x1275 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6D0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6A5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6D0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6B3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x6EC PUSH2 0x6E5 PUSH2 0x8A1 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x99F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6FB DUP3 PUSH2 0x856 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x705 PUSH2 0xB0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x725 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x750 JUMP JUMPDEST DUP1 PUSH2 0x72F DUP5 PUSH2 0xB23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x740 SWAP3 SWAP2 SWAP1 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x85F DUP2 PUSH2 0xBFB JUMP JUMPDEST PUSH2 0x89E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x895 SWAP1 PUSH2 0x112C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x91C DUP4 PUSH2 0x509 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA0E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6A PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xAFF SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0xB32 DUP5 PUSH2 0xC3C JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB51 JUMPI PUSH2 0xB50 PUSH2 0x1305 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB83 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0xBF0 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0xBDA JUMPI PUSH2 0xBD9 PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0xBEB JUMPI PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0xB91 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC1D DUP4 PUSH2 0x962 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0xC9A JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0xC90 JUMPI PUSH2 0xC8F PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xCD7 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0xCCD JUMPI PUSH2 0xCCC PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xD06 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0xCFC JUMPI PUSH2 0xCFB PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xD2F JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0xD25 JUMPI PUSH2 0xD24 PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xD54 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0xD4A JUMPI PUSH2 0xD49 PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xD77 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0xD6D JUMPI PUSH2 0xD6C PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xD86 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD9E DUP2 PUSH2 0x1489 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDB3 DUP2 PUSH2 0x14A0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC8 DUP2 PUSH2 0x14B7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDDD DUP2 PUSH2 0x14CE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDF9 JUMPI PUSH2 0xDF8 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE07 DUP5 DUP3 DUP6 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE27 JUMPI PUSH2 0xE26 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE35 DUP6 DUP3 DUP7 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xE46 DUP6 DUP3 DUP7 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE67 JUMPI PUSH2 0xE66 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE75 DUP6 DUP3 DUP7 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xE86 DUP6 DUP3 DUP7 ADD PUSH2 0xDA4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEA7 JUMPI PUSH2 0xEA6 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEB5 DUP6 DUP3 DUP7 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEC6 DUP6 DUP3 DUP7 ADD PUSH2 0xDCE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEE6 JUMPI PUSH2 0xEE5 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEF4 DUP5 DUP3 DUP6 ADD PUSH2 0xDB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF13 JUMPI PUSH2 0xF12 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF21 DUP5 DUP3 DUP6 ADD PUSH2 0xDCE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF33 DUP2 PUSH2 0x11CE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xF42 DUP2 PUSH2 0x11E0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF53 DUP3 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0xF5D DUP2 DUP6 PUSH2 0x11B2 JUMP JUMPDEST SWAP4 POP PUSH2 0xF6D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1242 JUMP JUMPDEST PUSH2 0xF76 DUP2 PUSH2 0x1339 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8C DUP3 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0xF96 DUP2 DUP6 PUSH2 0x11C3 JUMP JUMPDEST SWAP4 POP PUSH2 0xFA6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1242 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBF PUSH1 0x19 DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0xFCA DUP3 PUSH2 0x134A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE2 PUSH1 0x29 DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0xFED DUP3 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1005 PUSH1 0x18 DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1010 DUP3 PUSH2 0x13C2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1028 PUSH1 0x21 DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1033 DUP3 PUSH2 0x13EB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104B PUSH1 0x3D DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1056 DUP3 PUSH2 0x143A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x106A DUP2 PUSH2 0x1238 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x107C DUP3 DUP6 PUSH2 0xF81 JUMP JUMPDEST SWAP2 POP PUSH2 0x1088 DUP3 DUP5 PUSH2 0xF81 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10A9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF2A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10C4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF39 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10E4 DUP2 DUP5 PUSH2 0xF48 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1105 DUP2 PUSH2 0xFB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1125 DUP2 PUSH2 0xFD5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1145 DUP2 PUSH2 0xFF8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1165 DUP2 PUSH2 0x101B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1185 DUP2 PUSH2 0x103E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11A1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1061 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11D9 DUP3 PUSH2 0x1218 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1260 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1245 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x126F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x128D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x12A1 JUMPI PUSH2 0x12A0 PUSH2 0x12D6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1492 DUP2 PUSH2 0x11CE JUMP JUMPDEST DUP2 EQ PUSH2 0x149D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x14A9 DUP2 PUSH2 0x11E0 JUMP JUMPDEST DUP2 EQ PUSH2 0x14B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x14C0 DUP2 PUSH2 0x11EC JUMP JUMPDEST DUP2 EQ PUSH2 0x14CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x14D7 DUP2 PUSH2 0x1238 JUMP JUMPDEST DUP2 EQ PUSH2 0x14E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xCB ISZERO PUSH25 0x47AEA0B4D18989B71B79CED91622827C1222EE4BFD41F11C2A PUSH29 0x68C064736F6C6343000807003300000000000000000000000000000000 ",
							"sourceMap": "751:17130:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_approve_889": {
									"entryPoint": 2217,
									"id": 889,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_baseURI_402": {
									"entryPoint": 2828,
									"id": 402,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_exists_558": {
									"entryPoint": 3067,
									"id": 558,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_msgSender_1502": {
									"entryPoint": 2209,
									"id": 1502,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownerOf_540": {
									"entryPoint": 2402,
									"id": 540,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_requireMinted_935": {
									"entryPoint": 2134,
									"id": 935,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_setApprovalForAll_921": {
									"entryPoint": 2463,
									"id": 921,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_445": {
									"entryPoint": 1009,
									"id": 445,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_306": {
									"entryPoint": 1424,
									"id": 306,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_463": {
									"entryPoint": 939,
									"id": 463,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isApprovedForAll_498": {
									"entryPoint": 1880,
									"id": 498,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@log10_2450": {
									"entryPoint": 3132,
									"id": 2450,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_344": {
									"entryPoint": 793,
									"id": 344,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_334": {
									"entryPoint": 1289,
									"id": 334,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@setApprovalForAll_480": {
									"entryPoint": 1754,
									"id": 480,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_1730": {
									"entryPoint": 2028,
									"id": 1730,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_282": {
									"entryPoint": 567,
									"id": 282,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_354": {
									"entryPoint": 1608,
									"id": 354,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_1575": {
									"entryPoint": 2851,
									"id": 1575,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_393": {
									"entryPoint": 1776,
									"id": 393,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 3471,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool": {
									"entryPoint": 3492,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4": {
									"entryPoint": 3513,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 3534,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3555,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3600,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 3664,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3728,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 3792,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3837,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 3882,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 3897,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 3969,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4018,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4053,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4088,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4123,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4158,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 4193,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 4208,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 4244,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 4271,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4298,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4332,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4364,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4396,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4428,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4460,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 4492,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 4519,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 4530,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 4547,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 4558,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 4576,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 4588,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 4632,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 4664,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 4674,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 4725,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x12": {
									"entryPoint": 4775,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 4822,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 4869,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 4916,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 4921,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05": {
									"entryPoint": 4938,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159": {
									"entryPoint": 4979,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f": {
									"entryPoint": 5058,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942": {
									"entryPoint": 5099,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83": {
									"entryPoint": 5178,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 5257,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 5280,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes4": {
									"entryPoint": 5303,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 5326,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:13759:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:11"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:11",
														"type": ""
													}
												],
												"src": "7:139:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "201:84:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "211:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "233:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "220:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "220:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "211:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "273:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "249:23:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "249:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "249:30:11"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "179:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "187:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "195:5:11",
														"type": ""
													}
												],
												"src": "152:133:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "342:86:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "352:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "374:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "361:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "361:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "352:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "416:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "390:25:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "390:32:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "390:32:11"
														}
													]
												},
												"name": "abi_decode_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "320:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "328:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "336:5:11",
														"type": ""
													}
												],
												"src": "291:137:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "486:87:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "496:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "518:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "505:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "505:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "496:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "561:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "534:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "534:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "534:33:11"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "464:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "472:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "480:5:11",
														"type": ""
													}
												],
												"src": "434:139:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "645:263:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "691:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "693:77:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "693:79:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "693:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "666:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "675:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "662:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "662:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "687:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "658:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "658:32:11"
															},
															"nodeType": "YulIf",
															"src": "655:119:11"
														},
														{
															"nodeType": "YulBlock",
															"src": "784:117:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "799:15:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "813:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "803:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "828:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "863:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "874:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "859:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "859:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "883:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "838:20:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "838:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "828:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "615:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "626:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "638:6:11",
														"type": ""
													}
												],
												"src": "579:329:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "997:391:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1043:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1045:77:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1045:79:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1045:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1018:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1014:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1014:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1039:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1010:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:11"
															},
															"nodeType": "YulIf",
															"src": "1007:119:11"
														},
														{
															"nodeType": "YulBlock",
															"src": "1136:117:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1151:15:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1165:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1155:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1180:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1215:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1226:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1211:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1211:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1235:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1190:20:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1190:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1180:6:11"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1263:118:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1278:16:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1292:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1282:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1308:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1343:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1354:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1339:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1339:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1363:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1318:20:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1318:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1308:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "959:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "970:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "982:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "990:6:11",
														"type": ""
													}
												],
												"src": "914:474:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1474:388:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1520:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1522:77:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1522:79:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1522:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1495:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1504:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1491:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1491:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1516:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1487:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1487:32:11"
															},
															"nodeType": "YulIf",
															"src": "1484:119:11"
														},
														{
															"nodeType": "YulBlock",
															"src": "1613:117:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1628:15:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1642:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1632:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1657:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1692:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1703:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1688:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1688:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1712:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1667:20:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1667:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1657:6:11"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1740:115:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1755:16:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1769:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1759:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1785:60:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1817:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1828:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1813:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1813:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1837:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "1795:17:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1795:50:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1785:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1436:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1447:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1459:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1467:6:11",
														"type": ""
													}
												],
												"src": "1394:468:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1951:391:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1997:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1999:77:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1999:79:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1999:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1972:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1981:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1968:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1968:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1993:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1964:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1964:32:11"
															},
															"nodeType": "YulIf",
															"src": "1961:119:11"
														},
														{
															"nodeType": "YulBlock",
															"src": "2090:117:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2105:15:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2119:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2109:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2134:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2169:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2180:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2165:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2165:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2189:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2144:20:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2144:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2134:6:11"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2217:118:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2232:16:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2246:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2236:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2262:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2297:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2308:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2293:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2293:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2317:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2272:20:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2272:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2262:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1913:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1924:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1936:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1944:6:11",
														"type": ""
													}
												],
												"src": "1868:474:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2413:262:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2459:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2461:77:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2461:79:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2461:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2434:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2443:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2430:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2430:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2455:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2426:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2426:32:11"
															},
															"nodeType": "YulIf",
															"src": "2423:119:11"
														},
														{
															"nodeType": "YulBlock",
															"src": "2552:116:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2567:15:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2581:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2571:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2596:62:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2630:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2641:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2626:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2626:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2650:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "2606:19:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2606:52:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2596:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2383:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2394:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2406:6:11",
														"type": ""
													}
												],
												"src": "2348:327:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2747:263:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2793:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2795:77:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2795:79:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2795:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2768:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2777:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2764:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2764:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2789:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2760:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2760:32:11"
															},
															"nodeType": "YulIf",
															"src": "2757:119:11"
														},
														{
															"nodeType": "YulBlock",
															"src": "2886:117:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2901:15:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2915:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2905:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2930:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2965:9:11"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2976:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2961:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2961:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2985:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2940:20:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2940:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2930:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2717:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2728:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2740:6:11",
														"type": ""
													}
												],
												"src": "2681:329:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3081:53:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3098:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3121:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3103:17:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3103:24:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3091:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3091:37:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3091:37:11"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3069:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3076:3:11",
														"type": ""
													}
												],
												"src": "3016:118:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3199:50:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3216:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3236:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3221:14:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3221:21:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3209:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3209:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3209:34:11"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3187:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3194:3:11",
														"type": ""
													}
												],
												"src": "3140:109:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3347:272:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3357:53:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3404:5:11"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "3371:32:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3371:39:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3361:6:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3419:78:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3485:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3490:6:11"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3426:58:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3426:71:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3419:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3532:5:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3539:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3528:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3528:16:11"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3546:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3551:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3506:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3506:52:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3506:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3567:46:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3578:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3605:6:11"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "3583:21:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3583:29:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3574:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3574:39:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3567:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3328:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3335:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3343:3:11",
														"type": ""
													}
												],
												"src": "3255:364:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3735:267:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3745:53:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3792:5:11"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "3759:32:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3759:39:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3749:6:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3807:96:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3891:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3896:6:11"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3814:76:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3814:89:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3807:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3938:5:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3945:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3934:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3934:16:11"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3952:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3957:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3912:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3912:52:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3912:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3973:23:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3984:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3989:6:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3980:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3980:16:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3973:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3716:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3723:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3731:3:11",
														"type": ""
													}
												],
												"src": "3625:377:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4154:220:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4164:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4230:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4235:2:11",
																		"type": "",
																		"value": "25"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4171:58:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4171:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4164:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4336:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																	"nodeType": "YulIdentifier",
																	"src": "4247:88:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4247:93:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4247:93:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4349:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4360:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4365:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4356:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4356:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4349:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4142:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4150:3:11",
														"type": ""
													}
												],
												"src": "4008:366:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4526:220:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4536:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4602:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4607:2:11",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4543:58:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4543:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4536:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4708:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																	"nodeType": "YulIdentifier",
																	"src": "4619:88:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4619:93:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4619:93:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4721:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4732:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4737:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4728:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4728:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4721:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4514:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4522:3:11",
														"type": ""
													}
												],
												"src": "4380:366:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4898:220:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4908:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4974:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4979:2:11",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4915:58:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4915:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4908:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5080:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																	"nodeType": "YulIdentifier",
																	"src": "4991:88:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:93:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4991:93:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5093:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5104:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5109:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5100:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5100:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5093:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4886:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4894:3:11",
														"type": ""
													}
												],
												"src": "4752:366:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5270:220:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5280:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5346:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5351:2:11",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5287:58:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5287:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5280:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5452:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																	"nodeType": "YulIdentifier",
																	"src": "5363:88:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5363:93:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5363:93:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5465:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5476:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5481:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5472:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5472:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5465:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5258:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5266:3:11",
														"type": ""
													}
												],
												"src": "5124:366:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5642:220:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5652:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5718:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5723:2:11",
																		"type": "",
																		"value": "61"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5659:58:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5659:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5652:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5824:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																	"nodeType": "YulIdentifier",
																	"src": "5735:88:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5735:93:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5735:93:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5837:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5848:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5853:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5844:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5844:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5837:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5630:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5638:3:11",
														"type": ""
													}
												],
												"src": "5496:366:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5933:53:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5950:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5973:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5955:17:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5955:24:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5943:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5943:37:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5943:37:11"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5921:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5928:3:11",
														"type": ""
													}
												],
												"src": "5868:118:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6176:251:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6187:102:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6276:6:11"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6285:3:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6194:81:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6194:95:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6187:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6299:102:11",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6388:6:11"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6397:3:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6306:81:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6306:95:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6299:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6411:10:11",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "6418:3:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6411:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6147:3:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6153:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6161:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6172:3:11",
														"type": ""
													}
												],
												"src": "5992:435:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6531:124:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6541:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6553:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6564:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6549:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6549:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6541:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6621:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6634:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6645:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6630:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6630:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6577:43:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6577:71:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6577:71:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6503:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6515:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6526:4:11",
														"type": ""
													}
												],
												"src": "6433:222:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6753:118:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6763:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6775:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6786:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6771:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6771:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6763:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6837:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6850:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6861:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6846:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6846:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6799:37:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6799:65:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6799:65:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6725:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6737:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6748:4:11",
														"type": ""
													}
												],
												"src": "6661:210:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6995:195:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7005:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7017:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7028:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7013:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7013:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7005:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7052:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7063:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7048:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7048:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7071:4:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7077:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7067:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7067:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7041:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7041:47:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7041:47:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7097:86:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7169:6:11"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7178:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7105:63:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7105:78:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7097:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6967:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6979:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6990:4:11",
														"type": ""
													}
												],
												"src": "6877:313:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7367:248:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7377:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7389:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7400:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7385:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7385:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7377:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7424:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7435:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7420:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7420:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7443:4:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7449:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7439:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7439:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7413:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7413:47:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7413:47:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7469:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7603:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7477:124:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7477:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7469:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7347:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7362:4:11",
														"type": ""
													}
												],
												"src": "7196:419:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7792:248:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7802:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7814:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7825:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7810:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7810:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7802:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7849:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7860:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7845:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7845:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7868:4:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7874:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7864:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7864:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7838:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7838:47:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7838:47:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7894:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8028:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7902:124:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7902:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7894:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7772:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7787:4:11",
														"type": ""
													}
												],
												"src": "7621:419:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8217:248:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8227:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8239:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8250:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8235:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8235:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8227:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8274:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8285:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8270:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8270:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8293:4:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8299:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8289:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8289:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8263:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8263:47:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8263:47:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8319:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8453:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8327:124:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8327:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8319:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8197:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8212:4:11",
														"type": ""
													}
												],
												"src": "8046:419:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8642:248:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8652:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8664:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8675:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8660:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8660:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8652:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8699:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8710:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8695:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8695:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8718:4:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8724:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8714:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8714:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8688:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8688:47:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8688:47:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8744:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8878:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8752:124:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8752:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8744:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8622:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8637:4:11",
														"type": ""
													}
												],
												"src": "8471:419:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9067:248:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9077:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9089:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9100:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9085:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9085:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9077:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9124:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9135:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9120:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9120:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9143:4:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9149:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9139:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9139:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9113:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9113:47:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9113:47:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9169:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9303:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9177:124:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9177:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9169:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9047:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9062:4:11",
														"type": ""
													}
												],
												"src": "8896:419:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9419:124:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9429:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9441:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9452:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9437:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9437:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9429:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9509:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9522:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9533:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9518:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9518:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9465:43:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9465:71:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9465:71:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9391:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9403:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9414:4:11",
														"type": ""
													}
												],
												"src": "9321:222:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9589:35:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9599:19:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9615:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9609:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9609:9:11"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "9599:6:11"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9582:6:11",
														"type": ""
													}
												],
												"src": "9549:75:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9689:40:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9700:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9716:5:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9710:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9710:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "9700:6:11"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9672:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9682:6:11",
														"type": ""
													}
												],
												"src": "9630:99:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9831:73:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9848:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9853:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9841:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9841:19:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9841:19:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9869:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9888:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9893:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9884:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9884:14:11"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "9869:11:11"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9803:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9808:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "9819:11:11",
														"type": ""
													}
												],
												"src": "9735:169:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10024:34:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10034:18:11",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "10049:3:11"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "10034:11:11"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9996:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10001:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "10012:11:11",
														"type": ""
													}
												],
												"src": "9910:148:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10109:51:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10119:35:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10148:5:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "10130:17:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10130:24:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10119:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10091:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10101:7:11",
														"type": ""
													}
												],
												"src": "10064:96:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10208:48:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10218:32:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10243:5:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "10236:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10236:13:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10229:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10229:21:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10218:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10190:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10200:7:11",
														"type": ""
													}
												],
												"src": "10166:90:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10306:105:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10316:89:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10331:5:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10338:66:11",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10327:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10327:78:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10316:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10288:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10298:7:11",
														"type": ""
													}
												],
												"src": "10262:149:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10462:81:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10472:65:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10487:5:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10494:42:11",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10483:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10483:54:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10472:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10444:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10454:7:11",
														"type": ""
													}
												],
												"src": "10417:126:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10594:32:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10604:16:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10615:5:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "10604:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10576:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "10586:7:11",
														"type": ""
													}
												],
												"src": "10549:77:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10681:258:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10691:10:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10700:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "10695:1:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10760:63:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "10785:3:11"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "10790:1:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "10781:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10781:11:11"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "10804:3:11"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "10809:1:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "10800:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "10800:11:11"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "10794:5:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10794:18:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10774:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10774:39:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10774:39:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10721:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10724:6:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10718:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10718:13:11"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "10732:19:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10734:15:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "10743:1:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10746:2:11",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "10739:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10739:10:11"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "10734:1:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "10714:3:11",
																"statements": []
															},
															"src": "10710:113:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10857:76:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "10907:3:11"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "10912:6:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "10903:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10903:16:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10921:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10896:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10896:27:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10896:27:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10838:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10841:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10835:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10835:13:11"
															},
															"nodeType": "YulIf",
															"src": "10832:101:11"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "10663:3:11",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "10668:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10673:6:11",
														"type": ""
													}
												],
												"src": "10632:307:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10996:269:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11006:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "11020:4:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11026:1:11",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "11016:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11016:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "11006:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11037:38:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "11067:4:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11073:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "11063:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11063:12:11"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "11041:18:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11114:51:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11128:27:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "11142:6:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11150:4:11",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "11138:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11138:17:11"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11128:6:11"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "11094:18:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11087:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11087:26:11"
															},
															"nodeType": "YulIf",
															"src": "11084:81:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11217:42:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "11231:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11231:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11231:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "11181:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11204:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11212:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "11201:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11201:14:11"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "11178:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11178:38:11"
															},
															"nodeType": "YulIf",
															"src": "11175:84:11"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "10980:4:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10989:6:11",
														"type": ""
													}
												],
												"src": "10945:320:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11299:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11316:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11319:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11309:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11309:88:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11309:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11413:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11416:4:11",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11406:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11406:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11406:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11437:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11440:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11430:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11430:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11430:15:11"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "11271:180:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11485:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11502:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11505:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11495:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11495:88:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11495:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11599:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11602:4:11",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11592:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11592:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11592:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11623:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11626:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11616:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11616:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11616:15:11"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "11457:180:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11671:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11688:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11691:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11681:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11681:88:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11681:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11785:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11788:4:11",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11778:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11778:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11778:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11809:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11812:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11802:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11802:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11802:15:11"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "11643:180:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11918:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11935:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11938:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11928:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11928:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11928:12:11"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "11829:117:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12041:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12058:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12061:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12051:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12051:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12051:12:11"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "11952:117:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12123:54:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12133:38:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12151:5:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12158:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12147:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12147:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12167:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "12163:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12163:7:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12143:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12143:28:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12133:6:11"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12106:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "12116:6:11",
														"type": ""
													}
												],
												"src": "12075:102:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12289:69:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12311:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12319:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12307:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12307:14:11"
																	},
																	{
																		"hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12323:27:11",
																		"type": "",
																		"value": "ERC721: approve to caller"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12300:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12300:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12300:51:11"
														}
													]
												},
												"name": "store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12281:6:11",
														"type": ""
													}
												],
												"src": "12183:175:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12470:122:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12492:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12500:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12488:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12488:14:11"
																	},
																	{
																		"hexValue": "4552433732313a2061646472657373207a65726f206973206e6f742061207661",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12504:34:11",
																		"type": "",
																		"value": "ERC721: address zero is not a va"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12481:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12481:58:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12481:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12560:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12568:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12556:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12556:15:11"
																	},
																	{
																		"hexValue": "6c6964206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12573:11:11",
																		"type": "",
																		"value": "lid owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12549:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12549:36:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12549:36:11"
														}
													]
												},
												"name": "store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12462:6:11",
														"type": ""
													}
												],
												"src": "12364:228:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12704:68:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12726:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12734:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12722:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12722:14:11"
																	},
																	{
																		"hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12738:26:11",
																		"type": "",
																		"value": "ERC721: invalid token ID"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12715:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12715:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12715:50:11"
														}
													]
												},
												"name": "store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12696:6:11",
														"type": ""
													}
												],
												"src": "12598:174:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12884:114:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12906:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12914:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12902:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12902:14:11"
																	},
																	{
																		"hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12918:34:11",
																		"type": "",
																		"value": "ERC721: approval to current owne"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12895:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12895:58:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12895:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12974:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12982:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12970:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12970:15:11"
																	},
																	{
																		"hexValue": "72",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12987:3:11",
																		"type": "",
																		"value": "r"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12963:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12963:28:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12963:28:11"
														}
													]
												},
												"name": "store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12876:6:11",
														"type": ""
													}
												],
												"src": "12778:220:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13110:142:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13132:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13140:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13128:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13128:14:11"
																	},
																	{
																		"hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13144:34:11",
																		"type": "",
																		"value": "ERC721: approve caller is not to"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13121:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13121:58:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13121:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13200:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13208:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13196:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13196:15:11"
																	},
																	{
																		"hexValue": "6b656e206f776e6572206f7220617070726f76656420666f7220616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13213:31:11",
																		"type": "",
																		"value": "ken owner or approved for all"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13189:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13189:56:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13189:56:11"
														}
													]
												},
												"name": "store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13102:6:11",
														"type": ""
													}
												],
												"src": "13004:248:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13301:79:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13358:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13367:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13370:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13360:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13360:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13360:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13324:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13349:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "13331:17:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13331:24:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13321:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13321:35:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13314:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13314:43:11"
															},
															"nodeType": "YulIf",
															"src": "13311:63:11"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13294:5:11",
														"type": ""
													}
												],
												"src": "13258:122:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13426:76:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13480:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13489:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13492:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13482:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13482:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13482:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13449:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13471:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "13456:14:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13456:21:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13446:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13446:32:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13439:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13439:40:11"
															},
															"nodeType": "YulIf",
															"src": "13436:60:11"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13419:5:11",
														"type": ""
													}
												],
												"src": "13386:116:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13550:78:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13606:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13615:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13618:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13608:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13608:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13608:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13573:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13597:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes4",
																					"nodeType": "YulIdentifier",
																					"src": "13580:16:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13580:23:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13570:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13570:34:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13563:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13563:42:11"
															},
															"nodeType": "YulIf",
															"src": "13560:62:11"
														}
													]
												},
												"name": "validator_revert_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13543:5:11",
														"type": ""
													}
												],
												"src": "13508:120:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13677:79:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13734:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13743:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13746:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13736:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13736:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13736:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13700:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13725:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "13707:17:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13707:24:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13697:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13697:35:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13690:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13690:43:11"
															},
															"nodeType": "YulIf",
															"src": "13687:63:11"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13670:5:11",
														"type": ""
													}
												],
												"src": "13634:122:11"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461016d57806395d89b411461019d578063a22cb465146101bb578063c87b56dd146101d7578063e985e9c5146102075761009e565b806301ffc9a7146100a357806306fdde03146100d3578063081812fc146100f1578063095ea7b3146101215780636352211e1461013d575b600080fd5b6100bd60048036038101906100b89190610ed0565b610237565b6040516100ca91906110af565b60405180910390f35b6100db610319565b6040516100e891906110ca565b60405180910390f35b61010b60048036038101906101069190610efd565b6103ab565b6040516101189190611094565b60405180910390f35b61013b60048036038101906101369190610e90565b6103f1565b005b61015760048036038101906101529190610efd565b610509565b6040516101649190611094565b60405180910390f35b61018760048036038101906101829190610de3565b610590565b604051610194919061118c565b60405180910390f35b6101a5610648565b6040516101b291906110ca565b60405180910390f35b6101d560048036038101906101d09190610e50565b6106da565b005b6101f160048036038101906101ec9190610efd565b6106f0565b6040516101fe91906110ca565b60405180910390f35b610221600480360381019061021c9190610e10565b610758565b60405161022e91906110af565b60405180910390f35b60007f591d4bc0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061030257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103125750610311826107ec565b5b9050919050565b60606065805461032890611275565b80601f016020809104026020016040519081016040528092919081815260200182805461035490611275565b80156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b5050505050905090565b60006103b682610856565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006103fc82610509565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561046d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104649061114c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661048c6108a1565b73ffffffffffffffffffffffffffffffffffffffff1614806104bb57506104ba816104b56108a1565b610758565b5b6104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f19061116c565b60405180910390fd5b61050483836108a9565b505050565b60008061051583610962565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e9061112c565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f89061110c565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606066805461065790611275565b80601f016020809104026020016040519081016040528092919081815260200182805461068390611275565b80156106d05780601f106106a5576101008083540402835291602001916106d0565b820191906000526020600020905b8154815290600101906020018083116106b357829003601f168201915b5050505050905090565b6106ec6106e56108a1565b838361099f565b5050565b60606106fb82610856565b6000610705610b0c565b905060008151116107255760405180602001604052806000815250610750565b8061072f84610b23565b604051602001610740929190611070565b6040516020818303038152906040525b915050919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61085f81610bfb565b61089e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108959061112c565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661091c83610509565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a05906110ec565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610aff91906110af565b60405180910390a3505050565b606060405180602001604052806000815250905090565b606060006001610b3284610c3c565b01905060008167ffffffffffffffff811115610b5157610b50611305565b5b6040519080825280601f01601f191660200182016040528015610b835781602001600182028036833780820191505090505b509050600082602001820190505b600115610bf0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610bda57610bd96112a7565b5b0494506000851415610beb57610bf0565b610b91565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16610c1d83610962565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610c9a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610c9057610c8f6112a7565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610cd7576d04ee2d6d415b85acef81000000008381610ccd57610ccc6112a7565b5b0492506020810190505b662386f26fc100008310610d0657662386f26fc100008381610cfc57610cfb6112a7565b5b0492506010810190505b6305f5e1008310610d2f576305f5e1008381610d2557610d246112a7565b5b0492506008810190505b6127108310610d54576127108381610d4a57610d496112a7565b5b0492506004810190505b60648310610d775760648381610d6d57610d6c6112a7565b5b0492506002810190505b600a8310610d86576001810190505b80915050919050565b600081359050610d9e81611489565b92915050565b600081359050610db3816114a0565b92915050565b600081359050610dc8816114b7565b92915050565b600081359050610ddd816114ce565b92915050565b600060208284031215610df957610df8611334565b5b6000610e0784828501610d8f565b91505092915050565b60008060408385031215610e2757610e26611334565b5b6000610e3585828601610d8f565b9250506020610e4685828601610d8f565b9150509250929050565b60008060408385031215610e6757610e66611334565b5b6000610e7585828601610d8f565b9250506020610e8685828601610da4565b9150509250929050565b60008060408385031215610ea757610ea6611334565b5b6000610eb585828601610d8f565b9250506020610ec685828601610dce565b9150509250929050565b600060208284031215610ee657610ee5611334565b5b6000610ef484828501610db9565b91505092915050565b600060208284031215610f1357610f12611334565b5b6000610f2184828501610dce565b91505092915050565b610f33816111ce565b82525050565b610f42816111e0565b82525050565b6000610f53826111a7565b610f5d81856111b2565b9350610f6d818560208601611242565b610f7681611339565b840191505092915050565b6000610f8c826111a7565b610f9681856111c3565b9350610fa6818560208601611242565b80840191505092915050565b6000610fbf6019836111b2565b9150610fca8261134a565b602082019050919050565b6000610fe26029836111b2565b9150610fed82611373565b604082019050919050565b60006110056018836111b2565b9150611010826113c2565b602082019050919050565b60006110286021836111b2565b9150611033826113eb565b604082019050919050565b600061104b603d836111b2565b91506110568261143a565b604082019050919050565b61106a81611238565b82525050565b600061107c8285610f81565b91506110888284610f81565b91508190509392505050565b60006020820190506110a96000830184610f2a565b92915050565b60006020820190506110c46000830184610f39565b92915050565b600060208201905081810360008301526110e48184610f48565b905092915050565b6000602082019050818103600083015261110581610fb2565b9050919050565b6000602082019050818103600083015261112581610fd5565b9050919050565b6000602082019050818103600083015261114581610ff8565b9050919050565b600060208201905081810360008301526111658161101b565b9050919050565b600060208201905081810360008301526111858161103e565b9050919050565b60006020820190506111a16000830184611061565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111d982611218565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611260578082015181840152602081019050611245565b8381111561126f576000848401525b50505050565b6000600282049050600182168061128d57607f821691505b602082108114156112a1576112a06112d6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b611492816111ce565b811461149d57600080fd5b50565b6114a9816111e0565b81146114b457600080fd5b50565b6114c0816111ec565b81146114cb57600080fd5b50565b6114d781611238565b81146114e257600080fd5b5056fea264697066735822122053cb157847aea0b4d18989b71b79ced91622827c1222ee4bfd41f11c2a7c68c064736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x207 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDB PUSH2 0x319 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x106 SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x3AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x1094 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x136 SWAP2 SWAP1 PUSH2 0xE90 JUMP JUMPDEST PUSH2 0x3F1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x157 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x152 SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x509 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x1094 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0xDE3 JUMP JUMPDEST PUSH2 0x590 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x118C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH2 0x648 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0xE50 JUMP JUMPDEST PUSH2 0x6DA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x6F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21C SWAP2 SWAP1 PUSH2 0xE10 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22E SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x591D4BC000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x302 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x312 JUMPI POP PUSH2 0x311 DUP3 PUSH2 0x7EC JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x65 DUP1 SLOAD PUSH2 0x328 SWAP1 PUSH2 0x1275 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x354 SWAP1 PUSH2 0x1275 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3A1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x376 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3A1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x384 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B6 DUP3 PUSH2 0x856 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC DUP3 PUSH2 0x509 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x46D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x464 SWAP1 PUSH2 0x114C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x48C PUSH2 0x8A1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4BB JUMPI POP PUSH2 0x4BA DUP2 PUSH2 0x4B5 PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST JUMPDEST PUSH2 0x4FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F1 SWAP1 PUSH2 0x116C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x504 DUP4 DUP4 PUSH2 0x8A9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x515 DUP4 PUSH2 0x962 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x587 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57E SWAP1 PUSH2 0x112C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x601 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F8 SWAP1 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x68 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x66 DUP1 SLOAD PUSH2 0x657 SWAP1 PUSH2 0x1275 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x683 SWAP1 PUSH2 0x1275 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6D0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6A5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6D0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6B3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x6EC PUSH2 0x6E5 PUSH2 0x8A1 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x99F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6FB DUP3 PUSH2 0x856 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x705 PUSH2 0xB0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x725 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x750 JUMP JUMPDEST DUP1 PUSH2 0x72F DUP5 PUSH2 0xB23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x740 SWAP3 SWAP2 SWAP1 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x85F DUP2 PUSH2 0xBFB JUMP JUMPDEST PUSH2 0x89E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x895 SWAP1 PUSH2 0x112C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x69 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x91C DUP4 PUSH2 0x509 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA0E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6A PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xAFF SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0xB32 DUP5 PUSH2 0xC3C JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB51 JUMPI PUSH2 0xB50 PUSH2 0x1305 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB83 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0xBF0 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0xBDA JUMPI PUSH2 0xBD9 PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0xBEB JUMPI PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0xB91 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC1D DUP4 PUSH2 0x962 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0xC9A JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0xC90 JUMPI PUSH2 0xC8F PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xCD7 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0xCCD JUMPI PUSH2 0xCCC PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xD06 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0xCFC JUMPI PUSH2 0xCFB PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xD2F JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0xD25 JUMPI PUSH2 0xD24 PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xD54 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0xD4A JUMPI PUSH2 0xD49 PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xD77 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0xD6D JUMPI PUSH2 0xD6C PUSH2 0x12A7 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xD86 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD9E DUP2 PUSH2 0x1489 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDB3 DUP2 PUSH2 0x14A0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC8 DUP2 PUSH2 0x14B7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDDD DUP2 PUSH2 0x14CE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDF9 JUMPI PUSH2 0xDF8 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE07 DUP5 DUP3 DUP6 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE27 JUMPI PUSH2 0xE26 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE35 DUP6 DUP3 DUP7 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xE46 DUP6 DUP3 DUP7 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE67 JUMPI PUSH2 0xE66 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE75 DUP6 DUP3 DUP7 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xE86 DUP6 DUP3 DUP7 ADD PUSH2 0xDA4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEA7 JUMPI PUSH2 0xEA6 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEB5 DUP6 DUP3 DUP7 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEC6 DUP6 DUP3 DUP7 ADD PUSH2 0xDCE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEE6 JUMPI PUSH2 0xEE5 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEF4 DUP5 DUP3 DUP6 ADD PUSH2 0xDB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF13 JUMPI PUSH2 0xF12 PUSH2 0x1334 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF21 DUP5 DUP3 DUP6 ADD PUSH2 0xDCE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF33 DUP2 PUSH2 0x11CE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xF42 DUP2 PUSH2 0x11E0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF53 DUP3 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0xF5D DUP2 DUP6 PUSH2 0x11B2 JUMP JUMPDEST SWAP4 POP PUSH2 0xF6D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1242 JUMP JUMPDEST PUSH2 0xF76 DUP2 PUSH2 0x1339 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8C DUP3 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0xF96 DUP2 DUP6 PUSH2 0x11C3 JUMP JUMPDEST SWAP4 POP PUSH2 0xFA6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1242 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBF PUSH1 0x19 DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0xFCA DUP3 PUSH2 0x134A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE2 PUSH1 0x29 DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0xFED DUP3 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1005 PUSH1 0x18 DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1010 DUP3 PUSH2 0x13C2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1028 PUSH1 0x21 DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1033 DUP3 PUSH2 0x13EB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104B PUSH1 0x3D DUP4 PUSH2 0x11B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1056 DUP3 PUSH2 0x143A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x106A DUP2 PUSH2 0x1238 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x107C DUP3 DUP6 PUSH2 0xF81 JUMP JUMPDEST SWAP2 POP PUSH2 0x1088 DUP3 DUP5 PUSH2 0xF81 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10A9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF2A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10C4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF39 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10E4 DUP2 DUP5 PUSH2 0xF48 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1105 DUP2 PUSH2 0xFB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1125 DUP2 PUSH2 0xFD5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1145 DUP2 PUSH2 0xFF8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1165 DUP2 PUSH2 0x101B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1185 DUP2 PUSH2 0x103E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11A1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1061 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11D9 DUP3 PUSH2 0x1218 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1260 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1245 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x126F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x128D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x12A1 JUMPI PUSH2 0x12A0 PUSH2 0x12D6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1492 DUP2 PUSH2 0x11CE JUMP JUMPDEST DUP2 EQ PUSH2 0x149D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x14A9 DUP2 PUSH2 0x11E0 JUMP JUMPDEST DUP2 EQ PUSH2 0x14B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x14C0 DUP2 PUSH2 0x11EC JUMP JUMPDEST DUP2 EQ PUSH2 0x14CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x14D7 DUP2 PUSH2 0x1238 JUMP JUMPDEST DUP2 EQ PUSH2 0x14E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xCB ISZERO PUSH25 0x47AEA0B4D18989B71B79CED91622827C1222EE4BFD41F11C2A PUSH29 0x68C064736F6C6343000807003300000000000000000000000000000000 ",
							"sourceMap": "751:17130:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1987:344;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2932:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4407:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3929:417;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2651:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2390:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3094:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4641:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3262:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4860:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1987:344;2111:4;2161:36;2146:51;;;:11;:51;;;;:126;;;;2228:44;2213:59;;;:11;:59;;;;2146:126;:178;;;;2288:36;2312:11;2288:23;:36::i;:::-;2146:178;2127:197;;1987:344;;;:::o;2932:98::-;2986:13;3018:5;3011:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2932:98;:::o;4407:167::-;4483:7;4502:23;4517:7;4502:14;:23::i;:::-;4543:15;:24;4559:7;4543:24;;;;;;;;;;;;;;;;;;;;;4536:31;;4407:167;;;:::o;3929:417::-;4009:13;4025:34;4051:7;4025:25;:34::i;:::-;4009:50;;4083:5;4077:11;;:2;:11;;;;4069:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;4174:5;4158:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;4183:37;4200:5;4207:12;:10;:12::i;:::-;4183:16;:37::i;:::-;4158:62;4137:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;4318:21;4327:2;4331:7;4318:8;:21::i;:::-;3999:347;3929:417;;:::o;2651:219::-;2723:7;2742:13;2758:17;2767:7;2758:8;:17::i;:::-;2742:33;;2810:1;2793:19;;:5;:19;;;;2785:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2858:5;2851:12;;;2651:219;;;:::o;2390:204::-;2462:7;2506:1;2489:19;;:5;:19;;;;2481:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2571:9;:16;2581:5;2571:16;;;;;;;;;;;;;;;;2564:23;;2390:204;;;:::o;3094:102::-;3150:13;3182:7;3175:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3094:102;:::o;4641:153::-;4735:52;4754:12;:10;:12::i;:::-;4768:8;4778;4735:18;:52::i;:::-;4641:153;;:::o;3262:276::-;3335:13;3360:23;3375:7;3360:14;:23::i;:::-;3394:21;3418:10;:8;:10::i;:::-;3394:34;;3469:1;3451:7;3445:21;:25;:86;;;;;;;;;;;;;;;;;3497:7;3506:18;:7;:16;:18::i;:::-;3480:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3445:86;3438:93;;;3262:276;;;:::o;4860:162::-;4957:4;4980:18;:25;4999:5;4980:25;;;;;;;;;;;;;;;:35;5006:8;4980:35;;;;;;;;;;;;;;;;;;;;;;;;;4973:42;;4860:162;;;;:::o;1060:166:8:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;14079:133:1:-;14160:16;14168:7;14160;:16::i;:::-;14152:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;14079:133;:::o;850:96:6:-;903:7;929:10;922:17;;850:96;:::o;13370:182:1:-;13471:2;13444:15;:24;13460:7;13444:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;13537:7;13533:2;13488:57;;13497:34;13523:7;13497:25;:34::i;:::-;13488:57;;;;;;;;;;;;13370:182;;:::o;7385:115::-;7451:7;7477;:16;7485:7;7477:16;;;;;;;;;;;;;;;;;;;;;7470:23;;7385:115;;;:::o;13688:307::-;13838:8;13829:17;;:5;:17;;;;13821:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13924:8;13886:18;:25;13905:5;13886:25;;;;;;;;;;;;;;;:35;13912:8;13886:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13969:8;13947:41;;13962:5;13947:41;;;13979:8;13947:41;;;;;;:::i;:::-;;;;;;;;13688:307;;;:::o;3780:92::-;3831:13;3856:9;;;;;;;;;;;;;;3780:92;:::o;437:707:7:-;493:13;542:14;590:1;559:28;581:5;559:21;:28::i;:::-;:32;542:49;;605:20;639:6;628:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;605:41;;660:11;786:6;782:2;778:15;770:6;766:28;759:35;;821:280;828:4;821:280;;;852:5;;;;;;;;991:8;986:2;979:5;975:14;970:30;965:3;957:44;1045:2;1036:11;;;;;;:::i;:::-;;;;;1078:1;1069:5;:10;1065:21;;;1081:5;;1065:21;821:280;;;1121:6;1114:13;;;;;437:707;;;:::o;7803:126:1:-;7868:4;7920:1;7891:31;;:17;7900:7;7891:8;:17::i;:::-;:31;;;;7884:38;;7803:126;;;:::o;9900:890:10:-;9953:7;9972:14;9989:1;9972:18;;10037:6;10028:5;:15;10024:99;;10072:6;10063:15;;;;;;:::i;:::-;;;;;10106:2;10096:12;;;;10024:99;10149:6;10140:5;:15;10136:99;;10184:6;10175:15;;;;;;:::i;:::-;;;;;10218:2;10208:12;;;;10136:99;10261:6;10252:5;:15;10248:99;;10296:6;10287:15;;;;;;:::i;:::-;;;;;10330:2;10320:12;;;;10248:99;10373:5;10364;:14;10360:96;;10407:5;10398:14;;;;;;:::i;:::-;;;;;10440:1;10430:11;;;;10360:96;10482:5;10473;:14;10469:96;;10516:5;10507:14;;;;;;:::i;:::-;;;;;10549:1;10539:11;;;;10469:96;10591:5;10582;:14;10578:96;;10625:5;10616:14;;;;;;:::i;:::-;;;;;10658:1;10648:11;;;;10578:96;10700:5;10691;:14;10687:64;;10735:1;10725:11;;;;10687:64;10777:6;10770:13;;;9900:890;;;:::o;7:139:11:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:133::-;195:5;233:6;220:20;211:29;;249:30;273:5;249:30;:::i;:::-;152:133;;;;:::o;291:137::-;336:5;374:6;361:20;352:29;;390:32;416:5;390:32;:::i;:::-;291:137;;;;:::o;434:139::-;480:5;518:6;505:20;496:29;;534:33;561:5;534:33;:::i;:::-;434:139;;;;:::o;579:329::-;638:6;687:2;675:9;666:7;662:23;658:32;655:119;;;693:79;;:::i;:::-;655:119;813:1;838:53;883:7;874:6;863:9;859:22;838:53;:::i;:::-;828:63;;784:117;579:329;;;;:::o;914:474::-;982:6;990;1039:2;1027:9;1018:7;1014:23;1010:32;1007:119;;;1045:79;;:::i;:::-;1007:119;1165:1;1190:53;1235:7;1226:6;1215:9;1211:22;1190:53;:::i;:::-;1180:63;;1136:117;1292:2;1318:53;1363:7;1354:6;1343:9;1339:22;1318:53;:::i;:::-;1308:63;;1263:118;914:474;;;;;:::o;1394:468::-;1459:6;1467;1516:2;1504:9;1495:7;1491:23;1487:32;1484:119;;;1522:79;;:::i;:::-;1484:119;1642:1;1667:53;1712:7;1703:6;1692:9;1688:22;1667:53;:::i;:::-;1657:63;;1613:117;1769:2;1795:50;1837:7;1828:6;1817:9;1813:22;1795:50;:::i;:::-;1785:60;;1740:115;1394:468;;;;;:::o;1868:474::-;1936:6;1944;1993:2;1981:9;1972:7;1968:23;1964:32;1961:119;;;1999:79;;:::i;:::-;1961:119;2119:1;2144:53;2189:7;2180:6;2169:9;2165:22;2144:53;:::i;:::-;2134:63;;2090:117;2246:2;2272:53;2317:7;2308:6;2297:9;2293:22;2272:53;:::i;:::-;2262:63;;2217:118;1868:474;;;;;:::o;2348:327::-;2406:6;2455:2;2443:9;2434:7;2430:23;2426:32;2423:119;;;2461:79;;:::i;:::-;2423:119;2581:1;2606:52;2650:7;2641:6;2630:9;2626:22;2606:52;:::i;:::-;2596:62;;2552:116;2348:327;;;;:::o;2681:329::-;2740:6;2789:2;2777:9;2768:7;2764:23;2760:32;2757:119;;;2795:79;;:::i;:::-;2757:119;2915:1;2940:53;2985:7;2976:6;2965:9;2961:22;2940:53;:::i;:::-;2930:63;;2886:117;2681:329;;;;:::o;3016:118::-;3103:24;3121:5;3103:24;:::i;:::-;3098:3;3091:37;3016:118;;:::o;3140:109::-;3221:21;3236:5;3221:21;:::i;:::-;3216:3;3209:34;3140:109;;:::o;3255:364::-;3343:3;3371:39;3404:5;3371:39;:::i;:::-;3426:71;3490:6;3485:3;3426:71;:::i;:::-;3419:78;;3506:52;3551:6;3546:3;3539:4;3532:5;3528:16;3506:52;:::i;:::-;3583:29;3605:6;3583:29;:::i;:::-;3578:3;3574:39;3567:46;;3347:272;3255:364;;;;:::o;3625:377::-;3731:3;3759:39;3792:5;3759:39;:::i;:::-;3814:89;3896:6;3891:3;3814:89;:::i;:::-;3807:96;;3912:52;3957:6;3952:3;3945:4;3938:5;3934:16;3912:52;:::i;:::-;3989:6;3984:3;3980:16;3973:23;;3735:267;3625:377;;;;:::o;4008:366::-;4150:3;4171:67;4235:2;4230:3;4171:67;:::i;:::-;4164:74;;4247:93;4336:3;4247:93;:::i;:::-;4365:2;4360:3;4356:12;4349:19;;4008:366;;;:::o;4380:::-;4522:3;4543:67;4607:2;4602:3;4543:67;:::i;:::-;4536:74;;4619:93;4708:3;4619:93;:::i;:::-;4737:2;4732:3;4728:12;4721:19;;4380:366;;;:::o;4752:::-;4894:3;4915:67;4979:2;4974:3;4915:67;:::i;:::-;4908:74;;4991:93;5080:3;4991:93;:::i;:::-;5109:2;5104:3;5100:12;5093:19;;4752:366;;;:::o;5124:::-;5266:3;5287:67;5351:2;5346:3;5287:67;:::i;:::-;5280:74;;5363:93;5452:3;5363:93;:::i;:::-;5481:2;5476:3;5472:12;5465:19;;5124:366;;;:::o;5496:::-;5638:3;5659:67;5723:2;5718:3;5659:67;:::i;:::-;5652:74;;5735:93;5824:3;5735:93;:::i;:::-;5853:2;5848:3;5844:12;5837:19;;5496:366;;;:::o;5868:118::-;5955:24;5973:5;5955:24;:::i;:::-;5950:3;5943:37;5868:118;;:::o;5992:435::-;6172:3;6194:95;6285:3;6276:6;6194:95;:::i;:::-;6187:102;;6306:95;6397:3;6388:6;6306:95;:::i;:::-;6299:102;;6418:3;6411:10;;5992:435;;;;;:::o;6433:222::-;6526:4;6564:2;6553:9;6549:18;6541:26;;6577:71;6645:1;6634:9;6630:17;6621:6;6577:71;:::i;:::-;6433:222;;;;:::o;6661:210::-;6748:4;6786:2;6775:9;6771:18;6763:26;;6799:65;6861:1;6850:9;6846:17;6837:6;6799:65;:::i;:::-;6661:210;;;;:::o;6877:313::-;6990:4;7028:2;7017:9;7013:18;7005:26;;7077:9;7071:4;7067:20;7063:1;7052:9;7048:17;7041:47;7105:78;7178:4;7169:6;7105:78;:::i;:::-;7097:86;;6877:313;;;;:::o;7196:419::-;7362:4;7400:2;7389:9;7385:18;7377:26;;7449:9;7443:4;7439:20;7435:1;7424:9;7420:17;7413:47;7477:131;7603:4;7477:131;:::i;:::-;7469:139;;7196:419;;;:::o;7621:::-;7787:4;7825:2;7814:9;7810:18;7802:26;;7874:9;7868:4;7864:20;7860:1;7849:9;7845:17;7838:47;7902:131;8028:4;7902:131;:::i;:::-;7894:139;;7621:419;;;:::o;8046:::-;8212:4;8250:2;8239:9;8235:18;8227:26;;8299:9;8293:4;8289:20;8285:1;8274:9;8270:17;8263:47;8327:131;8453:4;8327:131;:::i;:::-;8319:139;;8046:419;;;:::o;8471:::-;8637:4;8675:2;8664:9;8660:18;8652:26;;8724:9;8718:4;8714:20;8710:1;8699:9;8695:17;8688:47;8752:131;8878:4;8752:131;:::i;:::-;8744:139;;8471:419;;;:::o;8896:::-;9062:4;9100:2;9089:9;9085:18;9077:26;;9149:9;9143:4;9139:20;9135:1;9124:9;9120:17;9113:47;9177:131;9303:4;9177:131;:::i;:::-;9169:139;;8896:419;;;:::o;9321:222::-;9414:4;9452:2;9441:9;9437:18;9429:26;;9465:71;9533:1;9522:9;9518:17;9509:6;9465:71;:::i;:::-;9321:222;;;;:::o;9630:99::-;9682:6;9716:5;9710:12;9700:22;;9630:99;;;:::o;9735:169::-;9819:11;9853:6;9848:3;9841:19;9893:4;9888:3;9884:14;9869:29;;9735:169;;;;:::o;9910:148::-;10012:11;10049:3;10034:18;;9910:148;;;;:::o;10064:96::-;10101:7;10130:24;10148:5;10130:24;:::i;:::-;10119:35;;10064:96;;;:::o;10166:90::-;10200:7;10243:5;10236:13;10229:21;10218:32;;10166:90;;;:::o;10262:149::-;10298:7;10338:66;10331:5;10327:78;10316:89;;10262:149;;;:::o;10417:126::-;10454:7;10494:42;10487:5;10483:54;10472:65;;10417:126;;;:::o;10549:77::-;10586:7;10615:5;10604:16;;10549:77;;;:::o;10632:307::-;10700:1;10710:113;10724:6;10721:1;10718:13;10710:113;;;10809:1;10804:3;10800:11;10794:18;10790:1;10785:3;10781:11;10774:39;10746:2;10743:1;10739:10;10734:15;;10710:113;;;10841:6;10838:1;10835:13;10832:101;;;10921:1;10912:6;10907:3;10903:16;10896:27;10832:101;10681:258;10632:307;;;:::o;10945:320::-;10989:6;11026:1;11020:4;11016:12;11006:22;;11073:1;11067:4;11063:12;11094:18;11084:81;;11150:4;11142:6;11138:17;11128:27;;11084:81;11212:2;11204:6;11201:14;11181:18;11178:38;11175:84;;;11231:18;;:::i;:::-;11175:84;10996:269;10945:320;;;:::o;11271:180::-;11319:77;11316:1;11309:88;11416:4;11413:1;11406:15;11440:4;11437:1;11430:15;11457:180;11505:77;11502:1;11495:88;11602:4;11599:1;11592:15;11626:4;11623:1;11616:15;11643:180;11691:77;11688:1;11681:88;11788:4;11785:1;11778:15;11812:4;11809:1;11802:15;11952:117;12061:1;12058;12051:12;12075:102;12116:6;12167:2;12163:7;12158:2;12151:5;12147:14;12143:28;12133:38;;12075:102;;;:::o;12183:175::-;12323:27;12319:1;12311:6;12307:14;12300:51;12183:175;:::o;12364:228::-;12504:34;12500:1;12492:6;12488:14;12481:58;12573:11;12568:2;12560:6;12556:15;12549:36;12364:228;:::o;12598:174::-;12738:26;12734:1;12726:6;12722:14;12715:50;12598:174;:::o;12778:220::-;12918:34;12914:1;12906:6;12902:14;12895:58;12987:3;12982:2;12974:6;12970:15;12963:28;12778:220;:::o;13004:248::-;13144:34;13140:1;13132:6;13128:14;13121:58;13213:31;13208:2;13200:6;13196:15;13189:56;13004:248;:::o;13258:122::-;13331:24;13349:5;13331:24;:::i;:::-;13324:5;13321:35;13311:63;;13370:1;13367;13360:12;13311:63;13258:122;:::o;13386:116::-;13456:21;13471:5;13456:21;:::i;:::-;13449:5;13446:32;13436:60;;13492:1;13489;13482:12;13436:60;13386:116;:::o;13508:120::-;13580:23;13597:5;13580:23;:::i;:::-;13573:5;13570:34;13560:62;;13618:1;13615;13608:12;13560:62;13508:120;:::o;13634:122::-;13707:24;13725:5;13707:24;:::i;:::-;13700:5;13697:35;13687:63;;13746:1;13743;13736:12;13687:63;13634:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1080600",
								"executionCost": "1120",
								"totalCost": "1081720"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2879",
								"getApproved(uint256)": "5277",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "3091",
								"setApprovalForAll(address,bool)": "infinite",
								"supportsInterface(bytes4)": "774",
								"symbol()": "infinite",
								"tokenURI(uint256)": "3467"
							},
							"internal": {
								"__ERC721_init(string memory,string memory)": "infinite",
								"__ERC721_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256,uint256)": "infinite",
								"_approve(address,uint256)": "infinite",
								"_baseURI()": "infinite",
								"_beforeTokenTransfer(address,address,uint256,uint256)": "infinite",
								"_burn(uint256)": "infinite",
								"_checkOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "2312",
								"_isApprovedOrOwner(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_ownerOf(uint256)": "2248",
								"_requireMinted(uint256)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_safeTransfer(address,address,uint256,bytes memory)": "infinite",
								"_setApprovalForAll(address,address,bool)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 751,
									"end": 17881,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 17881,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122053cb157847aea0b4d18989b71b79ced91622827c1222ee4bfd41f11c2a7c68c064736f6c63430008070033",
									".code": [
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "70A08231"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "70A08231"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "95D89B41"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "A22CB465"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "C87B56DD"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "E985E9C5"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "1FFC9A7"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "6FDDE03"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "81812FC"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "95EA7B3"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "6352211E"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 751,
											"end": 17881,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "tag",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "tag",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "tag",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "tag",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "tag",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2161,
											"end": 2197,
											"name": "PUSH",
											"source": 1,
											"value": "591D4BC000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2146,
											"end": 2197,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2146,
											"end": 2197,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2197,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2157,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2197,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2146,
											"end": 2197,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2197,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2197,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2272,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 2146,
											"end": 2272,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2272,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2228,
											"end": 2272,
											"name": "PUSH",
											"source": 1,
											"value": "5B5E139F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2213,
											"end": 2272,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2213,
											"end": 2272,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2213,
											"end": 2272,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2213,
											"end": 2224,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2213,
											"end": 2272,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2213,
											"end": 2272,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2213,
											"end": 2272,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2213,
											"end": 2272,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2272,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 2146,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2324,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2324,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 2146,
											"end": 2324,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2324,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2288,
											"end": 2324,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 2312,
											"end": 2323,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2288,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2288,
											"end": 2324,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2288,
											"end": 2324,
											"name": "tag",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 2288,
											"end": 2324,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2324,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 2146,
											"end": 2324,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2127,
											"end": 2324,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2127,
											"end": 2324,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1987,
											"end": 2331,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "tag",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2986,
											"end": 2999,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3018,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "tag",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 3030,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4483,
											"end": 4490,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4502,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 4517,
											"end": 4524,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4502,
											"end": 4516,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 4502,
											"end": 4525,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4502,
											"end": 4525,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 4502,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4558,
											"name": "PUSH",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4559,
											"end": 4566,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4543,
											"end": 4567,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4536,
											"end": 4567,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4536,
											"end": 4567,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4009,
											"end": 4022,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 4051,
											"end": 4058,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4025,
											"end": 4050,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "tag",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4009,
											"end": 4059,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4009,
											"end": 4059,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4083,
											"end": 4088,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4088,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4077,
											"end": 4088,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4079,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4088,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4077,
											"end": 4088,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4088,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4077,
											"end": 4088,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "tag",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 4069,
											"end": 4126,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4174,
											"end": 4179,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4179,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4158,
											"end": 4179,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4170,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 4158,
											"end": 4168,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 4158,
											"end": 4170,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4158,
											"end": 4170,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 4158,
											"end": 4170,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4179,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4158,
											"end": 4179,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4179,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4220,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4220,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 4158,
											"end": 4220,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4220,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4183,
											"end": 4220,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4207,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 4207,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 4207,
											"end": 4219,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4207,
											"end": 4219,
											"name": "tag",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 4207,
											"end": 4219,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4183,
											"end": 4199,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 4183,
											"end": 4220,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4183,
											"end": 4220,
											"name": "tag",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 4183,
											"end": 4220,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4220,
											"name": "tag",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 4158,
											"end": 4220,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "tag",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 4137,
											"end": 4307,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4318,
											"end": 4339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 4327,
											"end": 4329,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4331,
											"end": 4338,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4318,
											"end": 4326,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "89"
										},
										{
											"begin": 4318,
											"end": 4339,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4318,
											"end": 4339,
											"name": "tag",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 4318,
											"end": 4339,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3999,
											"end": 4346,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3929,
											"end": 4346,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "tag",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2723,
											"end": 2730,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2742,
											"end": 2755,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2758,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 2767,
											"end": 2774,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2758,
											"end": 2766,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 2758,
											"end": 2775,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2758,
											"end": 2775,
											"name": "tag",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 2758,
											"end": 2775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2742,
											"end": 2775,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2742,
											"end": 2775,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2810,
											"end": 2811,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2793,
											"end": 2812,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2793,
											"end": 2812,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2793,
											"end": 2798,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2793,
											"end": 2812,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2793,
											"end": 2812,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2793,
											"end": 2812,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2793,
											"end": 2812,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "tag",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "tag",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 2785,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2858,
											"end": 2863,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2851,
											"end": 2863,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2851,
											"end": 2863,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2851,
											"end": 2863,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2870,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2462,
											"end": 2469,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2506,
											"end": 2507,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2489,
											"end": 2508,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2489,
											"end": 2508,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2489,
											"end": 2494,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2489,
											"end": 2508,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2489,
											"end": 2508,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2489,
											"end": 2508,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2489,
											"end": 2508,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "tag",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 2481,
											"end": 2554,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2580,
											"name": "PUSH",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2581,
											"end": 2586,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2571,
											"end": 2587,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2564,
											"end": 2587,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2564,
											"end": 2587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2390,
											"end": 2594,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3150,
											"end": 3163,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3182,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "tag",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "tag",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "tag",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3189,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3094,
											"end": 3196,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4735,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 4754,
											"end": 4766,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 4754,
											"end": 4764,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 4754,
											"end": 4766,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4754,
											"end": 4766,
											"name": "tag",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 4754,
											"end": 4766,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4768,
											"end": 4776,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4778,
											"end": 4786,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4735,
											"end": 4753,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 4735,
											"end": 4787,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4735,
											"end": 4787,
											"name": "tag",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 4735,
											"end": 4787,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4641,
											"end": 4794,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "tag",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3335,
											"end": 3348,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3360,
											"end": 3383,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 3375,
											"end": 3382,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3360,
											"end": 3374,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 3360,
											"end": 3383,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3360,
											"end": 3383,
											"name": "tag",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 3360,
											"end": 3383,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3394,
											"end": 3415,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3418,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 3418,
											"end": 3426,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3418,
											"end": 3428,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3418,
											"end": 3428,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 3418,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3394,
											"end": 3428,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3394,
											"end": 3428,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3469,
											"end": 3470,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3451,
											"end": 3458,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3466,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3470,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "tag",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3497,
											"end": 3504,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 3506,
											"end": 3513,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3522,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "tag",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "tag",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3480,
											"end": 3525,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 3445,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3438,
											"end": 3531,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3438,
											"end": 3531,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3438,
											"end": 3531,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3262,
											"end": 3538,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4957,
											"end": 4961,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4980,
											"end": 4998,
											"name": "PUSH",
											"source": 1,
											"value": "6A"
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4999,
											"end": 5004,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4980,
											"end": 5005,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5006,
											"end": 5014,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4980,
											"end": 5015,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4973,
											"end": 5015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4973,
											"end": 5015,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4860,
											"end": 5022,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1060,
											"end": 1226,
											"name": "tag",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1060,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1145,
											"end": 1149,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1183,
											"end": 1219,
											"name": "PUSH",
											"source": 8,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1168,
											"end": 1179,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1168,
											"end": 1219,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1161,
											"end": 1219,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1161,
											"end": 1219,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1060,
											"end": 1226,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1060,
											"end": 1226,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1060,
											"end": 1226,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1060,
											"end": 1226,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 14079,
											"end": 14212,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 14079,
											"end": 14212,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14160,
											"end": 14176,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 14168,
											"end": 14175,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 14160,
											"end": 14167,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 14160,
											"end": 14176,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 14160,
											"end": 14176,
											"name": "tag",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 14160,
											"end": 14176,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "tag",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "tag",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 14152,
											"end": 14205,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14079,
											"end": 14212,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14079,
											"end": 14212,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 850,
											"end": 946,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 903,
											"end": 910,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 922,
											"end": 939,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 922,
											"end": 939,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 850,
											"end": 946,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 13370,
											"end": 13552,
											"name": "tag",
											"source": 1,
											"value": "89"
										},
										{
											"begin": 13370,
											"end": 13552,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13471,
											"end": 13473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13459,
											"name": "PUSH",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13460,
											"end": 13467,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13468,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 13444,
											"end": 13473,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13537,
											"end": 13544,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 13533,
											"end": 13535,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13497,
											"end": 13531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 13523,
											"end": 13530,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13497,
											"end": 13522,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 13497,
											"end": 13531,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 13497,
											"end": 13531,
											"name": "tag",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 13497,
											"end": 13531,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "PUSH",
											"source": 1,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13488,
											"end": 13545,
											"name": "LOG4",
											"source": 1
										},
										{
											"begin": 13370,
											"end": 13552,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13370,
											"end": 13552,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13370,
											"end": 13552,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7385,
											"end": 7500,
											"name": "tag",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 7385,
											"end": 7500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7451,
											"end": 7458,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7477,
											"end": 7484,
											"name": "PUSH",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7485,
											"end": 7492,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7477,
											"end": 7493,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7470,
											"end": 7493,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7470,
											"end": 7493,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7385,
											"end": 7500,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7385,
											"end": 7500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7385,
											"end": 7500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7385,
											"end": 7500,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 13688,
											"end": 13995,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 13688,
											"end": 13995,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13838,
											"end": 13846,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13829,
											"end": 13846,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13829,
											"end": 13846,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13829,
											"end": 13834,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13829,
											"end": 13846,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13829,
											"end": 13846,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13829,
											"end": 13846,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 13829,
											"end": 13846,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "134"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "tag",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "tag",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 13821,
											"end": 13876,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13924,
											"end": 13932,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13904,
											"name": "PUSH",
											"source": 1,
											"value": "6A"
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13905,
											"end": 13910,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13886,
											"end": 13911,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13912,
											"end": 13920,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13921,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 13886,
											"end": 13932,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13969,
											"end": 13977,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13962,
											"end": 13967,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "PUSH",
											"source": 1,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 13979,
											"end": 13987,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "tag",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13947,
											"end": 13988,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 13688,
											"end": 13995,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13688,
											"end": 13995,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13688,
											"end": 13995,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13688,
											"end": 13995,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3780,
											"end": 3872,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3780,
											"end": 3872,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3831,
											"end": 3844,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3780,
											"end": 3872,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3780,
											"end": 3872,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 437,
											"end": 1144,
											"name": "tag",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 437,
											"end": 1144,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 493,
											"end": 506,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 542,
											"end": 556,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 590,
											"end": 591,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 559,
											"end": 587,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 581,
											"end": 586,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 559,
											"end": 580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "139"
										},
										{
											"begin": 559,
											"end": 587,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 559,
											"end": 587,
											"name": "tag",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 559,
											"end": 587,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 559,
											"end": 591,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 542,
											"end": 591,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 542,
											"end": 591,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 605,
											"end": 625,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 639,
											"end": 645,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "142"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "tag",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "tag",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 628,
											"end": 646,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 628,
											"end": 646,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 605,
											"end": 646,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 605,
											"end": 646,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 660,
											"end": 671,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 786,
											"end": 792,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 782,
											"end": 784,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 778,
											"end": 793,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 770,
											"end": 776,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 766,
											"end": 794,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 759,
											"end": 794,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 759,
											"end": 794,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 828,
											"end": 832,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 852,
											"end": 857,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 852,
											"end": 857,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 852,
											"end": 857,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 852,
											"end": 857,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 852,
											"end": 857,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 852,
											"end": 857,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 852,
											"end": 857,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 852,
											"end": 857,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 991,
											"end": 999,
											"name": "PUSH",
											"source": 7,
											"value": "3031323334353637383961626364656600000000000000000000000000000000"
										},
										{
											"begin": 986,
											"end": 988,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 979,
											"end": 984,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 975,
											"end": 989,
											"name": "MOD",
											"source": 7
										},
										{
											"begin": 970,
											"end": 1000,
											"name": "BYTE",
											"source": 7
										},
										{
											"begin": 965,
											"end": 968,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 957,
											"end": 1001,
											"name": "MSTORE8",
											"source": 7
										},
										{
											"begin": 1045,
											"end": 1047,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "tag",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "tag",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1079,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1069,
											"end": 1074,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1069,
											"end": 1079,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1065,
											"end": 1086,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1065,
											"end": 1086,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 1065,
											"end": 1086,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1081,
											"end": 1086,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 1081,
											"end": 1086,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1065,
											"end": 1086,
											"name": "tag",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 1065,
											"end": 1086,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "tag",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 821,
											"end": 1101,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1121,
											"end": 1127,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1127,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1127,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1127,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1127,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1127,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 437,
											"end": 1144,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 437,
											"end": 1144,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 437,
											"end": 1144,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 437,
											"end": 1144,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7803,
											"end": 7929,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7803,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7868,
											"end": 7872,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7920,
											"end": 7921,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7922,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7891,
											"end": 7922,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7908,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "151"
										},
										{
											"begin": 7900,
											"end": 7907,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7899,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 7891,
											"end": 7908,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7891,
											"end": 7908,
											"name": "tag",
											"source": 1,
											"value": "151"
										},
										{
											"begin": 7891,
											"end": 7908,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7922,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7891,
											"end": 7922,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7922,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7922,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7884,
											"end": 7922,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7884,
											"end": 7922,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7803,
											"end": 7929,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7803,
											"end": 7929,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7803,
											"end": 7929,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7803,
											"end": 7929,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 9900,
											"end": 10790,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 9900,
											"end": 10790,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9953,
											"end": 9960,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9972,
											"end": 9986,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9989,
											"end": 9990,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9972,
											"end": 9990,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9972,
											"end": 9990,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10037,
											"end": 10043,
											"name": "PUSH",
											"source": 10,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 10028,
											"end": 10033,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10028,
											"end": 10043,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10024,
											"end": 10123,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 10024,
											"end": 10123,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10072,
											"end": 10078,
											"name": "PUSH",
											"source": 10,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "tag",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10063,
											"end": 10078,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10106,
											"end": 10108,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 10096,
											"end": 10108,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10096,
											"end": 10108,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10096,
											"end": 10108,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10096,
											"end": 10108,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10024,
											"end": 10123,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 10024,
											"end": 10123,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10149,
											"end": 10155,
											"name": "PUSH",
											"source": 10,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10140,
											"end": 10145,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10140,
											"end": 10155,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10136,
											"end": 10235,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 10136,
											"end": 10235,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10184,
											"end": 10190,
											"name": "PUSH",
											"source": 10,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "tag",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "tag",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10175,
											"end": 10190,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10218,
											"end": 10220,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10208,
											"end": 10220,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10208,
											"end": 10220,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10208,
											"end": 10220,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10208,
											"end": 10220,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10136,
											"end": 10235,
											"name": "tag",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 10136,
											"end": 10235,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10261,
											"end": 10267,
											"name": "PUSH",
											"source": 10,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10252,
											"end": 10257,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10252,
											"end": 10267,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10248,
											"end": 10347,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 10248,
											"end": 10347,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10296,
											"end": 10302,
											"name": "PUSH",
											"source": 10,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "tag",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10287,
											"end": 10302,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10330,
											"end": 10332,
											"name": "PUSH",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 10320,
											"end": 10332,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10320,
											"end": 10332,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10320,
											"end": 10332,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10320,
											"end": 10332,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10248,
											"end": 10347,
											"name": "tag",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 10248,
											"end": 10347,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10373,
											"end": 10378,
											"name": "PUSH",
											"source": 10,
											"value": "5F5E100"
										},
										{
											"begin": 10364,
											"end": 10369,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10364,
											"end": 10378,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10360,
											"end": 10456,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 10360,
											"end": 10456,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10407,
											"end": 10412,
											"name": "PUSH",
											"source": 10,
											"value": "5F5E100"
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "tag",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "tag",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10398,
											"end": 10412,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10440,
											"end": 10441,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 10430,
											"end": 10441,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10441,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10441,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10430,
											"end": 10441,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10360,
											"end": 10456,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 10360,
											"end": 10456,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10482,
											"end": 10487,
											"name": "PUSH",
											"source": 10,
											"value": "2710"
										},
										{
											"begin": 10473,
											"end": 10478,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10473,
											"end": 10487,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10469,
											"end": 10565,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "165"
										},
										{
											"begin": 10469,
											"end": 10565,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10516,
											"end": 10521,
											"name": "PUSH",
											"source": 10,
											"value": "2710"
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "166"
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "tag",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "tag",
											"source": 10,
											"value": "166"
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10507,
											"end": 10521,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10549,
											"end": 10550,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 10539,
											"end": 10550,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10539,
											"end": 10550,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10539,
											"end": 10550,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10539,
											"end": 10550,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10469,
											"end": 10565,
											"name": "tag",
											"source": 10,
											"value": "165"
										},
										{
											"begin": 10469,
											"end": 10565,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10591,
											"end": 10596,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 10582,
											"end": 10587,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10582,
											"end": 10596,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10578,
											"end": 10674,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 10578,
											"end": 10674,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10625,
											"end": 10630,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "169"
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "tag",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "tag",
											"source": 10,
											"value": "169"
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10630,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10658,
											"end": 10659,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 10648,
											"end": 10659,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10648,
											"end": 10659,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10648,
											"end": 10659,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10648,
											"end": 10659,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10578,
											"end": 10674,
											"name": "tag",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 10578,
											"end": 10674,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10700,
											"end": 10705,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 10691,
											"end": 10696,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10691,
											"end": 10705,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10687,
											"end": 10751,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 10687,
											"end": 10751,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10735,
											"end": 10736,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 10725,
											"end": 10736,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10725,
											"end": 10736,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10725,
											"end": 10736,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10725,
											"end": 10736,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10687,
											"end": 10751,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 10687,
											"end": 10751,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10777,
											"end": 10783,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 10770,
											"end": 10783,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10770,
											"end": 10783,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10770,
											"end": 10783,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9900,
											"end": 10790,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9900,
											"end": 10790,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9900,
											"end": 10790,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9900,
											"end": 10790,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "176"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 285,
											"name": "tag",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 152,
											"end": 285,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 195,
											"end": 200,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 233,
											"end": 239,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 220,
											"end": 240,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 211,
											"end": 240,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 211,
											"end": 240,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 249,
											"end": 279,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "179"
										},
										{
											"begin": 273,
											"end": 278,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 249,
											"end": 279,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "180"
										},
										{
											"begin": 249,
											"end": 279,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 249,
											"end": 279,
											"name": "tag",
											"source": 11,
											"value": "179"
										},
										{
											"begin": 249,
											"end": 279,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 152,
											"end": 285,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 152,
											"end": 285,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 152,
											"end": 285,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 152,
											"end": 285,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 152,
											"end": 285,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 291,
											"end": 428,
											"name": "tag",
											"source": 11,
											"value": "181"
										},
										{
											"begin": 291,
											"end": 428,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 336,
											"end": 341,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 380,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 361,
											"end": 381,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 352,
											"end": 381,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 352,
											"end": 381,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 390,
											"end": 422,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 416,
											"end": 421,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 390,
											"end": 422,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 390,
											"end": 422,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 390,
											"end": 422,
											"name": "tag",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 390,
											"end": 422,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 291,
											"end": 428,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 291,
											"end": 428,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 291,
											"end": 428,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 291,
											"end": 428,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 291,
											"end": 428,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 434,
											"end": 573,
											"name": "tag",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 434,
											"end": 573,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 480,
											"end": 485,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 518,
											"end": 524,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 505,
											"end": 525,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 496,
											"end": 525,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 496,
											"end": 525,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 534,
											"end": 567,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 561,
											"end": 566,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 534,
											"end": 567,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 534,
											"end": 567,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 534,
											"end": 567,
											"name": "tag",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 534,
											"end": 567,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 434,
											"end": 573,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 434,
											"end": 573,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 434,
											"end": 573,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 434,
											"end": 573,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 434,
											"end": 573,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 579,
											"end": 908,
											"name": "tag",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 579,
											"end": 908,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 638,
											"end": 644,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 687,
											"end": 689,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 675,
											"end": 684,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 666,
											"end": 673,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 662,
											"end": 685,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 658,
											"end": 690,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 655,
											"end": 774,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 655,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "190"
										},
										{
											"begin": 655,
											"end": 774,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 693,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "tag",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 693,
											"end": 772,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 655,
											"end": 774,
											"name": "tag",
											"source": 11,
											"value": "190"
										},
										{
											"begin": 655,
											"end": 774,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 813,
											"end": 814,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 838,
											"end": 891,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 883,
											"end": 890,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 874,
											"end": 880,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 863,
											"end": 872,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 859,
											"end": 881,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 838,
											"end": 891,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 838,
											"end": 891,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 838,
											"end": 891,
											"name": "tag",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 838,
											"end": 891,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 828,
											"end": 891,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 828,
											"end": 891,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 784,
											"end": 901,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 579,
											"end": 908,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 579,
											"end": 908,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 579,
											"end": 908,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 579,
											"end": 908,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 579,
											"end": 908,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 914,
											"end": 1388,
											"name": "tag",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 914,
											"end": 1388,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 982,
											"end": 988,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 990,
											"end": 996,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1039,
											"end": 1041,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1027,
											"end": 1036,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1018,
											"end": 1025,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1014,
											"end": 1037,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1007,
											"end": 1126,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1007,
											"end": 1126,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 1007,
											"end": 1126,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1045,
											"end": 1124,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 1045,
											"end": 1124,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 1045,
											"end": 1124,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1045,
											"end": 1124,
											"name": "tag",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 1045,
											"end": 1124,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1007,
											"end": 1126,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 1007,
											"end": 1126,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1165,
											"end": 1166,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1190,
											"end": 1243,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 1235,
											"end": 1242,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1226,
											"end": 1232,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1215,
											"end": 1224,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1190,
											"end": 1243,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 1190,
											"end": 1243,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1190,
											"end": 1243,
											"name": "tag",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 1190,
											"end": 1243,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1180,
											"end": 1243,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1180,
											"end": 1243,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1136,
											"end": 1253,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1292,
											"end": 1294,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1318,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 1363,
											"end": 1370,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1354,
											"end": 1360,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1343,
											"end": 1352,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1339,
											"end": 1361,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1318,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 1318,
											"end": 1371,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1318,
											"end": 1371,
											"name": "tag",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 1318,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1308,
											"end": 1371,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1308,
											"end": 1371,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1263,
											"end": 1381,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 914,
											"end": 1388,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 914,
											"end": 1388,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 914,
											"end": 1388,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 914,
											"end": 1388,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 914,
											"end": 1388,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 914,
											"end": 1388,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1394,
											"end": 1862,
											"name": "tag",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 1394,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1459,
											"end": 1465,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1467,
											"end": 1473,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1516,
											"end": 1518,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1513,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1495,
											"end": 1502,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1491,
											"end": 1514,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1487,
											"end": 1519,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1484,
											"end": 1603,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1484,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 1484,
											"end": 1603,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1522,
											"end": 1601,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 1522,
											"end": 1601,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 1522,
											"end": 1601,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1522,
											"end": 1601,
											"name": "tag",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 1522,
											"end": 1601,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1484,
											"end": 1603,
											"name": "tag",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 1484,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1642,
											"end": 1643,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1667,
											"end": 1720,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 1712,
											"end": 1719,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1703,
											"end": 1709,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1692,
											"end": 1701,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1688,
											"end": 1710,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 1720,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 1667,
											"end": 1720,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1667,
											"end": 1720,
											"name": "tag",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 1667,
											"end": 1720,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1720,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1720,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1613,
											"end": 1730,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1769,
											"end": 1771,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1795,
											"end": 1845,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 1837,
											"end": 1844,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1828,
											"end": 1834,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1817,
											"end": 1826,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1813,
											"end": 1835,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1795,
											"end": 1845,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 1795,
											"end": 1845,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1795,
											"end": 1845,
											"name": "tag",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 1795,
											"end": 1845,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1785,
											"end": 1845,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1785,
											"end": 1845,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1740,
											"end": 1855,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1394,
											"end": 1862,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1394,
											"end": 1862,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1394,
											"end": 1862,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1394,
											"end": 1862,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1394,
											"end": 1862,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1394,
											"end": 1862,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1868,
											"end": 2342,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 1868,
											"end": 2342,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1942,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1944,
											"end": 1950,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1993,
											"end": 1995,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1981,
											"end": 1990,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1972,
											"end": 1979,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1968,
											"end": 1991,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1964,
											"end": 1996,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1961,
											"end": 2080,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1961,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 1961,
											"end": 2080,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "206"
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "tag",
											"source": 11,
											"value": "206"
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1961,
											"end": 2080,
											"name": "tag",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 1961,
											"end": 2080,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2119,
											"end": 2120,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2197,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 2189,
											"end": 2196,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2180,
											"end": 2186,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2169,
											"end": 2178,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2165,
											"end": 2187,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2197,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 2144,
											"end": 2197,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2144,
											"end": 2197,
											"name": "tag",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 2144,
											"end": 2197,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2134,
											"end": 2197,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2134,
											"end": 2197,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2090,
											"end": 2207,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2246,
											"end": 2248,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "208"
										},
										{
											"begin": 2317,
											"end": 2324,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2308,
											"end": 2314,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2297,
											"end": 2306,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2293,
											"end": 2315,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "tag",
											"source": 11,
											"value": "208"
										},
										{
											"begin": 2272,
											"end": 2325,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2262,
											"end": 2325,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2262,
											"end": 2325,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2217,
											"end": 2335,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1868,
											"end": 2342,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1868,
											"end": 2342,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1868,
											"end": 2342,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1868,
											"end": 2342,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1868,
											"end": 2342,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1868,
											"end": 2342,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2348,
											"end": 2675,
											"name": "tag",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 2348,
											"end": 2675,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2406,
											"end": 2412,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2457,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2443,
											"end": 2452,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2434,
											"end": 2441,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2430,
											"end": 2453,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2426,
											"end": 2458,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2423,
											"end": 2542,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2423,
											"end": 2542,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 2423,
											"end": 2542,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2461,
											"end": 2540,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 2461,
											"end": 2540,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 2461,
											"end": 2540,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2461,
											"end": 2540,
											"name": "tag",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 2461,
											"end": 2540,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2423,
											"end": 2542,
											"name": "tag",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 2423,
											"end": 2542,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2582,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2606,
											"end": 2658,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "212"
										},
										{
											"begin": 2650,
											"end": 2657,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2641,
											"end": 2647,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2630,
											"end": 2639,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2626,
											"end": 2648,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2606,
											"end": 2658,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "181"
										},
										{
											"begin": 2606,
											"end": 2658,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2606,
											"end": 2658,
											"name": "tag",
											"source": 11,
											"value": "212"
										},
										{
											"begin": 2606,
											"end": 2658,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2596,
											"end": 2658,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2596,
											"end": 2658,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2552,
											"end": 2668,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2348,
											"end": 2675,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2348,
											"end": 2675,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2348,
											"end": 2675,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2348,
											"end": 2675,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2348,
											"end": 2675,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2681,
											"end": 3010,
											"name": "tag",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 2681,
											"end": 3010,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2746,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2789,
											"end": 2791,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2777,
											"end": 2786,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2768,
											"end": 2775,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2764,
											"end": 2787,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2760,
											"end": 2792,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2757,
											"end": 2876,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2757,
											"end": 2876,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 2757,
											"end": 2876,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2795,
											"end": 2874,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 2795,
											"end": 2874,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 2795,
											"end": 2874,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2795,
											"end": 2874,
											"name": "tag",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 2795,
											"end": 2874,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2757,
											"end": 2876,
											"name": "tag",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 2757,
											"end": 2876,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2915,
											"end": 2916,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2940,
											"end": 2993,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 2985,
											"end": 2992,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2976,
											"end": 2982,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2965,
											"end": 2974,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2961,
											"end": 2983,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2940,
											"end": 2993,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 2940,
											"end": 2993,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2940,
											"end": 2993,
											"name": "tag",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 2940,
											"end": 2993,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2930,
											"end": 2993,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2930,
											"end": 2993,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2886,
											"end": 3003,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2681,
											"end": 3010,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2681,
											"end": 3010,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2681,
											"end": 3010,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2681,
											"end": 3010,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2681,
											"end": 3010,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3016,
											"end": 3134,
											"name": "tag",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 3016,
											"end": 3134,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3103,
											"end": 3127,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 3121,
											"end": 3126,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3103,
											"end": 3127,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 3103,
											"end": 3127,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3103,
											"end": 3127,
											"name": "tag",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 3103,
											"end": 3127,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3098,
											"end": 3101,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3091,
											"end": 3128,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3016,
											"end": 3134,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3016,
											"end": 3134,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3016,
											"end": 3134,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3140,
											"end": 3249,
											"name": "tag",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 3140,
											"end": 3249,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3221,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 3236,
											"end": 3241,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3221,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 3221,
											"end": 3242,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3221,
											"end": 3242,
											"name": "tag",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 3221,
											"end": 3242,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3216,
											"end": 3219,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3209,
											"end": 3243,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3249,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3249,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3249,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3255,
											"end": 3619,
											"name": "tag",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 3255,
											"end": 3619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3343,
											"end": 3346,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3371,
											"end": 3410,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 3404,
											"end": 3409,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3371,
											"end": 3410,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 3371,
											"end": 3410,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3371,
											"end": 3410,
											"name": "tag",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 3371,
											"end": 3410,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3497,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 3490,
											"end": 3496,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3485,
											"end": 3488,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3497,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 3426,
											"end": 3497,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3426,
											"end": 3497,
											"name": "tag",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 3426,
											"end": 3497,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3419,
											"end": 3497,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3419,
											"end": 3497,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3506,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "231"
										},
										{
											"begin": 3551,
											"end": 3557,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3546,
											"end": 3549,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3539,
											"end": 3543,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3532,
											"end": 3537,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 3528,
											"end": 3544,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3506,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "232"
										},
										{
											"begin": 3506,
											"end": 3558,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3506,
											"end": 3558,
											"name": "tag",
											"source": 11,
											"value": "231"
										},
										{
											"begin": 3506,
											"end": 3558,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3583,
											"end": 3612,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 3605,
											"end": 3611,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3583,
											"end": 3612,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "234"
										},
										{
											"begin": 3583,
											"end": 3612,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3583,
											"end": 3612,
											"name": "tag",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 3583,
											"end": 3612,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3578,
											"end": 3581,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3574,
											"end": 3613,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3567,
											"end": 3613,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3567,
											"end": 3613,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3347,
											"end": 3619,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3255,
											"end": 3619,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3255,
											"end": 3619,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3255,
											"end": 3619,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3255,
											"end": 3619,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3255,
											"end": 3619,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3625,
											"end": 4002,
											"name": "tag",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 3625,
											"end": 4002,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3731,
											"end": 3734,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3759,
											"end": 3798,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 3792,
											"end": 3797,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3798,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 3759,
											"end": 3798,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3759,
											"end": 3798,
											"name": "tag",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 3759,
											"end": 3798,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3814,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 3896,
											"end": 3902,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3891,
											"end": 3894,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3814,
											"end": 3903,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "239"
										},
										{
											"begin": 3814,
											"end": 3903,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3814,
											"end": 3903,
											"name": "tag",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 3814,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3807,
											"end": 3903,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3807,
											"end": 3903,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3912,
											"end": 3964,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "240"
										},
										{
											"begin": 3957,
											"end": 3963,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3952,
											"end": 3955,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3945,
											"end": 3949,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3938,
											"end": 3943,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 3934,
											"end": 3950,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3912,
											"end": 3964,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "232"
										},
										{
											"begin": 3912,
											"end": 3964,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3912,
											"end": 3964,
											"name": "tag",
											"source": 11,
											"value": "240"
										},
										{
											"begin": 3912,
											"end": 3964,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3989,
											"end": 3995,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3984,
											"end": 3987,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3980,
											"end": 3996,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3973,
											"end": 3996,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3973,
											"end": 3996,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3735,
											"end": 4002,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3625,
											"end": 4002,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3625,
											"end": 4002,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3625,
											"end": 4002,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3625,
											"end": 4002,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3625,
											"end": 4002,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4008,
											"end": 4374,
											"name": "tag",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 4008,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4150,
											"end": 4153,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4171,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 4235,
											"end": 4237,
											"name": "PUSH",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 4230,
											"end": 4233,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4171,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 4171,
											"end": 4238,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4171,
											"end": 4238,
											"name": "tag",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 4171,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4164,
											"end": 4238,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4164,
											"end": 4238,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4247,
											"end": 4340,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 4336,
											"end": 4339,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4247,
											"end": 4340,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 4247,
											"end": 4340,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4247,
											"end": 4340,
											"name": "tag",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 4247,
											"end": 4340,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4365,
											"end": 4367,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4360,
											"end": 4363,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4356,
											"end": 4368,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4349,
											"end": 4368,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4349,
											"end": 4368,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4008,
											"end": 4374,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4008,
											"end": 4374,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4008,
											"end": 4374,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4008,
											"end": 4374,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4380,
											"end": 4746,
											"name": "tag",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 4380,
											"end": 4746,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4525,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4543,
											"end": 4610,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 4607,
											"end": 4609,
											"name": "PUSH",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 4602,
											"end": 4605,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4543,
											"end": 4610,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 4543,
											"end": 4610,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4543,
											"end": 4610,
											"name": "tag",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 4543,
											"end": 4610,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4536,
											"end": 4610,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4536,
											"end": 4610,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4619,
											"end": 4712,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 4708,
											"end": 4711,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4619,
											"end": 4712,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 4619,
											"end": 4712,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4619,
											"end": 4712,
											"name": "tag",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 4619,
											"end": 4712,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4737,
											"end": 4739,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4732,
											"end": 4735,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4728,
											"end": 4740,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4721,
											"end": 4740,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4721,
											"end": 4740,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4380,
											"end": 4746,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4380,
											"end": 4746,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4380,
											"end": 4746,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4380,
											"end": 4746,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4752,
											"end": 5118,
											"name": "tag",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 4752,
											"end": 5118,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4894,
											"end": 4897,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4915,
											"end": 4982,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 4979,
											"end": 4981,
											"name": "PUSH",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 4974,
											"end": 4977,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4915,
											"end": 4982,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 4915,
											"end": 4982,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4915,
											"end": 4982,
											"name": "tag",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 4915,
											"end": 4982,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4908,
											"end": 4982,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4908,
											"end": 4982,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4991,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 5080,
											"end": 5083,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4991,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 4991,
											"end": 5084,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4991,
											"end": 5084,
											"name": "tag",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 4991,
											"end": 5084,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5109,
											"end": 5111,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5104,
											"end": 5107,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5100,
											"end": 5112,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5093,
											"end": 5112,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5093,
											"end": 5112,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4752,
											"end": 5118,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4752,
											"end": 5118,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4752,
											"end": 5118,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4752,
											"end": 5118,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5124,
											"end": 5490,
											"name": "tag",
											"source": 11,
											"value": "256"
										},
										{
											"begin": 5124,
											"end": 5490,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5266,
											"end": 5269,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5287,
											"end": 5354,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 5351,
											"end": 5353,
											"name": "PUSH",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 5346,
											"end": 5349,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5287,
											"end": 5354,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 5287,
											"end": 5354,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5287,
											"end": 5354,
											"name": "tag",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 5287,
											"end": 5354,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5280,
											"end": 5354,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5280,
											"end": 5354,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5363,
											"end": 5456,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 5452,
											"end": 5455,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5363,
											"end": 5456,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 5363,
											"end": 5456,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5363,
											"end": 5456,
											"name": "tag",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 5363,
											"end": 5456,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5481,
											"end": 5483,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5476,
											"end": 5479,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5472,
											"end": 5484,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5465,
											"end": 5484,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5465,
											"end": 5484,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5124,
											"end": 5490,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5124,
											"end": 5490,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5124,
											"end": 5490,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5124,
											"end": 5490,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5496,
											"end": 5862,
											"name": "tag",
											"source": 11,
											"value": "261"
										},
										{
											"begin": 5496,
											"end": 5862,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5638,
											"end": 5641,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5659,
											"end": 5726,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "263"
										},
										{
											"begin": 5723,
											"end": 5725,
											"name": "PUSH",
											"source": 11,
											"value": "3D"
										},
										{
											"begin": 5718,
											"end": 5721,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5659,
											"end": 5726,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 5659,
											"end": 5726,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5659,
											"end": 5726,
											"name": "tag",
											"source": 11,
											"value": "263"
										},
										{
											"begin": 5659,
											"end": 5726,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5652,
											"end": 5726,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5652,
											"end": 5726,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5735,
											"end": 5828,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "264"
										},
										{
											"begin": 5824,
											"end": 5827,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5735,
											"end": 5828,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 5735,
											"end": 5828,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5735,
											"end": 5828,
											"name": "tag",
											"source": 11,
											"value": "264"
										},
										{
											"begin": 5735,
											"end": 5828,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5853,
											"end": 5855,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5848,
											"end": 5851,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5844,
											"end": 5856,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5837,
											"end": 5856,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5837,
											"end": 5856,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5496,
											"end": 5862,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5496,
											"end": 5862,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5496,
											"end": 5862,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5496,
											"end": 5862,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5868,
											"end": 5986,
											"name": "tag",
											"source": 11,
											"value": "266"
										},
										{
											"begin": 5868,
											"end": 5986,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5955,
											"end": 5979,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "268"
										},
										{
											"begin": 5973,
											"end": 5978,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5955,
											"end": 5979,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 5955,
											"end": 5979,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5955,
											"end": 5979,
											"name": "tag",
											"source": 11,
											"value": "268"
										},
										{
											"begin": 5955,
											"end": 5979,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5950,
											"end": 5953,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5943,
											"end": 5980,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5868,
											"end": 5986,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5868,
											"end": 5986,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5868,
											"end": 5986,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5992,
											"end": 6427,
											"name": "tag",
											"source": 11,
											"value": "119"
										},
										{
											"begin": 5992,
											"end": 6427,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6172,
											"end": 6175,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6194,
											"end": 6289,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 6285,
											"end": 6288,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6276,
											"end": 6282,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 6194,
											"end": 6289,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 6194,
											"end": 6289,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6194,
											"end": 6289,
											"name": "tag",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 6194,
											"end": 6289,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6187,
											"end": 6289,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6187,
											"end": 6289,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6306,
											"end": 6401,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "272"
										},
										{
											"begin": 6397,
											"end": 6400,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6388,
											"end": 6394,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6306,
											"end": 6401,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 6306,
											"end": 6401,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6306,
											"end": 6401,
											"name": "tag",
											"source": 11,
											"value": "272"
										},
										{
											"begin": 6306,
											"end": 6401,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6299,
											"end": 6401,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6299,
											"end": 6401,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6418,
											"end": 6421,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6411,
											"end": 6421,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6411,
											"end": 6421,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5992,
											"end": 6427,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5992,
											"end": 6427,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5992,
											"end": 6427,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5992,
											"end": 6427,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5992,
											"end": 6427,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5992,
											"end": 6427,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6433,
											"end": 6655,
											"name": "tag",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 6433,
											"end": 6655,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6526,
											"end": 6530,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6564,
											"end": 6566,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6553,
											"end": 6562,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6549,
											"end": 6567,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6541,
											"end": 6567,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6541,
											"end": 6567,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6577,
											"end": 6648,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 6645,
											"end": 6646,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6634,
											"end": 6643,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6630,
											"end": 6647,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6621,
											"end": 6627,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6577,
											"end": 6648,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 6577,
											"end": 6648,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6577,
											"end": 6648,
											"name": "tag",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 6577,
											"end": 6648,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6433,
											"end": 6655,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6433,
											"end": 6655,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6433,
											"end": 6655,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6433,
											"end": 6655,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6433,
											"end": 6655,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6661,
											"end": 6871,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 6661,
											"end": 6871,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6748,
											"end": 6752,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6786,
											"end": 6788,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6775,
											"end": 6784,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6771,
											"end": 6789,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6763,
											"end": 6789,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6763,
											"end": 6789,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6799,
											"end": 6864,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 6861,
											"end": 6862,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6850,
											"end": 6859,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6846,
											"end": 6863,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6837,
											"end": 6843,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6799,
											"end": 6864,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 6799,
											"end": 6864,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6799,
											"end": 6864,
											"name": "tag",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 6799,
											"end": 6864,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6661,
											"end": 6871,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6661,
											"end": 6871,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6661,
											"end": 6871,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6661,
											"end": 6871,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6661,
											"end": 6871,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6877,
											"end": 7190,
											"name": "tag",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 6877,
											"end": 7190,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6990,
											"end": 6994,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7028,
											"end": 7030,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7017,
											"end": 7026,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7013,
											"end": 7031,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7005,
											"end": 7031,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7005,
											"end": 7031,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7077,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7071,
											"end": 7075,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7067,
											"end": 7087,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7063,
											"end": 7064,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7052,
											"end": 7061,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7048,
											"end": 7065,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7041,
											"end": 7088,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7105,
											"end": 7183,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "278"
										},
										{
											"begin": 7178,
											"end": 7182,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7169,
											"end": 7175,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 7105,
											"end": 7183,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 7105,
											"end": 7183,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7105,
											"end": 7183,
											"name": "tag",
											"source": 11,
											"value": "278"
										},
										{
											"begin": 7105,
											"end": 7183,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7097,
											"end": 7183,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7097,
											"end": 7183,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6877,
											"end": 7190,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6877,
											"end": 7190,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6877,
											"end": 7190,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6877,
											"end": 7190,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6877,
											"end": 7190,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7196,
											"end": 7615,
											"name": "tag",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 7196,
											"end": 7615,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7362,
											"end": 7366,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7400,
											"end": 7402,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7389,
											"end": 7398,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7385,
											"end": 7403,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7377,
											"end": 7403,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7377,
											"end": 7403,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7449,
											"end": 7458,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7443,
											"end": 7447,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7439,
											"end": 7459,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7435,
											"end": 7436,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7424,
											"end": 7433,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7420,
											"end": 7437,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7413,
											"end": 7460,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7477,
											"end": 7608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 7603,
											"end": 7607,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7477,
											"end": 7608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 7477,
											"end": 7608,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7477,
											"end": 7608,
											"name": "tag",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 7477,
											"end": 7608,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7469,
											"end": 7608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7469,
											"end": 7608,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7196,
											"end": 7615,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7196,
											"end": 7615,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7196,
											"end": 7615,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7196,
											"end": 7615,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7621,
											"end": 8040,
											"name": "tag",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 7621,
											"end": 8040,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7787,
											"end": 7791,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7825,
											"end": 7827,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7814,
											"end": 7823,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7810,
											"end": 7828,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7802,
											"end": 7828,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7802,
											"end": 7828,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7874,
											"end": 7883,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7868,
											"end": 7872,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7864,
											"end": 7884,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7860,
											"end": 7861,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7849,
											"end": 7858,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7845,
											"end": 7862,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7838,
											"end": 7885,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7902,
											"end": 8033,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 8028,
											"end": 8032,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7902,
											"end": 8033,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 7902,
											"end": 8033,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7902,
											"end": 8033,
											"name": "tag",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 7902,
											"end": 8033,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7894,
											"end": 8033,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7894,
											"end": 8033,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7621,
											"end": 8040,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7621,
											"end": 8040,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7621,
											"end": 8040,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7621,
											"end": 8040,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8046,
											"end": 8465,
											"name": "tag",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 8046,
											"end": 8465,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8212,
											"end": 8216,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8250,
											"end": 8252,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8239,
											"end": 8248,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8235,
											"end": 8253,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8299,
											"end": 8308,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8293,
											"end": 8297,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8289,
											"end": 8309,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8285,
											"end": 8286,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8274,
											"end": 8283,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8270,
											"end": 8287,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8263,
											"end": 8310,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8327,
											"end": 8458,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "284"
										},
										{
											"begin": 8453,
											"end": 8457,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8327,
											"end": 8458,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 8327,
											"end": 8458,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8327,
											"end": 8458,
											"name": "tag",
											"source": 11,
											"value": "284"
										},
										{
											"begin": 8327,
											"end": 8458,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8319,
											"end": 8458,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8319,
											"end": 8458,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8046,
											"end": 8465,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8046,
											"end": 8465,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8046,
											"end": 8465,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8046,
											"end": 8465,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8471,
											"end": 8890,
											"name": "tag",
											"source": 11,
											"value": "79"
										},
										{
											"begin": 8471,
											"end": 8890,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8637,
											"end": 8641,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8675,
											"end": 8677,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8664,
											"end": 8673,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8660,
											"end": 8678,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8652,
											"end": 8678,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8652,
											"end": 8678,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8724,
											"end": 8733,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8718,
											"end": 8722,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8714,
											"end": 8734,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8710,
											"end": 8711,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8699,
											"end": 8708,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8695,
											"end": 8712,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8688,
											"end": 8735,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8752,
											"end": 8883,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "286"
										},
										{
											"begin": 8878,
											"end": 8882,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8752,
											"end": 8883,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "256"
										},
										{
											"begin": 8752,
											"end": 8883,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8752,
											"end": 8883,
											"name": "tag",
											"source": 11,
											"value": "286"
										},
										{
											"begin": 8752,
											"end": 8883,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8744,
											"end": 8883,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8744,
											"end": 8883,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8471,
											"end": 8890,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8471,
											"end": 8890,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8471,
											"end": 8890,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8471,
											"end": 8890,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8896,
											"end": 9315,
											"name": "tag",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 8896,
											"end": 9315,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9062,
											"end": 9066,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9100,
											"end": 9102,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9089,
											"end": 9098,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9085,
											"end": 9103,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9077,
											"end": 9103,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9077,
											"end": 9103,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9149,
											"end": 9158,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9143,
											"end": 9147,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9139,
											"end": 9159,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9135,
											"end": 9136,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9124,
											"end": 9133,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9120,
											"end": 9137,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9113,
											"end": 9160,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9177,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 9303,
											"end": 9307,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9177,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "261"
										},
										{
											"begin": 9177,
											"end": 9308,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9177,
											"end": 9308,
											"name": "tag",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 9177,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9169,
											"end": 9308,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9169,
											"end": 9308,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8896,
											"end": 9315,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8896,
											"end": 9315,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8896,
											"end": 9315,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8896,
											"end": 9315,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9321,
											"end": 9543,
											"name": "tag",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 9321,
											"end": 9543,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9414,
											"end": 9418,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9452,
											"end": 9454,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9441,
											"end": 9450,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9437,
											"end": 9455,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9429,
											"end": 9455,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9429,
											"end": 9455,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9465,
											"end": 9536,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 9533,
											"end": 9534,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9522,
											"end": 9531,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9518,
											"end": 9535,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9509,
											"end": 9515,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 9465,
											"end": 9536,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "266"
										},
										{
											"begin": 9465,
											"end": 9536,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9465,
											"end": 9536,
											"name": "tag",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 9465,
											"end": 9536,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9321,
											"end": 9543,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 9321,
											"end": 9543,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9321,
											"end": 9543,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9321,
											"end": 9543,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9321,
											"end": 9543,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9630,
											"end": 9729,
											"name": "tag",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 9630,
											"end": 9729,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9682,
											"end": 9688,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9716,
											"end": 9721,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9710,
											"end": 9722,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9700,
											"end": 9722,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9700,
											"end": 9722,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9630,
											"end": 9729,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9630,
											"end": 9729,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9630,
											"end": 9729,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9630,
											"end": 9729,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9735,
											"end": 9904,
											"name": "tag",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 9735,
											"end": 9904,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9819,
											"end": 9830,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9853,
											"end": 9859,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9848,
											"end": 9851,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9841,
											"end": 9860,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9893,
											"end": 9897,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9888,
											"end": 9891,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9884,
											"end": 9898,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9869,
											"end": 9898,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9869,
											"end": 9898,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9735,
											"end": 9904,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 9735,
											"end": 9904,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9735,
											"end": 9904,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9735,
											"end": 9904,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9735,
											"end": 9904,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9910,
											"end": 10058,
											"name": "tag",
											"source": 11,
											"value": "239"
										},
										{
											"begin": 9910,
											"end": 10058,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10012,
											"end": 10023,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10049,
											"end": 10052,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10034,
											"end": 10052,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10034,
											"end": 10052,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9910,
											"end": 10058,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 9910,
											"end": 10058,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9910,
											"end": 10058,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9910,
											"end": 10058,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9910,
											"end": 10058,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10064,
											"end": 10160,
											"name": "tag",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 10064,
											"end": 10160,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10101,
											"end": 10108,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10130,
											"end": 10154,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 10148,
											"end": 10153,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10130,
											"end": 10154,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "298"
										},
										{
											"begin": 10130,
											"end": 10154,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10130,
											"end": 10154,
											"name": "tag",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 10130,
											"end": 10154,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10119,
											"end": 10154,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10119,
											"end": 10154,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10064,
											"end": 10160,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10064,
											"end": 10160,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10064,
											"end": 10160,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10064,
											"end": 10160,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10166,
											"end": 10256,
											"name": "tag",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 10166,
											"end": 10256,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10200,
											"end": 10207,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10243,
											"end": 10248,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10236,
											"end": 10249,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10229,
											"end": 10250,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10218,
											"end": 10250,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10218,
											"end": 10250,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10166,
											"end": 10256,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10166,
											"end": 10256,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10166,
											"end": 10256,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10166,
											"end": 10256,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10262,
											"end": 10411,
											"name": "tag",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 10262,
											"end": 10411,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10298,
											"end": 10305,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10338,
											"end": 10404,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10331,
											"end": 10336,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10327,
											"end": 10405,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 10316,
											"end": 10405,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10316,
											"end": 10405,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10262,
											"end": 10411,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10262,
											"end": 10411,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10262,
											"end": 10411,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10262,
											"end": 10411,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10417,
											"end": 10543,
											"name": "tag",
											"source": 11,
											"value": "298"
										},
										{
											"begin": 10417,
											"end": 10543,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10454,
											"end": 10461,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10494,
											"end": 10536,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10487,
											"end": 10492,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10483,
											"end": 10537,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 10472,
											"end": 10537,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10472,
											"end": 10537,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10417,
											"end": 10543,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10417,
											"end": 10543,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10417,
											"end": 10543,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10417,
											"end": 10543,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10549,
											"end": 10626,
											"name": "tag",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 10549,
											"end": 10626,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10586,
											"end": 10593,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10615,
											"end": 10620,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10604,
											"end": 10620,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10604,
											"end": 10620,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10549,
											"end": 10626,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10549,
											"end": 10626,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10549,
											"end": 10626,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10549,
											"end": 10626,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10632,
											"end": 10939,
											"name": "tag",
											"source": 11,
											"value": "232"
										},
										{
											"begin": 10632,
											"end": 10939,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10700,
											"end": 10701,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "tag",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10724,
											"end": 10730,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10721,
											"end": 10722,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10718,
											"end": 10731,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10809,
											"end": 10810,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10804,
											"end": 10807,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10800,
											"end": 10811,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10794,
											"end": 10812,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10790,
											"end": 10791,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10785,
											"end": 10788,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10781,
											"end": 10792,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10774,
											"end": 10813,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10746,
											"end": 10748,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10743,
											"end": 10744,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10739,
											"end": 10749,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10734,
											"end": 10749,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10734,
											"end": 10749,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "tag",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 10710,
											"end": 10823,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10841,
											"end": 10847,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10838,
											"end": 10839,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10835,
											"end": 10848,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 10832,
											"end": 10933,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10832,
											"end": 10933,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 10832,
											"end": 10933,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10921,
											"end": 10922,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10912,
											"end": 10918,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10907,
											"end": 10910,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10903,
											"end": 10919,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10896,
											"end": 10923,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10832,
											"end": 10933,
											"name": "tag",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 10832,
											"end": 10933,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10681,
											"end": 10939,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10632,
											"end": 10939,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10632,
											"end": 10939,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10632,
											"end": 10939,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10632,
											"end": 10939,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10945,
											"end": 11265,
											"name": "tag",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 10945,
											"end": 11265,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10989,
											"end": 10995,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11026,
											"end": 11027,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 11020,
											"end": 11024,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11016,
											"end": 11028,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 11006,
											"end": 11028,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11006,
											"end": 11028,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11073,
											"end": 11074,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 11067,
											"end": 11071,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11063,
											"end": 11075,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 11094,
											"end": 11112,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11084,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 11084,
											"end": 11165,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 11150,
											"end": 11154,
											"name": "PUSH",
											"source": 11,
											"value": "7F"
										},
										{
											"begin": 11142,
											"end": 11148,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11138,
											"end": 11155,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 11128,
											"end": 11155,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11128,
											"end": 11155,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11084,
											"end": 11165,
											"name": "tag",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 11084,
											"end": 11165,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11212,
											"end": 11214,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11204,
											"end": 11210,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11201,
											"end": 11215,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 11181,
											"end": 11199,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11178,
											"end": 11216,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 11175,
											"end": 11259,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 11175,
											"end": 11259,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 11175,
											"end": 11259,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 11231,
											"end": 11249,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 11231,
											"end": 11249,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 11231,
											"end": 11249,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 11231,
											"end": 11249,
											"name": "tag",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 11231,
											"end": 11249,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11175,
											"end": 11259,
											"name": "tag",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 11175,
											"end": 11259,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10996,
											"end": 11265,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10945,
											"end": 11265,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10945,
											"end": 11265,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10945,
											"end": 11265,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10945,
											"end": 11265,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 11271,
											"end": 11451,
											"name": "tag",
											"source": 11,
											"value": "148"
										},
										{
											"begin": 11271,
											"end": 11451,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11319,
											"end": 11396,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11316,
											"end": 11317,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11309,
											"end": 11397,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11416,
											"end": 11420,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 11413,
											"end": 11414,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 11406,
											"end": 11421,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11440,
											"end": 11444,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 11437,
											"end": 11438,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11430,
											"end": 11445,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 11457,
											"end": 11637,
											"name": "tag",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 11457,
											"end": 11637,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11505,
											"end": 11582,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11502,
											"end": 11503,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11495,
											"end": 11583,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11602,
											"end": 11606,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 11599,
											"end": 11600,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 11592,
											"end": 11607,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11626,
											"end": 11630,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 11623,
											"end": 11624,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11616,
											"end": 11631,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 11643,
											"end": 11823,
											"name": "tag",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 11643,
											"end": 11823,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11691,
											"end": 11768,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11688,
											"end": 11689,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11788,
											"end": 11792,
											"name": "PUSH",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 11785,
											"end": 11786,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 11778,
											"end": 11793,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11812,
											"end": 11816,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 11809,
											"end": 11810,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11802,
											"end": 11817,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 11952,
											"end": 12069,
											"name": "tag",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 11952,
											"end": 12069,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12061,
											"end": 12062,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12058,
											"end": 12059,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12051,
											"end": 12063,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 12075,
											"end": 12177,
											"name": "tag",
											"source": 11,
											"value": "234"
										},
										{
											"begin": 12075,
											"end": 12177,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12116,
											"end": 12122,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12167,
											"end": 12169,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 12163,
											"end": 12170,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 12158,
											"end": 12160,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 12151,
											"end": 12156,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12147,
											"end": 12161,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12143,
											"end": 12171,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12133,
											"end": 12171,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12133,
											"end": 12171,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12075,
											"end": 12177,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12075,
											"end": 12177,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12075,
											"end": 12177,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12075,
											"end": 12177,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 12183,
											"end": 12358,
											"name": "tag",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 12183,
											"end": 12358,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12323,
											"end": 12350,
											"name": "PUSH",
											"source": 11,
											"value": "4552433732313A20617070726F766520746F2063616C6C657200000000000000"
										},
										{
											"begin": 12319,
											"end": 12320,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12311,
											"end": 12317,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12307,
											"end": 12321,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12300,
											"end": 12351,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12183,
											"end": 12358,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12183,
											"end": 12358,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 12364,
											"end": 12592,
											"name": "tag",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 12364,
											"end": 12592,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12504,
											"end": 12538,
											"name": "PUSH",
											"source": 11,
											"value": "4552433732313A2061646472657373207A65726F206973206E6F742061207661"
										},
										{
											"begin": 12500,
											"end": 12501,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12492,
											"end": 12498,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12488,
											"end": 12502,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12481,
											"end": 12539,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12573,
											"end": 12584,
											"name": "PUSH",
											"source": 11,
											"value": "6C6964206F776E65720000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12568,
											"end": 12570,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 12560,
											"end": 12566,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12556,
											"end": 12571,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12549,
											"end": 12585,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12364,
											"end": 12592,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12364,
											"end": 12592,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 12598,
											"end": 12772,
											"name": "tag",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 12598,
											"end": 12772,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12738,
											"end": 12764,
											"name": "PUSH",
											"source": 11,
											"value": "4552433732313A20696E76616C696420746F6B656E2049440000000000000000"
										},
										{
											"begin": 12734,
											"end": 12735,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12726,
											"end": 12732,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12722,
											"end": 12736,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12715,
											"end": 12765,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12598,
											"end": 12772,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12598,
											"end": 12772,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 12778,
											"end": 12998,
											"name": "tag",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 12778,
											"end": 12998,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12918,
											"end": 12952,
											"name": "PUSH",
											"source": 11,
											"value": "4552433732313A20617070726F76616C20746F2063757272656E74206F776E65"
										},
										{
											"begin": 12914,
											"end": 12915,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12906,
											"end": 12912,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12902,
											"end": 12916,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12895,
											"end": 12953,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12987,
											"end": 12990,
											"name": "PUSH",
											"source": 11,
											"value": "7200000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12982,
											"end": 12984,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 12974,
											"end": 12980,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12970,
											"end": 12985,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12963,
											"end": 12991,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12778,
											"end": 12998,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12778,
											"end": 12998,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13004,
											"end": 13252,
											"name": "tag",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 13004,
											"end": 13252,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13144,
											"end": 13178,
											"name": "PUSH",
											"source": 11,
											"value": "4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F"
										},
										{
											"begin": 13140,
											"end": 13141,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13132,
											"end": 13138,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13128,
											"end": 13142,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13121,
											"end": 13179,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13213,
											"end": 13244,
											"name": "PUSH",
											"source": 11,
											"value": "6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000"
										},
										{
											"begin": 13208,
											"end": 13210,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 13200,
											"end": 13206,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13196,
											"end": 13211,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13189,
											"end": 13245,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13004,
											"end": 13252,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13004,
											"end": 13252,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13258,
											"end": 13380,
											"name": "tag",
											"source": 11,
											"value": "176"
										},
										{
											"begin": 13258,
											"end": 13380,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13331,
											"end": 13355,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 13349,
											"end": 13354,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13331,
											"end": 13355,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 13331,
											"end": 13355,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 13331,
											"end": 13355,
											"name": "tag",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 13331,
											"end": 13355,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13324,
											"end": 13329,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13321,
											"end": 13356,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 13311,
											"end": 13374,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 13311,
											"end": 13374,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13370,
											"end": 13371,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13367,
											"end": 13368,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13360,
											"end": 13372,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 13311,
											"end": 13374,
											"name": "tag",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 13311,
											"end": 13374,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13258,
											"end": 13380,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13258,
											"end": 13380,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13386,
											"end": 13502,
											"name": "tag",
											"source": 11,
											"value": "180"
										},
										{
											"begin": 13386,
											"end": 13502,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13456,
											"end": 13477,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "330"
										},
										{
											"begin": 13471,
											"end": 13476,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13456,
											"end": 13477,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 13456,
											"end": 13477,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 13456,
											"end": 13477,
											"name": "tag",
											"source": 11,
											"value": "330"
										},
										{
											"begin": 13456,
											"end": 13477,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13449,
											"end": 13454,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13446,
											"end": 13478,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 13436,
											"end": 13496,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 13436,
											"end": 13496,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13492,
											"end": 13493,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13489,
											"end": 13490,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13482,
											"end": 13494,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 13436,
											"end": 13496,
											"name": "tag",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 13436,
											"end": 13496,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13386,
											"end": 13502,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13386,
											"end": 13502,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13508,
											"end": 13628,
											"name": "tag",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 13508,
											"end": 13628,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13580,
											"end": 13603,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 13597,
											"end": 13602,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13580,
											"end": 13603,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 13580,
											"end": 13603,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 13580,
											"end": 13603,
											"name": "tag",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 13580,
											"end": 13603,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13573,
											"end": 13578,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13570,
											"end": 13604,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 13560,
											"end": 13622,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "334"
										},
										{
											"begin": 13560,
											"end": 13622,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13618,
											"end": 13619,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13615,
											"end": 13616,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13608,
											"end": 13620,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 13560,
											"end": 13622,
											"name": "tag",
											"source": 11,
											"value": "334"
										},
										{
											"begin": 13560,
											"end": 13622,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13508,
											"end": 13628,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13508,
											"end": 13628,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13634,
											"end": 13756,
											"name": "tag",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 13634,
											"end": 13756,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13707,
											"end": 13731,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "336"
										},
										{
											"begin": 13725,
											"end": 13730,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13707,
											"end": 13731,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 13707,
											"end": 13731,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 13707,
											"end": 13731,
											"name": "tag",
											"source": 11,
											"value": "336"
										},
										{
											"begin": 13707,
											"end": 13731,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13700,
											"end": 13705,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13697,
											"end": 13732,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 13687,
											"end": 13750,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 13687,
											"end": 13750,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13746,
											"end": 13747,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13743,
											"end": 13744,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13736,
											"end": 13748,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 13687,
											"end": 13750,
											"name": "tag",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 13687,
											"end": 13750,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13634,
											"end": 13756,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13634,
											"end": 13756,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":\"ERC721Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol\":{\"keccak256\":\"0x4103b6e9e629864e093910386581eee804d81dc1f13422f4d47b55bb1cc9e6ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2319033f1ea1e031222c37e895ca0d4ce2680e38b8fd7b30f59c048be89d455c\",\"dweb:/ipfs/QmeRJPdAPP1k7PuA3izs6jhffUw4bkHxAejfGzcuVkbWtY\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc3c6a456dba727d8dd9fd33420febede490abb49a07469f61d2a3ace66a95a\",\"dweb:/ipfs/QmVAWtEVj7K5AbvgJa9Dz22KiDq9eoptCjnVZqsTMtKXyd\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x7afb36235d7420f684c0c1ee0954db56c431351a1a995f2dd4b632ac414b0313\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc7a03d440dca8f065d082e3d9f2eb3a49e2fa2ad07ccee00dff3149c3469ee7\",\"dweb:/ipfs/Qmf1kczWkyT1iX6UgHWg8xq2qKA4LoTEc3uddW2JPU9U1j\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ffbd627e6958983d288801acdedbf3491ee0ebf1a430338bce47c96481ce9e3\",\"dweb:/ipfs/QmUM1vpmNgBV34sYf946SthDJNGhwwqjoRggmj4TUUQmdB\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://187b5c3a1c9e77678732a2cc5284237f9cfca6bc28ee8bc0a0f4f951d7b3a2f8\",\"dweb:/ipfs/Qmb2KFr7WuQu7btdCiftQG64vTzrG4UyzVmo53EYHcnHYA\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7\",\"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4\",\"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1516,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1735,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "51",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 197,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "101",
								"type": "t_string_storage"
							},
							{
								"astId": 199,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "102",
								"type": "t_string_storage"
							},
							{
								"astId": 203,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "_owners",
								"offset": 0,
								"slot": "103",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 207,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "104",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 211,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "105",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 217,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "106",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							},
							{
								"astId": 1061,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol:ERC721Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "107",
								"type": "t_array(t_uint256)44_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)44_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[44]",
								"numberOfBytes": "1408"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
				"IERC721ReceiverUpgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":\"IERC721ReceiverUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc3c6a456dba727d8dd9fd33420febede490abb49a07469f61d2a3ace66a95a\",\"dweb:/ipfs/QmVAWtEVj7K5AbvgJa9Dz22KiDq9eoptCjnVZqsTMtKXyd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
				"IERC721Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":\"IERC721Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x7afb36235d7420f684c0c1ee0954db56c431351a1a995f2dd4b632ac414b0313\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc7a03d440dca8f065d082e3d9f2eb3a49e2fa2ad07ccee00dff3149c3469ee7\",\"dweb:/ipfs/Qmf1kczWkyT1iX6UgHWg8xq2qKA4LoTEc3uddW2JPU9U1j\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
				"IERC721MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":\"IERC721MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x7afb36235d7420f684c0c1ee0954db56c431351a1a995f2dd4b632ac414b0313\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc7a03d440dca8f065d082e3d9f2eb3a49e2fa2ad07ccee00dff3149c3469ee7\",\"dweb:/ipfs/Qmf1kczWkyT1iX6UgHWg8xq2qKA4LoTEc3uddW2JPU9U1j\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ffbd627e6958983d288801acdedbf3491ee0ebf1a430338bce47c96481ce9e3\",\"dweb:/ipfs/QmUM1vpmNgBV34sYf946SthDJNGhwwqjoRggmj4TUUQmdB\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:8281  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:8281  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220dfe74c66b4899cfc05c49d193bc89ca8553c87aa3cb2139a2cb753853a875f7764736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dfe74c66b4899cfc05c49d193bc89ca8553c87aa3cb2139a2cb753853a875f7764736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF 0xE7 0x4C PUSH7 0xB4899CFC05C49D NOT EXTCODESIZE 0xC8 SWAP13 0xA8 SSTORE EXTCODECOPY DUP8 0xAA EXTCODECOPY 0xB2 SGT SWAP11 0x2C 0xB7 MSTORE8 DUP6 GASPRICE DUP8 0x5F PUSH24 0x64736F6C6343000807003300000000000000000000000000 ",
							"sourceMap": "194:8087:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dfe74c66b4899cfc05c49d193bc89ca8553c87aa3cb2139a2cb753853a875f7764736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF 0xE7 0x4C PUSH7 0xB4899CFC05C49D NOT EXTCODESIZE 0xC8 SWAP13 0xA8 SSTORE EXTCODECOPY DUP8 0xAA EXTCODECOPY 0xB2 SGT SWAP11 0x2C 0xB7 MSTORE8 DUP6 GASPRICE DUP8 0x5F PUSH24 0x64736F6C6343000807003300000000000000000000000000 ",
							"sourceMap": "194:8087:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dfe74c66b4899cfc05c49d193bc89ca8553c87aa3cb2139a2cb753853a875f7764736f6c63430008070033",
									".code": [
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1516,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
				"StringsUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":199:2297  library StringsUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":199:2297  library StringsUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d8f6a5929bec886da1881698bf5baf041b08edbc7c389c6f50f31ed7d84a951264736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d8f6a5929bec886da1881698bf5baf041b08edbc7c389c6f50f31ed7d84a951264736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xF6 0xA5 SWAP3 SWAP12 0xEC DUP9 PUSH14 0xA1881698BF5BAF041B08EDBC7C38 SWAP13 PUSH16 0x50F31ED7D84A951264736F6C63430008 SMOD STOP CALLER ",
							"sourceMap": "199:2098:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d8f6a5929bec886da1881698bf5baf041b08edbc7c389c6f50f31ed7d84a951264736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xF6 0xA5 SWAP3 SWAP12 0xEC DUP9 PUSH14 0xA1881698BF5BAF041B08EDBC7C38 SWAP13 PUSH16 0x50F31ED7D84A951264736F6C63430008 SMOD STOP CALLER ",
							"sourceMap": "199:2098:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 199,
									"end": 2297,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d8f6a5929bec886da1881698bf5baf041b08edbc7c389c6f50f31ed7d84a951264736f6c63430008070033",
									".code": [
										{
											"begin": 199,
											"end": 2297,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 199,
											"end": 2297,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 199,
											"end": 2297,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 199,
											"end": 2297,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 199,
											"end": 2297,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 199,
											"end": 2297,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 199,
											"end": 2297,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 199,
											"end": 2297,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 199,
											"end": 2297,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://187b5c3a1c9e77678732a2cc5284237f9cfca6bc28ee8bc0a0f4f951d7b3a2f8\",\"dweb:/ipfs/Qmb2KFr7WuQu7btdCiftQG64vTzrG4UyzVmo53EYHcnHYA\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4\",\"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
				"ERC165Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7\",\"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw\"]},\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1735,
								"contract": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
				"IERC165Upgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
				"MathUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":202:12515  library MathUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":202:12515  library MathUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b6776e6b1591a52eafbc5684be13713e4f8374b07860fd8c66443910aac17a9764736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b6776e6b1591a52eafbc5684be13713e4f8374b07860fd8c66443910aac17a9764736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 PUSH24 0x6E6B1591A52EAFBC5684BE13713E4F8374B07860FD8C6644 CODECOPY LT 0xAA 0xC1 PUSH27 0x9764736F6C63430008070033000000000000000000000000000000 ",
							"sourceMap": "202:12313:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b6776e6b1591a52eafbc5684be13713e4f8374b07860fd8c66443910aac17a9764736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 PUSH24 0x6E6B1591A52EAFBC5684BE13713E4F8374B07860FD8C6644 CODECOPY LT 0xAA 0xC1 PUSH27 0x9764736F6C63430008070033000000000000000000000000000000 ",
							"sourceMap": "202:12313:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum MathUpgradeable.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b6776e6b1591a52eafbc5684be13713e4f8374b07860fd8c66443910aac17a9764736f6c63430008070033",
									".code": [
										{
											"begin": 202,
											"end": 12515,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4\",\"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1475
						],
						"Initializable": [
							168
						]
					},
					"id": 169,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:0"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 169,
							"sourceUnit": 1476,
							"src": "138:44:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "184:2198:0",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 168,
							"linearizedBaseContracts": [
								168
							],
							"name": "Initializable",
							"nameLocation": "2401:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 4,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:0",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 6,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 168,
									"src": "2535:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 5,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:0",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 9,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 168,
									"src": "2664:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 8,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:0",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"id": 14,
									"name": "Initialized",
									"nameLocation": "2798:11:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "2810:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 11,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:0"
									},
									"src": "2792:33:0"
								},
								{
									"body": {
										"id": 69,
										"nodeType": "Block",
										"src": "3258:483:0",
										"statements": [
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3273:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 69,
														"src": "3268:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 17,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3268:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 21,
												"initialValue": {
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3290:14:0",
													"subExpression": {
														"id": 19,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "3291:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3268:36:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 27,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 23,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 18,
																			"src": "3336:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 26,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 24,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 6,
																				"src": "3354:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 25,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3369:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3354:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3336:34:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 28,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3335:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 36,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3376:45:0",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 33,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3415:4:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$168",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$168",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 32,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3407:7:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 31,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3407:7:0",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 34,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3407:13:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 29,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1475,
																						"src": "3377:18:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1475_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 30,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1209,
																					"src": "3377:29:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 35,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3377:44:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 39,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 37,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 6,
																				"src": "3425:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 38,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3441:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3425:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3376:66:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 41,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3375:68:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3335:108:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 43,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3457:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 22,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3314:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 44,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:201:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 45,
												"nodeType": "ExpressionStatement",
												"src": "3314:201:0"
											},
											{
												"expression": {
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 46,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "3525:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 47,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3540:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3525:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "3525:16:0"
											},
											{
												"condition": {
													"id": 50,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 18,
													"src": "3555:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 56,
												"nodeType": "IfStatement",
												"src": "3551:65:0",
												"trueBody": {
													"id": 55,
													"nodeType": "Block",
													"src": "3571:45:0",
													"statements": [
														{
															"expression": {
																"id": 53,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 51,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "3585:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 52,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3601:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3585:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 54,
															"nodeType": "ExpressionStatement",
															"src": "3585:20:0"
														}
													]
												}
											},
											{
												"id": 57,
												"nodeType": "PlaceholderStatement",
												"src": "3625:1:0"
											},
											{
												"condition": {
													"id": 58,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 18,
													"src": "3640:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 68,
												"nodeType": "IfStatement",
												"src": "3636:99:0",
												"trueBody": {
													"id": 67,
													"nodeType": "Block",
													"src": "3656:79:0",
													"statements": [
														{
															"expression": {
																"id": 61,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 59,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "3670:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 60,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3686:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3670:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 62,
															"nodeType": "ExpressionStatement",
															"src": "3670:21:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 64,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3722:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 63,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 14,
																	"src": "3710:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 65,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3710:14:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 66,
															"nodeType": "EmitStatement",
															"src": "3705:19:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "2831:399:0",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."
									},
									"id": 70,
									"name": "initializer",
									"nameLocation": "3244:11:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3255:2:0"
									},
									"src": "3235:506:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "4852:255:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 81,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4870:14:0",
																"subExpression": {
																	"id": 76,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "4871:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 80,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 78,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 6,
																	"src": "4888:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 79,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 73,
																	"src": "4903:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4888:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4870:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 75,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4862:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 83,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4862:99:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 84,
												"nodeType": "ExpressionStatement",
												"src": "4862:99:0"
											},
											{
												"expression": {
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 85,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "4971:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 86,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 73,
														"src": "4986:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4971:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 88,
												"nodeType": "ExpressionStatement",
												"src": "4971:22:0"
											},
											{
												"expression": {
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 89,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "5003:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 90,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5019:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5003:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 92,
												"nodeType": "ExpressionStatement",
												"src": "5003:20:0"
											},
											{
												"id": 93,
												"nodeType": "PlaceholderStatement",
												"src": "5033:1:0"
											},
											{
												"expression": {
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 94,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "5044:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 95,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5060:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5044:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 97,
												"nodeType": "ExpressionStatement",
												"src": "5044:21:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 99,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 73,
															"src": "5092:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 98,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "5080:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5080:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "5075:25:0"
											}
										]
									},
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "3747:1062:0",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 103,
									"name": "reinitializer",
									"nameLocation": "4823:13:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4843:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "4837:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 72,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4837:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4836:15:0"
									},
									"src": "4814:293:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 112,
										"nodeType": "Block",
										"src": "5345:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 107,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "5363:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5378:45:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 106,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5355:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5355:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 110,
												"nodeType": "ExpressionStatement",
												"src": "5355:69:0"
											},
											{
												"id": 111,
												"nodeType": "PlaceholderStatement",
												"src": "5434:1:0"
											}
										]
									},
									"documentation": {
										"id": 104,
										"nodeType": "StructuredDocumentation",
										"src": "5113:199:0",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 113,
									"name": "onlyInitializing",
									"nameLocation": "5326:16:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5342:2:0"
									},
									"src": "5317:125:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 148,
										"nodeType": "Block",
										"src": "5977:230:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "5995:14:0",
															"subExpression": {
																"id": 118,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "5996:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 120,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6011:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 117,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5987:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5987:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 122,
												"nodeType": "ExpressionStatement",
												"src": "5987:66:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 123,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "6067:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6087:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 125,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "6087:5:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 124,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "6082:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6082:11:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 128,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "6082:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "6067:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 147,
												"nodeType": "IfStatement",
												"src": "6063:138:0",
												"trueBody": {
													"id": 146,
													"nodeType": "Block",
													"src": "6099:102:0",
													"statements": [
														{
															"expression": {
																"id": 136,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 130,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 6,
																	"src": "6113:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 133,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6133:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 132,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "6133:5:0",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 131,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "6128:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6128:11:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "6128:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6113:30:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 137,
															"nodeType": "ExpressionStatement",
															"src": "6113:30:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 141,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6179:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 140,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "6179:5:0",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 139,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "6174:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 142,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6174:11:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 143,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "6174:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 138,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 14,
																	"src": "6162:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6162:28:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 145,
															"nodeType": "EmitStatement",
															"src": "6157:33:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "5448:475:0",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 149,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5937:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5957:2:0"
									},
									"returnParameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5977:0:0"
									},
									"scope": 168,
									"src": "5928:279:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 157,
										"nodeType": "Block",
										"src": "6384:36:0",
										"statements": [
											{
												"expression": {
													"id": 155,
													"name": "_initialized",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 6,
													"src": "6401:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 154,
												"id": 156,
												"nodeType": "Return",
												"src": "6394:19:0"
											}
										]
									},
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "6213:102:0",
										"text": " @dev Internal function that returns the initialized version. Returns `_initialized`"
									},
									"id": 158,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "6329:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6351:2:0"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "6377:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 152,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6377:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6376:7:0"
									},
									"scope": 168,
									"src": "6320:100:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "6590:37:0",
										"statements": [
											{
												"expression": {
													"id": 164,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 9,
													"src": "6607:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 163,
												"id": 165,
												"nodeType": "Return",
												"src": "6600:20:0"
											}
										]
									},
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "6426:103:0",
										"text": " @dev Internal function that returns the initialized version. Returns `_initializing`"
									},
									"id": 167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "6543:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6558:2:0"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "6584:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 161,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6584:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6583:6:0"
									},
									"scope": 168,
									"src": "6534:93:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 169,
							"src": "2383:4246:0",
							"usedErrors": []
						}
					],
					"src": "113:6517:0"
				},
				"id": 0
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721UpgradeableALTERED.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1475
						],
						"ContextUpgradeable": [
							1517
						],
						"ERC165Upgradeable": [
							1736
						],
						"ERC721Upgradeable": [
							1062
						],
						"IERC165Upgradeable": [
							1748
						],
						"IERC721MetadataUpgradeable": [
							1191
						],
						"IERC721ReceiverUpgradeable": [
							1080
						],
						"IERC721Upgradeable": [
							1164
						],
						"Initializable": [
							168
						],
						"MathUpgradeable": [
							2613
						],
						"StringsUpgradeable": [
							1692
						]
					},
					"id": 1063,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 170,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:1"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
							"file": "./IERC721Upgradeable.sol",
							"id": 171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1063,
							"sourceUnit": 1165,
							"src": "132:34:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol",
							"file": "./IERC721ReceiverUpgradeable.sol",
							"id": 172,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1063,
							"sourceUnit": 1081,
							"src": "167:42:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol",
							"file": "./extensions/IERC721MetadataUpgradeable.sol",
							"id": 173,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1063,
							"sourceUnit": 1192,
							"src": "210:53:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 174,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1063,
							"sourceUnit": 1476,
							"src": "264:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 175,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1063,
							"sourceUnit": 1518,
							"src": "309:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol",
							"file": "../../utils/StringsUpgradeable.sol",
							"id": 176,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1063,
							"sourceUnit": 1693,
							"src": "354:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
							"file": "../../utils/introspection/ERC165Upgradeable.sol",
							"id": 177,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1063,
							"sourceUnit": 1737,
							"src": "399:57:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 178,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1063,
							"sourceUnit": 169,
							"src": "457:45:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 180,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 168,
										"src": "781:13:1"
									},
									"id": 181,
									"nodeType": "InheritanceSpecifier",
									"src": "781:13:1"
								},
								{
									"baseName": {
										"id": 182,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1517,
										"src": "796:18:1"
									},
									"id": 183,
									"nodeType": "InheritanceSpecifier",
									"src": "796:18:1"
								},
								{
									"baseName": {
										"id": 184,
										"name": "ERC165Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1736,
										"src": "816:17:1"
									},
									"id": 185,
									"nodeType": "InheritanceSpecifier",
									"src": "816:17:1"
								},
								{
									"baseName": {
										"id": 186,
										"name": "IERC721Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1164,
										"src": "835:18:1"
									},
									"id": 187,
									"nodeType": "InheritanceSpecifier",
									"src": "835:18:1"
								},
								{
									"baseName": {
										"id": 188,
										"name": "IERC721MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1191,
										"src": "855:26:1"
									},
									"id": 189,
									"nodeType": "InheritanceSpecifier",
									"src": "855:26:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 179,
								"nodeType": "StructuredDocumentation",
								"src": "504:246:1",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
							},
							"fullyImplemented": true,
							"id": 1062,
							"linearizedBaseContracts": [
								1062,
								1191,
								1164,
								1736,
								1748,
								1517,
								168
							],
							"name": "ERC721Upgradeable",
							"nameLocation": "760:17:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 192,
									"libraryName": {
										"id": 190,
										"name": "AddressUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1475,
										"src": "894:18:1"
									},
									"nodeType": "UsingForDirective",
									"src": "888:37:1",
									"typeName": {
										"id": 191,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "917:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"id": 195,
									"libraryName": {
										"id": 193,
										"name": "StringsUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1692,
										"src": "936:18:1"
									},
									"nodeType": "UsingForDirective",
									"src": "930:37:1",
									"typeName": {
										"id": 194,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "959:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 197,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1006:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 1062,
									"src": "991:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 196,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "991:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 199,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1053:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 1062,
									"src": "1038:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 198,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1038:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 203,
									"mutability": "mutable",
									"name": "_owners",
									"nameLocation": "1149:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 1062,
									"src": "1113:43:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 202,
										"keyType": {
											"id": 200,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1121:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1113:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 201,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1132:7:1",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 207,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1243:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 1062,
									"src": "1207:45:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 206,
										"keyType": {
											"id": 204,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1215:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1207:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 205,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1226:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 211,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "1344:15:1",
									"nodeType": "VariableDeclaration",
									"scope": 1062,
									"src": "1308:51:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 210,
										"keyType": {
											"id": 208,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1308:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 209,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1327:7:1",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 217,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "1467:18:1",
									"nodeType": "VariableDeclaration",
									"scope": 1062,
									"src": "1414:71:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 216,
										"keyType": {
											"id": 212,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1422:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1414:44:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 215,
											"keyType": {
												"id": 213,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1441:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1433:24:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 214,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1452:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 232,
										"nodeType": "Block",
										"src": "1698:56:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 228,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 220,
															"src": "1732:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 229,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 222,
															"src": "1739:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 227,
														"name": "__ERC721_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 251,
														"src": "1708:23:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1708:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 231,
												"nodeType": "ExpressionStatement",
												"src": "1708:39:1"
											}
										]
									},
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "1492:108:1",
										"text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
									},
									"id": 233,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 225,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 224,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "1681:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "1681:16:1"
										}
									],
									"name": "__ERC721_init",
									"nameLocation": "1614:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1642:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1628:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 219,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1628:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1663:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1649:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 221,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1649:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1627:44:1"
									},
									"returnParameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1698:0:1"
									},
									"scope": 1062,
									"src": "1605:149:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 250,
										"nodeType": "Block",
										"src": "1863:57:1",
										"statements": [
											{
												"expression": {
													"id": 244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 242,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 197,
														"src": "1873:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 243,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 235,
														"src": "1881:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1873:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 245,
												"nodeType": "ExpressionStatement",
												"src": "1873:13:1"
											},
											{
												"expression": {
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 246,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 199,
														"src": "1896:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 247,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 237,
														"src": "1906:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1896:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 249,
												"nodeType": "ExpressionStatement",
												"src": "1896:17:1"
											}
										]
									},
									"id": 251,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 240,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 239,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "1846:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "1846:16:1"
										}
									],
									"name": "__ERC721_init_unchained",
									"nameLocation": "1769:23:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1807:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "1793:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 234,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1793:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1828:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "1814:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 236,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1814:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1792:44:1"
									},
									"returnParameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1863:0:1"
									},
									"scope": 1062,
									"src": "1760:160:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1730,
										1747
									],
									"body": {
										"id": 281,
										"nodeType": "Block",
										"src": "2117:214:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 274,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 262,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 254,
																"src": "2146:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 264,
																			"name": "IERC721Upgradeable",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1164,
																			"src": "2166:18:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Upgradeable_$1164_$",
																				"typeString": "type(contract IERC721Upgradeable)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Upgradeable_$1164_$",
																				"typeString": "type(contract IERC721Upgradeable)"
																			}
																		],
																		"id": 263,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "2161:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 265,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2161:24:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Upgradeable_$1164",
																		"typeString": "type(contract IERC721Upgradeable)"
																	}
																},
																"id": 266,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "2161:36:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "2146:51:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 268,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 254,
																"src": "2213:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 270,
																			"name": "IERC721MetadataUpgradeable",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1191,
																			"src": "2233:26:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721MetadataUpgradeable_$1191_$",
																				"typeString": "type(contract IERC721MetadataUpgradeable)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721MetadataUpgradeable_$1191_$",
																				"typeString": "type(contract IERC721MetadataUpgradeable)"
																			}
																		],
																		"id": 269,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "2228:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2228:32:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721MetadataUpgradeable_$1191",
																		"typeString": "type(contract IERC721MetadataUpgradeable)"
																	}
																},
																"id": 272,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "2228:44:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "2213:59:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "2146:126:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 277,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 254,
																"src": "2312:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 275,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2288:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721Upgradeable_$1062_$",
																	"typeString": "type(contract super ERC721Upgradeable)"
																}
															},
															"id": 276,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1730,
															"src": "2288:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 278,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2288:36:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2146:178:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 261,
												"id": 280,
												"nodeType": "Return",
												"src": "2127:197:1"
											}
										]
									},
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "1926:56:1",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "1996:17:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 258,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 256,
												"name": "ERC165Upgradeable",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1736,
												"src": "2063:17:1"
											},
											{
												"id": 257,
												"name": "IERC165Upgradeable",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1748,
												"src": "2082:18:1"
											}
										],
										"src": "2054:47:1"
									},
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2021:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "2014:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 253,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2014:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2013:20:1"
									},
									"returnParameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "2111:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 259,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2111:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2110:6:1"
									},
									"scope": 1062,
									"src": "1987:344:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1121
									],
									"body": {
										"id": 305,
										"nodeType": "Block",
										"src": "2471:123:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 292,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 285,
																"src": "2489:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 295,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2506:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2498:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 293,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2498:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 296,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2498:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2489:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572",
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2510:43:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																"typeString": "literal_string \"ERC721: address zero is not a valid owner\""
															},
															"value": "ERC721: address zero is not a valid owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
																"typeString": "literal_string \"ERC721: address zero is not a valid owner\""
															}
														],
														"id": 291,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2481:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2481:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 300,
												"nodeType": "ExpressionStatement",
												"src": "2481:73:1"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 301,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 207,
														"src": "2571:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 303,
													"indexExpression": {
														"id": 302,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 285,
														"src": "2581:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2571:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 290,
												"id": 304,
												"nodeType": "Return",
												"src": "2564:23:1"
											}
										]
									},
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "2337:48:1",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2399:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 287,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2444:8:1"
									},
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2417:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "2409:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2409:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2408:15:1"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "2462:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2461:9:1"
									},
									"scope": 1062,
									"src": "2390:204:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1129
									],
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "2732:138:1",
										"statements": [
											{
												"assignments": [
													316
												],
												"declarations": [
													{
														"constant": false,
														"id": 316,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "2750:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 333,
														"src": "2742:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 315,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2742:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 320,
												"initialValue": {
													"arguments": [
														{
															"id": 318,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "2767:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 317,
														"name": "_ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "2758:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2758:17:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2742:33:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 322,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 316,
																"src": "2793:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 325,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2810:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2802:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 323,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2802:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 326,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2802:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2793:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
															"id": 328,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2814:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															},
															"value": "ERC721: invalid token ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															}
														],
														"id": 321,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2785:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2785:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "2785:56:1"
											},
											{
												"expression": {
													"id": 331,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 316,
													"src": "2858:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 314,
												"id": 332,
												"nodeType": "Return",
												"src": "2851:12:1"
											}
										]
									},
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "2600:46:1",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "2660:7:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 311,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2705:8:1"
									},
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2676:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "2668:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:17:1"
									},
									"returnParameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "2723:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 312,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2723:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2722:9:1"
									},
									"scope": 1062,
									"src": "2651:219:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1176
									],
									"body": {
										"id": 343,
										"nodeType": "Block",
										"src": "3001:29:1",
										"statements": [
											{
												"expression": {
													"id": 341,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 197,
													"src": "3018:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 340,
												"id": 342,
												"nodeType": "Return",
												"src": "3011:12:1"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "2876:51:1",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2941:4:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 337,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2968:8:1"
									},
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2945:2:1"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2986:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 338,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2986:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:15:1"
									},
									"scope": 1062,
									"src": "2932:98:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1182
									],
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "3165:31:1",
										"statements": [
											{
												"expression": {
													"id": 351,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 199,
													"src": "3182:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 350,
												"id": 352,
												"nodeType": "Return",
												"src": "3175:14:1"
											}
										]
									},
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "3036:53:1",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3103:6:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 347,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3132:8:1"
									},
									"parameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3109:2:1"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3150:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3150:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3149:15:1"
									},
									"scope": 1062,
									"src": "3094:102:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1190
									],
									"body": {
										"id": 392,
										"nodeType": "Block",
										"src": "3350:188:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 364,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "3375:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 363,
														"name": "_requireMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 935,
														"src": "3360:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
															"typeString": "function (uint256) view"
														}
													},
													"id": 365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3360:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 366,
												"nodeType": "ExpressionStatement",
												"src": "3360:23:1"
											},
											{
												"assignments": [
													368
												],
												"declarations": [
													{
														"constant": false,
														"id": 368,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "3408:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 392,
														"src": "3394:21:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 367,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "3394:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 371,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 369,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 402,
														"src": "3418:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3418:10:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3394:34:1"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 378,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 374,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "3451:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 373,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3445:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 372,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3445:5:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 375,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3445:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3445:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 377,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3469:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3445:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 389,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3529:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3445:86:1",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 383,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "3497:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 384,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 357,
																				"src": "3506:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 385,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1575,
																			"src": "3506:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 386,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3506:18:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 381,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "3480:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 382,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "3480:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 387,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3480:45:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 380,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3473:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 379,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "3473:6:1",
																"typeDescriptions": {}
															}
														},
														"id": 388,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3473:53:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 362,
												"id": 391,
												"nodeType": "Return",
												"src": "3438:93:1"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "3202:55:1",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 393,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "3271:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 359,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3317:8:1"
									},
									"parameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3288:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "3280:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3280:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3279:17:1"
									},
									"returnParameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "3335:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 360,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3335:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3334:15:1"
									},
									"scope": 1062,
									"src": "3262:276:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 401,
										"nodeType": "Block",
										"src": "3846:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3863:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 398,
												"id": 400,
												"nodeType": "Return",
												"src": "3856:9:1"
											}
										]
									},
									"documentation": {
										"id": 394,
										"nodeType": "StructuredDocumentation",
										"src": "3544:231:1",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."
									},
									"id": 402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "3789:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3797:2:1"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "3831:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 396,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3831:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3830:15:1"
									},
									"scope": 1062,
									"src": "3780:92:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1137
									],
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3999:347:1",
										"statements": [
											{
												"assignments": [
													412
												],
												"declarations": [
													{
														"constant": false,
														"id": 412,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4017:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 444,
														"src": "4009:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 411,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4009:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 417,
												"initialValue": {
													"arguments": [
														{
															"id": 415,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "4051:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 413,
															"name": "ERC721Upgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "4025:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721Upgradeable_$1062_$",
																"typeString": "type(contract ERC721Upgradeable)"
															}
														},
														"id": 414,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 334,
														"src": "4025:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4009:50:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 419,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "4077:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 420,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "4083:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4077:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
															"id": 422,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4090:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																"typeString": "literal_string \"ERC721: approval to current owner\""
															},
															"value": "ERC721: approval to current owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																"typeString": "literal_string \"ERC721: approval to current owner\""
															}
														],
														"id": 418,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4069:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4069:57:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "4069:57:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 429,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 426,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1502,
																		"src": "4158:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 427,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4158:12:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 428,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 412,
																	"src": "4174:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "4158:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 431,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 412,
																		"src": "4200:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 432,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1502,
																			"src": "4207:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4207:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 430,
																	"name": "isApprovedForAll",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 498,
																	"src": "4183:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address,address) view returns (bool)"
																	}
																},
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4183:37:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4158:62:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c",
															"id": 436,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4234:63:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																"typeString": "literal_string \"ERC721: approve caller is not token owner or approved for all\""
															},
															"value": "ERC721: approve caller is not token owner or approved for all"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
																"typeString": "literal_string \"ERC721: approve caller is not token owner or approved for all\""
															}
														],
														"id": 425,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4137:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4137:170:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 438,
												"nodeType": "ExpressionStatement",
												"src": "4137:170:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 440,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "4327:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 441,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "4331:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 439,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 889,
														"src": "4318:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4318:21:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 443,
												"nodeType": "ExpressionStatement",
												"src": "4318:21:1"
											}
										]
									},
									"documentation": {
										"id": 403,
										"nodeType": "StructuredDocumentation",
										"src": "3878:46:1",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3938:7:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 409,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3990:8:1"
									},
									"parameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3954:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3946:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3946:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3966:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3958:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3958:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3945:29:1"
									},
									"returnParameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3999:0:1"
									},
									"scope": 1062,
									"src": "3929:417:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1153
									],
									"body": {
										"id": 462,
										"nodeType": "Block",
										"src": "4492:82:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 455,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 448,
															"src": "4517:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 454,
														"name": "_requireMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 935,
														"src": "4502:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
															"typeString": "function (uint256) view"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4502:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 457,
												"nodeType": "ExpressionStatement",
												"src": "4502:23:1"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 458,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 211,
														"src": "4543:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 460,
													"indexExpression": {
														"id": 459,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 448,
														"src": "4559:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4543:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 453,
												"id": 461,
												"nodeType": "Return",
												"src": "4536:31:1"
											}
										]
									},
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "4352:50:1",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4416:11:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 450,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4465:8:1"
									},
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4436:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "4428:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4428:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4427:17:1"
									},
									"returnParameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "4483:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4483:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4482:9:1"
									},
									"scope": 1062,
									"src": "4407:167:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1145
									],
									"body": {
										"id": 479,
										"nodeType": "Block",
										"src": "4725:69:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 473,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1502,
																"src": "4754:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4754:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 475,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 466,
															"src": "4768:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 476,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 468,
															"src": "4778:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 472,
														"name": "_setApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 921,
														"src": "4735:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4735:52:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 478,
												"nodeType": "ExpressionStatement",
												"src": "4735:52:1"
											}
										]
									},
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "4580:56:1",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 480,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4650:17:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 470,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4716:8:1"
									},
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4676:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 480,
												"src": "4668:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4668:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4691:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 480,
												"src": "4686:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 467,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4686:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4667:33:1"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4725:0:1"
									},
									"scope": 1062,
									"src": "4641:153:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1163
									],
									"body": {
										"id": 497,
										"nodeType": "Block",
										"src": "4963:59:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 491,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 217,
															"src": "4980:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 493,
														"indexExpression": {
															"id": 492,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "4999:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4980:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 495,
													"indexExpression": {
														"id": 494,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 485,
														"src": "5006:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4980:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 490,
												"id": 496,
												"nodeType": "Return",
												"src": "4973:42:1"
											}
										]
									},
									"documentation": {
										"id": 481,
										"nodeType": "StructuredDocumentation",
										"src": "4800:55:1",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4869:16:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 487,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4939:8:1"
									},
									"parameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4894:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "4886:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 482,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4886:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4909:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "4901:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4901:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4885:33:1"
									},
									"returnParameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "4957:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 488,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4957:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4956:6:1"
									},
									"scope": 1062,
									"src": "4860:162:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 526,
										"nodeType": "Block",
										"src": "7111:165:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 511,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "7131:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 512,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "7137:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 513,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 505,
															"src": "7141:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 510,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 865,
														"src": "7121:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 514,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7121:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 515,
												"nodeType": "ExpressionStatement",
												"src": "7121:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 518,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 501,
																	"src": "7190:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 519,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 503,
																	"src": "7196:2:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 520,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 505,
																	"src": "7200:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 521,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 507,
																	"src": "7209:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 517,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 997,
																"src": "7167:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7167:47:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 523,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7216:52:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															},
															"value": "ERC721: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 516,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7159:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7159:110:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 525,
												"nodeType": "ExpressionStatement",
												"src": "7159:110:1"
											}
										]
									},
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "6116:850:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 527,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "6980:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7011:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "7003:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7003:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7033:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "7025:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7025:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7053:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "7045:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7045:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7083:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "7070:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 506,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7070:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:100:1"
									},
									"returnParameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7111:0:1"
									},
									"scope": 1062,
									"src": "6971:305:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 539,
										"nodeType": "Block",
										"src": "7460:40:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 535,
														"name": "_owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 203,
														"src": "7477:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 537,
													"indexExpression": {
														"id": 536,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "7485:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7477:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 534,
												"id": 538,
												"nodeType": "Return",
												"src": "7470:23:1"
											}
										]
									},
									"documentation": {
										"id": 528,
										"nodeType": "StructuredDocumentation",
										"src": "7282:98:1",
										"text": " @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"
									},
									"id": 540,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownerOf",
									"nameLocation": "7394:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7411:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "7403:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7403:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7402:17:1"
									},
									"returnParameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "7451:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7451:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7450:9:1"
									},
									"scope": 1062,
									"src": "7385:115:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 557,
										"nodeType": "Block",
										"src": "7874:55:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 549,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 543,
																"src": "7900:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 548,
															"name": "_ownerOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "7891:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view returns (address)"
															}
														},
														"id": 550,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7891:17:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 553,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7920:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 552,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7912:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 551,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7912:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 554,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7912:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7891:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 547,
												"id": 556,
												"nodeType": "Return",
												"src": "7884:38:1"
											}
										]
									},
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "7506:292:1",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."
									},
									"id": 558,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "7812:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7828:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "7820:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 542,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7819:17:1"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "7868:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 545,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7868:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7867:6:1"
									},
									"scope": 1062,
									"src": "7803:126:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 591,
										"nodeType": "Block",
										"src": "8186:173:1",
										"statements": [
											{
												"assignments": [
													569
												],
												"declarations": [
													{
														"constant": false,
														"id": 569,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "8204:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 591,
														"src": "8196:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 568,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8196:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 574,
												"initialValue": {
													"arguments": [
														{
															"id": 572,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 563,
															"src": "8238:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 570,
															"name": "ERC721Upgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "8212:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721Upgradeable_$1062_$",
																"typeString": "type(contract ERC721Upgradeable)"
															}
														},
														"id": 571,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 334,
														"src": "8212:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8212:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8196:50:1"
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 588,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 582,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 575,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "8264:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 576,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 569,
																		"src": "8275:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "8264:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 579,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 569,
																			"src": "8301:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 580,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 561,
																			"src": "8308:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 578,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 498,
																		"src": "8284:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 581,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8284:32:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "8264:52:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 587,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 584,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 563,
																			"src": "8332:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 583,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 463,
																		"src": "8320:11:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 585,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8320:20:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 586,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "8344:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "8320:31:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "8264:87:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 589,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "8263:89:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 567,
												"id": 590,
												"nodeType": "Return",
												"src": "8256:96:1"
											}
										]
									},
									"documentation": {
										"id": 559,
										"nodeType": "StructuredDocumentation",
										"src": "7935:147:1",
										"text": " @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."
									},
									"id": 592,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isApprovedOrOwner",
									"nameLocation": "8096:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8123:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "8115:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8115:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8140:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "8132:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8132:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8114:34:1"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "8180:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 565,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8180:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8179:6:1"
									},
									"scope": 1062,
									"src": "8087:272:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 606,
										"nodeType": "Block",
										"src": "8754:43:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 601,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "8774:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 602,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "8778:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 603,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8787:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 600,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															607,
															636
														],
														"referencedDeclaration": 636,
														"src": "8764:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8764:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 605,
												"nodeType": "ExpressionStatement",
												"src": "8764:26:1"
											}
										]
									},
									"documentation": {
										"id": 593,
										"nodeType": "StructuredDocumentation",
										"src": "8365:319:1",
										"text": " @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 607,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "8698:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8716:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8708:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8708:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8728:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8720:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8720:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8707:29:1"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8754:0:1"
									},
									"scope": 1062,
									"src": "8689:108:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 635,
										"nodeType": "Block",
										"src": "9132:195:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 618,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "9148:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 619,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 612,
															"src": "9152:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 617,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 713,
														"src": "9142:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9142:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 621,
												"nodeType": "ExpressionStatement",
												"src": "9142:18:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 626,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9222:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 625,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9214:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 624,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "9214:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 627,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9214:10:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 628,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 610,
																	"src": "9226:2:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 629,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 612,
																	"src": "9230:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 630,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 614,
																	"src": "9239:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 623,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 997,
																"src": "9191:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 631,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9191:53:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 632,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9258:52:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															},
															"value": "ERC721: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 622,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9170:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9170:150:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 634,
												"nodeType": "ExpressionStatement",
												"src": "9170:150:1"
											}
										]
									},
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "8803:210:1",
										"text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
									},
									"id": 636,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "9027:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9054:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "9046:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9046:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9074:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "9066:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9066:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9104:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "9091:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 613,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9091:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9036:78:1"
									},
									"returnParameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9132:0:1"
									},
									"scope": 1062,
									"src": "9018:309:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 712,
										"nodeType": "Block",
										"src": "9710:859:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 650,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 645,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 639,
																"src": "9728:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 648,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9742:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9734:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 646,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9734:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 649,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9734:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9728:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 651,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9746:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
																"typeString": "literal_string \"ERC721: mint to the zero address\""
															},
															"value": "ERC721: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
																"typeString": "literal_string \"ERC721: mint to the zero address\""
															}
														],
														"id": 644,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9720:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9720:61:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 653,
												"nodeType": "ExpressionStatement",
												"src": "9720:61:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "9799:17:1",
															"subExpression": {
																"arguments": [
																	{
																		"id": 656,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 641,
																		"src": "9808:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 655,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "9800:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 657,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9800:16:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
															"id": 659,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9818:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															},
															"value": "ERC721: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															}
														],
														"id": 654,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9791:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9791:58:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 661,
												"nodeType": "ExpressionStatement",
												"src": "9791:58:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 665,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9889:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 664,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9881:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 663,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9881:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 666,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9881:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 667,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "9893:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 668,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "9897:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 669,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9906:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 662,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1043,
														"src": "9860:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9860:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 671,
												"nodeType": "ExpressionStatement",
												"src": "9860:48:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "10003:17:1",
															"subExpression": {
																"arguments": [
																	{
																		"id": 674,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 641,
																		"src": "10012:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 673,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "10004:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 675,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10004:16:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
															"id": 677,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10022:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															},
															"value": "ERC721: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															}
														],
														"id": 672,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9995:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9995:58:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 679,
												"nodeType": "ExpressionStatement",
												"src": "9995:58:1"
											},
											{
												"id": 686,
												"nodeType": "UncheckedBlock",
												"src": "10064:360:1",
												"statements": [
													{
														"expression": {
															"id": 684,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 680,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 207,
																	"src": "10395:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 682,
																"indexExpression": {
																	"id": 681,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 639,
																	"src": "10405:2:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10395:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 683,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10412:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10395:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 685,
														"nodeType": "ExpressionStatement",
														"src": "10395:18:1"
													}
												]
											},
											{
												"expression": {
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 687,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 203,
															"src": "10434:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 689,
														"indexExpression": {
															"id": 688,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "10442:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10434:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 690,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "10453:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10434:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "10434:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 696,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10488:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 695,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10480:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 694,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10480:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10480:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 698,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "10492:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 699,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "10496:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 693,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "10471:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10471:33:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 701,
												"nodeType": "EmitStatement",
												"src": "10466:38:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 705,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10543:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 704,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10535:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 703,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10535:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10535:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 707,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "10547:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 708,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "10551:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 709,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10560:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 702,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1056,
														"src": "10515:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10515:47:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 711,
												"nodeType": "ExpressionStatement",
												"src": "10515:47:1"
											}
										]
									},
									"documentation": {
										"id": 637,
										"nodeType": "StructuredDocumentation",
										"src": "9333:311:1",
										"text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
									},
									"id": 713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9658:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9672:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "9664:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9664:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9684:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "9676:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 640,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9676:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9663:29:1"
									},
									"returnParameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9710:0:1"
									},
									"scope": 1062,
									"src": "9649:920:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 779,
										"nodeType": "Block",
										"src": "10944:735:1",
										"statements": [
											{
												"assignments": [
													720
												],
												"declarations": [
													{
														"constant": false,
														"id": 720,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "10962:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 779,
														"src": "10954:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 719,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10954:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 725,
												"initialValue": {
													"arguments": [
														{
															"id": 723,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "10996:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 721,
															"name": "ERC721Upgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "10970:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721Upgradeable_$1062_$",
																"typeString": "type(contract ERC721Upgradeable)"
															}
														},
														"id": 722,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 334,
														"src": "10970:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10970:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10954:50:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 727,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "11036:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 730,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11051:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 729,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11043:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 728,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11043:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 731,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11043:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 732,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "11055:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 733,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11064:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 726,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1043,
														"src": "11015:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 734,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11015:51:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 735,
												"nodeType": "ExpressionStatement",
												"src": "11015:51:1"
											},
											{
												"expression": {
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 736,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "11168:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 739,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 716,
																"src": "11202:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 737,
																"name": "ERC721Upgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1062,
																"src": "11176:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ERC721Upgradeable_$1062_$",
																	"typeString": "type(contract ERC721Upgradeable)"
																}
															},
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "ownerOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 334,
															"src": "11176:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view returns (address)"
															}
														},
														"id": 740,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11176:34:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11168:42:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 742,
												"nodeType": "ExpressionStatement",
												"src": "11168:42:1"
											},
											{
												"expression": {
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11248:31:1",
													"subExpression": {
														"baseExpression": {
															"id": 743,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 211,
															"src": "11255:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 745,
														"indexExpression": {
															"id": 744,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "11271:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11255:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 747,
												"nodeType": "ExpressionStatement",
												"src": "11248:31:1"
											},
											{
												"id": 754,
												"nodeType": "UncheckedBlock",
												"src": "11290:237:1",
												"statements": [
													{
														"expression": {
															"id": 752,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 748,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 207,
																	"src": "11495:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 750,
																"indexExpression": {
																	"id": 749,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 720,
																	"src": "11505:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "11495:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 751,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11515:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "11495:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 753,
														"nodeType": "ExpressionStatement",
														"src": "11495:21:1"
													}
												]
											},
											{
												"expression": {
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11536:23:1",
													"subExpression": {
														"baseExpression": {
															"id": 755,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 203,
															"src": "11543:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 757,
														"indexExpression": {
															"id": 756,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "11551:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11543:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 759,
												"nodeType": "ExpressionStatement",
												"src": "11536:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 761,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "11584:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 764,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11599:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 763,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11591:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 762,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11591:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 765,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11591:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 766,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "11603:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 760,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "11575:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11575:36:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 768,
												"nodeType": "EmitStatement",
												"src": "11570:41:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 770,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "11642:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11657:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 772,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11649:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 771,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11649:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 774,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11649:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 775,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "11661:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 776,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11670:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 769,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1056,
														"src": "11622:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11622:50:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 778,
												"nodeType": "ExpressionStatement",
												"src": "11622:50:1"
											}
										]
									},
									"documentation": {
										"id": 714,
										"nodeType": "StructuredDocumentation",
										"src": "10575:315:1",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 780,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "10904:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10918:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "10910:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10910:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10909:17:1"
									},
									"returnParameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10944:0:1"
									},
									"scope": 1062,
									"src": "10895:784:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 864,
										"nodeType": "Block",
										"src": "12112:1146:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 793,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 787,
																		"src": "12156:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 791,
																		"name": "ERC721Upgradeable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1062,
																		"src": "12130:17:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ERC721Upgradeable_$1062_$",
																			"typeString": "type(contract ERC721Upgradeable)"
																		}
																	},
																	"id": 792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 334,
																	"src": "12130:25:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12130:34:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 795,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 783,
																"src": "12168:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12130:42:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
															"id": 797,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12174:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															},
															"value": "ERC721: transfer from incorrect owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															}
														],
														"id": 790,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12122:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12122:92:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 799,
												"nodeType": "ExpressionStatement",
												"src": "12122:92:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 801,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 785,
																"src": "12232:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 804,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "12246:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12238:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 802,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "12238:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 805,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12238:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12232:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 807,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12250:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																"typeString": "literal_string \"ERC721: transfer to the zero address\""
															},
															"value": "ERC721: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																"typeString": "literal_string \"ERC721: transfer to the zero address\""
															}
														],
														"id": 800,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12224:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12224:65:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 809,
												"nodeType": "ExpressionStatement",
												"src": "12224:65:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 811,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "12321:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 812,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "12327:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 813,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "12331:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 814,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12340:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 810,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1043,
														"src": "12300:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 815,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12300:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 816,
												"nodeType": "ExpressionStatement",
												"src": "12300:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 820,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 787,
																		"src": "12468:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 818,
																		"name": "ERC721Upgradeable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1062,
																		"src": "12442:17:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ERC721Upgradeable_$1062_$",
																			"typeString": "type(contract ERC721Upgradeable)"
																		}
																	},
																	"id": 819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 334,
																	"src": "12442:25:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 821,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12442:34:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 822,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 783,
																"src": "12480:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12442:42:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
															"id": 824,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12486:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															},
															"value": "ERC721: transfer from incorrect owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															}
														],
														"id": 817,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12434:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12434:92:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 826,
												"nodeType": "ExpressionStatement",
												"src": "12434:92:1"
											},
											{
												"expression": {
													"id": 830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "12588:31:1",
													"subExpression": {
														"baseExpression": {
															"id": 827,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 211,
															"src": "12595:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 829,
														"indexExpression": {
															"id": 828,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "12611:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12595:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 831,
												"nodeType": "ExpressionStatement",
												"src": "12588:31:1"
											},
											{
												"id": 844,
												"nodeType": "UncheckedBlock",
												"src": "12630:496:1",
												"statements": [
													{
														"expression": {
															"id": 836,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 832,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 207,
																	"src": "13063:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 834,
																"indexExpression": {
																	"id": 833,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 783,
																	"src": "13073:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "13063:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 835,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13082:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "13063:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 837,
														"nodeType": "ExpressionStatement",
														"src": "13063:20:1"
													},
													{
														"expression": {
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 838,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 207,
																	"src": "13097:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 840,
																"indexExpression": {
																	"id": 839,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 785,
																	"src": "13107:2:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "13097:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 841,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13114:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "13097:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 843,
														"nodeType": "ExpressionStatement",
														"src": "13097:18:1"
													}
												]
											},
											{
												"expression": {
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 845,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 203,
															"src": "13135:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 847,
														"indexExpression": {
															"id": 846,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "13143:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13135:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 848,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 785,
														"src": "13154:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13135:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 850,
												"nodeType": "ExpressionStatement",
												"src": "13135:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 852,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "13181:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 853,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "13187:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 854,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "13191:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 851,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "13172:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13172:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 856,
												"nodeType": "EmitStatement",
												"src": "13167:32:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 858,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "13230:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 859,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "13236:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 860,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "13240:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 861,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13249:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 857,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1056,
														"src": "13210:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13210:41:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 863,
												"nodeType": "ExpressionStatement",
												"src": "13210:41:1"
											}
										]
									},
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "11685:313:1",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 865,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "12012:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12039:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "12031:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12031:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12061:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "12053:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12053:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "12081:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "12073:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12073:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12021:73:1"
									},
									"returnParameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12112:0:1"
									},
									"scope": 1062,
									"src": "12003:1255:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 888,
										"nodeType": "Block",
										"src": "13434:118:1",
										"statements": [
											{
												"expression": {
													"id": 877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 873,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 211,
															"src": "13444:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 875,
														"indexExpression": {
															"id": 874,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 870,
															"src": "13460:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13444:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 876,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "13471:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13444:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 878,
												"nodeType": "ExpressionStatement",
												"src": "13444:29:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 882,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 870,
																	"src": "13523:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 880,
																	"name": "ERC721Upgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1062,
																	"src": "13497:17:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ERC721Upgradeable_$1062_$",
																		"typeString": "type(contract ERC721Upgradeable)"
																	}
																},
																"id": 881,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "ownerOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 334,
																"src": "13497:25:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																	"typeString": "function (uint256) view returns (address)"
																}
															},
															"id": 883,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13497:34:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 884,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 868,
															"src": "13533:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 885,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 870,
															"src": "13537:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 879,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1104,
														"src": "13488:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13488:57:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 887,
												"nodeType": "EmitStatement",
												"src": "13483:62:1"
											}
										]
									},
									"documentation": {
										"id": 866,
										"nodeType": "StructuredDocumentation",
										"src": "13264:101:1",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."
									},
									"id": 889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "13379:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13396:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "13388:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13388:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13408:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "13400:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13400:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13387:29:1"
									},
									"returnParameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13434:0:1"
									},
									"scope": 1062,
									"src": "13370:182:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 920,
										"nodeType": "Block",
										"src": "13811:184:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 902,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 900,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 892,
																"src": "13829:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 901,
																"name": "operator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 894,
																"src": "13838:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "13829:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
															"id": 903,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13848:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																"typeString": "literal_string \"ERC721: approve to caller\""
															},
															"value": "ERC721: approve to caller"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																"typeString": "literal_string \"ERC721: approve to caller\""
															}
														],
														"id": 899,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13821:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13821:55:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 905,
												"nodeType": "ExpressionStatement",
												"src": "13821:55:1"
											},
											{
												"expression": {
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 906,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 217,
																"src": "13886:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 909,
															"indexExpression": {
																"id": 907,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 892,
																"src": "13905:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "13886:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 910,
														"indexExpression": {
															"id": 908,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 894,
															"src": "13912:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13886:35:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 911,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 896,
														"src": "13924:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "13886:46:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 913,
												"nodeType": "ExpressionStatement",
												"src": "13886:46:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 915,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 892,
															"src": "13962:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 916,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 894,
															"src": "13969:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 917,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 896,
															"src": "13979:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 914,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1113,
														"src": "13947:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13947:41:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 919,
												"nodeType": "EmitStatement",
												"src": "13942:46:1"
											}
										]
									},
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "13558:125:1",
										"text": " @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."
									},
									"id": 921,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setApprovalForAll",
									"nameLocation": "13697:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "13733:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "13725:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13725:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "13756:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "13748:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13748:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "13779:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "13774:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 895,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13774:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13715:78:1"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13811:0:1"
									},
									"scope": 1062,
									"src": "13688:307:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 934,
										"nodeType": "Block",
										"src": "14142:70:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 929,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 924,
																	"src": "14168:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 928,
																"name": "_exists",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "14160:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view returns (bool)"
																}
															},
															"id": 930,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14160:16:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
															"id": 931,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14178:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															},
															"value": "ERC721: invalid token ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
																"typeString": "literal_string \"ERC721: invalid token ID\""
															}
														],
														"id": 927,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14152:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 932,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14152:53:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 933,
												"nodeType": "ExpressionStatement",
												"src": "14152:53:1"
											}
										]
									},
									"documentation": {
										"id": 922,
										"nodeType": "StructuredDocumentation",
										"src": "14001:73:1",
										"text": " @dev Reverts if the `tokenId` has not been minted yet."
									},
									"id": 935,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireMinted",
									"nameLocation": "14088:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14111:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 935,
												"src": "14103:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 923,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14103:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14102:17:1"
									},
									"returnParameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14142:0:1"
									},
									"scope": 1062,
									"src": "14079:133:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 996,
										"nodeType": "Block",
										"src": "14919:698:1",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 949,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 940,
															"src": "14933:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 950,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "isContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1209,
														"src": "14933:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14933:15:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 994,
													"nodeType": "Block",
													"src": "15575:36:1",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 992,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15596:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 948,
															"id": 993,
															"nodeType": "Return",
															"src": "15589:11:1"
														}
													]
												},
												"id": 995,
												"nodeType": "IfStatement",
												"src": "14929:682:1",
												"trueBody": {
													"id": 991,
													"nodeType": "Block",
													"src": "14950:619:1",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 971,
																		"nodeType": "Block",
																		"src": "15075:102:1",
																		"statements": [
																			{
																				"expression": {
																					"commonType": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					},
																					"id": 969,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 965,
																						"name": "retval",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 963,
																						"src": "15100:6:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"expression": {
																							"expression": {
																								"id": 966,
																								"name": "IERC721ReceiverUpgradeable",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1080,
																								"src": "15110:26:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC721ReceiverUpgradeable_$1080_$",
																									"typeString": "type(contract IERC721ReceiverUpgradeable)"
																								}
																							},
																							"id": 967,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "onERC721Received",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1079,
																							"src": "15110:43:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
																								"typeString": "function IERC721ReceiverUpgradeable.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
																							}
																						},
																						"id": 968,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberName": "selector",
																						"nodeType": "MemberAccess",
																						"src": "15110:52:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"src": "15100:62:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"functionReturnParameters": 948,
																				"id": 970,
																				"nodeType": "Return",
																				"src": "15093:69:1"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 972,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 964,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 963,
																				"mutability": "mutable",
																				"name": "retval",
																				"nameLocation": "15067:6:1",
																				"nodeType": "VariableDeclaration",
																				"scope": 972,
																				"src": "15060:13:1",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				"typeName": {
																					"id": 962,
																					"name": "bytes4",
																					"nodeType": "ElementaryTypeName",
																					"src": "15060:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "15059:15:1"
																	},
																	"src": "15051:126:1"
																},
																{
																	"block": {
																		"id": 988,
																		"nodeType": "Block",
																		"src": "15206:353:1",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 979,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 976,
																							"name": "reason",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 974,
																							"src": "15228:6:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 977,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "length",
																						"nodeType": "MemberAccess",
																						"src": "15228:13:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"hexValue": "30",
																						"id": 978,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "15245:1:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					},
																					"src": "15228:18:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"falseBody": {
																					"id": 986,
																					"nodeType": "Block",
																					"src": "15355:190:1",
																					"statements": [
																						{
																							"AST": {
																								"nodeType": "YulBlock",
																								"src": "15441:86:1",
																								"statements": [
																									{
																										"expression": {
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nodeType": "YulLiteral",
																															"src": "15478:2:1",
																															"type": "",
																															"value": "32"
																														},
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "15482:6:1"
																														}
																													],
																													"functionName": {
																														"name": "add",
																														"nodeType": "YulIdentifier",
																														"src": "15474:3:1"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "15474:15:1"
																												},
																												{
																													"arguments": [
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "15497:6:1"
																														}
																													],
																													"functionName": {
																														"name": "mload",
																														"nodeType": "YulIdentifier",
																														"src": "15491:5:1"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "15491:13:1"
																												}
																											],
																											"functionName": {
																												"name": "revert",
																												"nodeType": "YulIdentifier",
																												"src": "15467:6:1"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "15467:38:1"
																										},
																										"nodeType": "YulExpressionStatement",
																										"src": "15467:38:1"
																									}
																								]
																							},
																							"documentation": "@solidity memory-safe-assembly",
																							"evmVersion": "london",
																							"externalReferences": [
																								{
																									"declaration": 974,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "15482:6:1",
																									"valueSize": 1
																								},
																								{
																									"declaration": 974,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "15497:6:1",
																									"valueSize": 1
																								}
																							],
																							"id": 985,
																							"nodeType": "InlineAssembly",
																							"src": "15432:95:1"
																						}
																					]
																				},
																				"id": 987,
																				"nodeType": "IfStatement",
																				"src": "15224:321:1",
																				"trueBody": {
																					"id": 984,
																					"nodeType": "Block",
																					"src": "15248:101:1",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
																										"id": 981,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "string",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "15277:52:1",
																										"typeDescriptions": {
																											"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																											"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
																										},
																										"value": "ERC721: transfer to non ERC721Receiver implementer"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																											"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
																										}
																									],
																									"id": 980,
																									"name": "revert",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [
																										4294967277,
																										4294967277
																									],
																									"referencedDeclaration": 4294967277,
																									"src": "15270:6:1",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																										"typeString": "function (string memory) pure"
																									}
																								},
																								"id": 982,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "15270:60:1",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 983,
																							"nodeType": "ExpressionStatement",
																							"src": "15270:60:1"
																						}
																					]
																				}
																			}
																		]
																	},
																	"errorName": "",
																	"id": 989,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 975,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 974,
																				"mutability": "mutable",
																				"name": "reason",
																				"nameLocation": "15198:6:1",
																				"nodeType": "VariableDeclaration",
																				"scope": 989,
																				"src": "15185:19:1",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes"
																				},
																				"typeName": {
																					"id": 973,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "15185:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_storage_ptr",
																						"typeString": "bytes"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "15184:21:1"
																	},
																	"src": "15178:381:1"
																}
															],
															"externalCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 956,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1502,
																			"src": "15016:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 957,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15016:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 958,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 938,
																		"src": "15030:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 959,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 942,
																		"src": "15036:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 960,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 944,
																		"src": "15045:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 953,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 940,
																				"src": "14995:2:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 952,
																			"name": "IERC721ReceiverUpgradeable",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1080,
																			"src": "14968:26:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721ReceiverUpgradeable_$1080_$",
																				"typeString": "type(contract IERC721ReceiverUpgradeable)"
																			}
																		},
																		"id": 954,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14968:30:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721ReceiverUpgradeable_$1080",
																			"typeString": "contract IERC721ReceiverUpgradeable"
																		}
																	},
																	"id": 955,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "onERC721Received",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1079,
																	"src": "14968:47:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																		"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																	}
																},
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14968:82:1",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"id": 990,
															"nodeType": "TryStatement",
															"src": "14964:595:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 936,
										"nodeType": "StructuredDocumentation",
										"src": "14218:541:1",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 997,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnERC721Received",
									"nameLocation": "14773:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14813:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "14805:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 937,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14805:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14835:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "14827:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14827:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14855:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "14847:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14847:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "14885:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "14872:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 943,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14872:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14795:100:1"
									},
									"returnParameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "14913:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 946,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14913:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14912:6:1"
									},
									"scope": 1062,
									"src": "14764:853:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1042,
										"nodeType": "Block",
										"src": "16491:238:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1009,
														"name": "batchSize",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1006,
														"src": "16505:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1010,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "16517:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "16505:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1041,
												"nodeType": "IfStatement",
												"src": "16501:222:1",
												"trueBody": {
													"id": 1040,
													"nodeType": "Block",
													"src": "16520:203:1",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1012,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1000,
																	"src": "16538:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 1015,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "16554:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "16546:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1013,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "16546:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16546:10:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "16538:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1025,
															"nodeType": "IfStatement",
															"src": "16534:85:1",
															"trueBody": {
																"id": 1024,
																"nodeType": "Block",
																"src": "16558:61:1",
																"statements": [
																	{
																		"expression": {
																			"id": 1022,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 1018,
																					"name": "_balances",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 207,
																					"src": "16576:9:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1020,
																				"indexExpression": {
																					"id": 1019,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1000,
																					"src": "16586:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "16576:15:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"id": 1021,
																				"name": "batchSize",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1006,
																				"src": "16595:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "16576:28:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1023,
																		"nodeType": "ExpressionStatement",
																		"src": "16576:28:1"
																	}
																]
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1031,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1026,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1002,
																	"src": "16636:2:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 1029,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "16650:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1028,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "16642:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1027,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "16642:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1030,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16642:10:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "16636:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1039,
															"nodeType": "IfStatement",
															"src": "16632:81:1",
															"trueBody": {
																"id": 1038,
																"nodeType": "Block",
																"src": "16654:59:1",
																"statements": [
																	{
																		"expression": {
																			"id": 1036,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 1032,
																					"name": "_balances",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 207,
																					"src": "16672:9:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1034,
																				"indexExpression": {
																					"id": 1033,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1002,
																					"src": "16682:2:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "16672:13:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"id": 1035,
																				"name": "batchSize",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1006,
																				"src": "16689:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "16672:26:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1037,
																		"nodeType": "ExpressionStatement",
																		"src": "16672:26:1"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 998,
										"nodeType": "StructuredDocumentation",
										"src": "15623:705:1",
										"text": " @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1043,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "16342:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "16380:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "16372:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 999,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16372:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16402:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "16394:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1001,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16394:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "16414:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16414:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "batchSize",
												"nameLocation": "16458:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "16450:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16450:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16362:111:1"
									},
									"returnParameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16491:0:1"
									},
									"scope": 1062,
									"src": "16333:396:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1055,
										"nodeType": "Block",
										"src": "17586:2:1",
										"statements": []
									},
									"documentation": {
										"id": 1044,
										"nodeType": "StructuredDocumentation",
										"src": "16735:695:1",
										"text": " @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1056,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "17444:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "17481:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1056,
												"src": "17473:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1045,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17473:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "17503:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1056,
												"src": "17495:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1047,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17495:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "firstTokenId",
												"nameLocation": "17523:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 1056,
												"src": "17515:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17515:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "batchSize",
												"nameLocation": "17553:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1056,
												"src": "17545:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17545:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17463:105:1"
									},
									"returnParameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17586:0:1"
									},
									"scope": 1062,
									"src": "17435:153:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1057,
										"nodeType": "StructuredDocumentation",
										"src": "17594:254:1",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1061,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "17873:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 1062,
									"src": "17853:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$44_storage",
										"typeString": "uint256[44]"
									},
									"typeName": {
										"baseType": {
											"id": 1058,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "17853:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1060,
										"length": {
											"hexValue": "3434",
											"id": 1059,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "17861:2:1",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_44_by_1",
												"typeString": "int_const 44"
											},
											"value": "44"
										},
										"nodeType": "ArrayTypeName",
										"src": "17853:11:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$44_storage_ptr",
											"typeString": "uint256[44]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1063,
							"src": "751:17130:1",
							"usedErrors": []
						}
					],
					"src": "107:17775:1"
				},
				"id": 1
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol",
					"exportedSymbols": {
						"IERC721ReceiverUpgradeable": [
							1080
						]
					},
					"id": 1081,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1064,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1065,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:2",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 1080,
							"linearizedBaseContracts": [
								1080
							],
							"name": "IERC721ReceiverUpgradeable",
							"nameLocation": "304:26:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1066,
										"nodeType": "StructuredDocumentation",
										"src": "337:493:2",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 1079,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "844:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "878:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "870:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "870:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "904:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "896:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1069,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "896:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "926:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "918:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1071,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "918:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "958:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "943:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1073,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "943:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:108:2"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "987:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1076,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "987:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "986:8:2"
									},
									"scope": 1080,
									"src": "835:160:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1081,
							"src": "294:703:2",
							"usedErrors": []
						}
					],
					"src": "116:882:2"
				},
				"id": 2
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
					"exportedSymbols": {
						"IERC165Upgradeable": [
							1748
						],
						"IERC721Upgradeable": [
							1164
						]
					},
					"id": 1165,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1082,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:3"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol",
							"file": "../../utils/introspection/IERC165Upgradeable.sol",
							"id": 1083,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1165,
							"sourceUnit": 1749,
							"src": "133:58:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1085,
										"name": "IERC165Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1748,
										"src": "293:18:3"
									},
									"id": 1086,
									"nodeType": "InheritanceSpecifier",
									"src": "293:18:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1084,
								"nodeType": "StructuredDocumentation",
								"src": "193:67:3",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 1164,
							"linearizedBaseContracts": [
								1164,
								1748
							],
							"name": "IERC721Upgradeable",
							"nameLocation": "271:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1087,
										"nodeType": "StructuredDocumentation",
										"src": "318:88:3",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 1095,
									"name": "Transfer",
									"nameLocation": "417:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1089,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "442:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "426:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1088,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1091,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "464:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "448:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1090,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1093,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "484:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "468:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "468:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:67:3"
									},
									"src": "411:82:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1096,
										"nodeType": "StructuredDocumentation",
										"src": "499:94:3",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 1104,
									"name": "Approval",
									"nameLocation": "604:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "629:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "613:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "613:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1100,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "652:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "636:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1099,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1102,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "678:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "662:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "662:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "612:74:3"
									},
									"src": "598:89:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1105,
										"nodeType": "StructuredDocumentation",
										"src": "693:117:3",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 1113,
									"name": "ApprovalForAll",
									"nameLocation": "821:14:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "852:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "836:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1109,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "875:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "859:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1111,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "890:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "885:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1110,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "885:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "835:64:3"
									},
									"src": "815:85:3"
								},
								{
									"documentation": {
										"id": 1114,
										"nodeType": "StructuredDocumentation",
										"src": "906:76:3",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 1121,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "996:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1014:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "1006:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1006:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1005:15:3"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1052:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "1044:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1043:17:3"
									},
									"scope": 1164,
									"src": "987:74:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1122,
										"nodeType": "StructuredDocumentation",
										"src": "1067:131:3",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 1129,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1212:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1228:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "1220:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1220:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1219:17:3"
									},
									"returnParameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1268:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "1260:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1260:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1259:15:3"
									},
									"scope": 1164,
									"src": "1203:72:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1130,
										"nodeType": "StructuredDocumentation",
										"src": "3686:452:3",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1137,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4152:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4168:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4160:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4160:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4180:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4172:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4172:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4159:29:3"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4197:0:3"
									},
									"scope": 1164,
									"src": "4143:55:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1138,
										"nodeType": "StructuredDocumentation",
										"src": "4204:309:3",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4527:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4553:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1145,
												"src": "4545:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4545:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4568:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1145,
												"src": "4563:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1141,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4563:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4544:34:3"
									},
									"returnParameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4587:0:3"
									},
									"scope": 1164,
									"src": "4518:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1146,
										"nodeType": "StructuredDocumentation",
										"src": "4594:139:3",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4747:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4767:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1153,
												"src": "4759:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4759:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4758:17:3"
									},
									"returnParameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4807:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1153,
												"src": "4799:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4799:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4798:18:3"
									},
									"scope": 1164,
									"src": "4738:79:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1154,
										"nodeType": "StructuredDocumentation",
										"src": "4823:138:3",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4975:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5000:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "4992:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4992:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5015:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "5007:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5007:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4991:33:3"
									},
									"returnParameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "5048:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1160,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5048:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5047:6:3"
									},
									"scope": 1164,
									"src": "4966:88:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1165,
							"src": "261:4795:3",
							"usedErrors": []
						}
					],
					"src": "108:4949:3"
				},
				"id": 3
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC165Upgradeable": [
							1748
						],
						"IERC721MetadataUpgradeable": [
							1191
						],
						"IERC721Upgradeable": [
							1164
						]
					},
					"id": 1192,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1166,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:4"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
							"file": "../IERC721Upgradeable.sol",
							"id": 1167,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1192,
							"sourceUnit": 1165,
							"src": "137:35:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1169,
										"name": "IERC721Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1164,
										"src": "348:18:4"
									},
									"id": 1170,
									"nodeType": "InheritanceSpecifier",
									"src": "348:18:4"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1168,
								"nodeType": "StructuredDocumentation",
								"src": "174:133:4",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1191,
							"linearizedBaseContracts": [
								1191,
								1164,
								1748
							],
							"name": "IERC721MetadataUpgradeable",
							"nameLocation": "318:26:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1171,
										"nodeType": "StructuredDocumentation",
										"src": "373:58:4",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "445:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "449:2:4"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "475:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1173,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "475:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:15:4"
									},
									"scope": 1191,
									"src": "436:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "496:60:4",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1182,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "570:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "576:2:4"
									},
									"returnParameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "602:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1179,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "602:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "601:15:4"
									},
									"scope": 1191,
									"src": "561:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1183,
										"nodeType": "StructuredDocumentation",
										"src": "623:90:4",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1190,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "727:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1185,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "744:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "736:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "736:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "735:17:4"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "776:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1187,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "776:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "775:15:4"
									},
									"scope": 1191,
									"src": "718:73:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1192,
							"src": "308:485:4",
							"usedErrors": []
						}
					],
					"src": "112:682:4"
				},
				"id": 4
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1475
						]
					},
					"id": 1476,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1193,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1194,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1475,
							"linearizedBaseContracts": [
								1475
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1208,
										"nodeType": "Block",
										"src": "1252:254:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1202,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1197,
																"src": "1476:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1476:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1476:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1205,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1498:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1476:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1201,
												"id": 1207,
												"nodeType": "Return",
												"src": "1469:30:5"
											}
										]
									},
									"documentation": {
										"id": 1195,
										"nodeType": "StructuredDocumentation",
										"src": "227:954:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1195:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1214:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "1206:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:17:5"
									},
									"returnParameters": {
										"id": 1201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "1246:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1199,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1246:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:6:5"
									},
									"scope": 1475,
									"src": "1186:320:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1242,
										"nodeType": "Block",
										"src": "2494:241:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1220,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2520:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1475",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1475",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1219,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2512:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1218,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2512:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2512:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2512:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1223,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1214,
																"src": "2537:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2512:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2545:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1217,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2504:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1227,
												"nodeType": "ExpressionStatement",
												"src": "2504:73:5"
											},
											{
												"assignments": [
													1229,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1229,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2594:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1242,
														"src": "2589:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1228,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2589:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1236,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1234,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2637:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1230,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1212,
																"src": "2607:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2607:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1233,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1232,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1214,
																"src": "2629:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2607:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2588:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1238,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1229,
															"src": "2658:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1239,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2667:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1237,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2650:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1241,
												"nodeType": "ExpressionStatement",
												"src": "2650:78:5"
											}
										]
									},
									"documentation": {
										"id": 1210,
										"nodeType": "StructuredDocumentation",
										"src": "1512:906:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2432:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2458:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "2442:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1214,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2477:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "2469:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:43:5"
									},
									"returnParameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:5"
									},
									"scope": 1475,
									"src": "2423:312:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1260,
										"nodeType": "Block",
										"src": "3566:96:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1254,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "3605:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1255,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1248,
															"src": "3613:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3619:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1257,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3622:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1253,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1301,
															1345
														],
														"referencedDeclaration": 1345,
														"src": "3583:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3583:72:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1252,
												"id": 1259,
												"nodeType": "Return",
												"src": "3576:79:5"
											}
										]
									},
									"documentation": {
										"id": 1244,
										"nodeType": "StructuredDocumentation",
										"src": "2741:731:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3486:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3507:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "3499:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3499:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3528:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "3515:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1247,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3515:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:35:5"
									},
									"returnParameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "3552:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1250,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3552:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3551:14:5"
									},
									"scope": 1475,
									"src": "3477:185:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1280,
										"nodeType": "Block",
										"src": "4031:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1274,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1264,
															"src": "4070:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1275,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1266,
															"src": "4078:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1276,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4084:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1277,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1268,
															"src": "4087:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1273,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1301,
															1345
														],
														"referencedDeclaration": 1345,
														"src": "4048:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4048:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1272,
												"id": 1279,
												"nodeType": "Return",
												"src": "4041:59:5"
											}
										]
									},
									"documentation": {
										"id": 1262,
										"nodeType": "StructuredDocumentation",
										"src": "3668:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3893:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3923:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "3915:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3915:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3952:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "3939:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1265,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3939:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3980:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "3966:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1267,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3966:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3905:93:5"
									},
									"returnParameters": {
										"id": 1272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1271,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "4017:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1270,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4017:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4016:14:5"
									},
									"scope": 1475,
									"src": "3884:223:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1300,
										"nodeType": "Block",
										"src": "4612:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1294,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "4651:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1295,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1286,
															"src": "4659:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1296,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1288,
															"src": "4665:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1297,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4672:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1293,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1301,
															1345
														],
														"referencedDeclaration": 1345,
														"src": "4629:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4629:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1292,
												"id": 1299,
												"nodeType": "Return",
												"src": "4622:94:5"
											}
										]
									},
									"documentation": {
										"id": 1282,
										"nodeType": "StructuredDocumentation",
										"src": "4113:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1301,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4478:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4517:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1301,
												"src": "4509:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4509:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4546:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1301,
												"src": "4533:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1285,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4533:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4568:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1301,
												"src": "4560:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4560:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:80:5"
									},
									"returnParameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1301,
												"src": "4598:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1290,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4598:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4597:14:5"
									},
									"scope": 1475,
									"src": "4469:254:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1344,
										"nodeType": "Block",
										"src": "5150:267:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1318,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5176:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1475",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1475",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5168:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1316,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5168:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5168:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5168:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1321,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "5193:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1323,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5200:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1315,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5160:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1325,
												"nodeType": "ExpressionStatement",
												"src": "5160:81:5"
											},
											{
												"assignments": [
													1327,
													1329
												],
												"declarations": [
													{
														"constant": false,
														"id": 1327,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5257:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1344,
														"src": "5252:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1326,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5252:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1329,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5279:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1344,
														"src": "5266:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1328,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5266:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1336,
												"initialValue": {
													"arguments": [
														{
															"id": 1334,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1306,
															"src": "5319:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1330,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1304,
																"src": "5293:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5293:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1333,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1332,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "5312:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5293:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5293:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5251:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1338,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1304,
															"src": "5368:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1339,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1327,
															"src": "5376:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1340,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1329,
															"src": "5385:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1341,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1310,
															"src": "5397:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1337,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1430,
														"src": "5341:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1314,
												"id": 1343,
												"nodeType": "Return",
												"src": "5334:76:5"
											}
										]
									},
									"documentation": {
										"id": 1302,
										"nodeType": "StructuredDocumentation",
										"src": "4729:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4980:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1304,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5019:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "5011:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5011:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5048:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "5035:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1305,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5035:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5070:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "5062:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5062:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5099:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "5085:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1309,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5085:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5001:116:5"
									},
									"returnParameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "5136:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1312,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5136:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5135:14:5"
									},
									"scope": 1475,
									"src": "4971:446:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1361,
										"nodeType": "Block",
										"src": "5694:97:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1356,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1348,
															"src": "5730:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1357,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1350,
															"src": "5738:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1358,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5744:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1355,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1362,
															1391
														],
														"referencedDeclaration": 1391,
														"src": "5711:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5711:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1354,
												"id": 1360,
												"nodeType": "Return",
												"src": "5704:80:5"
											}
										]
									},
									"documentation": {
										"id": 1346,
										"nodeType": "StructuredDocumentation",
										"src": "5423:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1362,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5603:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5630:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "5622:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5622:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1350,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5651:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "5638:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1349,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5638:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5621:35:5"
									},
									"returnParameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "5680:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5680:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5679:14:5"
									},
									"scope": 1475,
									"src": "5594:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1390,
										"nodeType": "Block",
										"src": "6133:168:5",
										"statements": [
											{
												"assignments": [
													1375,
													1377
												],
												"declarations": [
													{
														"constant": false,
														"id": 1375,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6149:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1390,
														"src": "6144:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1374,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6144:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1377,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6171:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1390,
														"src": "6158:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1376,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6158:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1382,
												"initialValue": {
													"arguments": [
														{
															"id": 1380,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1367,
															"src": "6203:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1378,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1365,
															"src": "6185:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1379,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6185:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6185:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6143:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1384,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1365,
															"src": "6252:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1385,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1375,
															"src": "6260:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1386,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1377,
															"src": "6269:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1387,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1369,
															"src": "6281:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1383,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1430,
														"src": "6225:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6225:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1373,
												"id": 1389,
												"nodeType": "Return",
												"src": "6218:76:5"
											}
										]
									},
									"documentation": {
										"id": 1363,
										"nodeType": "StructuredDocumentation",
										"src": "5797:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5984:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1365,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6020:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "6012:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1364,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6012:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6049:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "6036:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1366,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6036:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1369,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6077:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "6063:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1368,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6063:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6002:93:5"
									},
									"returnParameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "6119:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1371,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6119:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6118:14:5"
									},
									"scope": 1475,
									"src": "5975:326:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1429,
										"nodeType": "Block",
										"src": "6783:434:5",
										"statements": [
											{
												"condition": {
													"id": 1405,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1396,
													"src": "6797:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1427,
													"nodeType": "Block",
													"src": "7153:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1423,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1398,
																		"src": "7175:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1424,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1400,
																		"src": "7187:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1422,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1474,
																	"src": "7167:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7167:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1426,
															"nodeType": "ExpressionStatement",
															"src": "7167:33:5"
														}
													]
												},
												"id": 1428,
												"nodeType": "IfStatement",
												"src": "6793:418:5",
												"trueBody": {
													"id": 1421,
													"nodeType": "Block",
													"src": "6806:341:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1409,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1406,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1398,
																		"src": "6824:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6824:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6845:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6824:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1418,
															"nodeType": "IfStatement",
															"src": "6820:286:5",
															"trueBody": {
																"id": 1417,
																"nodeType": "Block",
																"src": "6848:258:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1412,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1394,
																							"src": "7050:6:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1411,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1209,
																						"src": "7039:10:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1413,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7039:18:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1414,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7059:31:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1410,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7031:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1415,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7031:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1416,
																		"nodeType": "ExpressionStatement",
																		"src": "7031:60:5"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1419,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1398,
																"src": "7126:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1404,
															"id": 1420,
															"nodeType": "Return",
															"src": "7119:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1392,
										"nodeType": "StructuredDocumentation",
										"src": "6307:277:5",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1430,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "6598:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1394,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6642:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "6634:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6634:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1396,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6663:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "6658:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1395,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6658:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6693:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "6680:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1397,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6680:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6727:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "6713:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1399,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6713:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6624:121:5"
									},
									"returnParameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "6769:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1402,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6769:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6768:14:5"
									},
									"scope": 1475,
									"src": "6589:628:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1453,
										"nodeType": "Block",
										"src": "7598:135:5",
										"statements": [
											{
												"condition": {
													"id": 1442,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1433,
													"src": "7612:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1451,
													"nodeType": "Block",
													"src": "7669:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1447,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1435,
																		"src": "7691:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1448,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1437,
																		"src": "7703:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1446,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1474,
																	"src": "7683:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7683:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1450,
															"nodeType": "ExpressionStatement",
															"src": "7683:33:5"
														}
													]
												},
												"id": 1452,
												"nodeType": "IfStatement",
												"src": "7608:119:5",
												"trueBody": {
													"id": 1445,
													"nodeType": "Block",
													"src": "7621:42:5",
													"statements": [
														{
															"expression": {
																"id": 1443,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1435,
																"src": "7642:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1441,
															"id": 1444,
															"nodeType": "Return",
															"src": "7635:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1431,
										"nodeType": "StructuredDocumentation",
										"src": "7223:210:5",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7447:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7478:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "7473:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1432,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7473:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7508:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "7495:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1434,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7495:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7542:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "7528:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1436,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7528:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7463:97:5"
									},
									"returnParameters": {
										"id": 1441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "7584:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1439,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7584:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7583:14:5"
									},
									"scope": 1475,
									"src": "7438:295:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1473,
										"nodeType": "Block",
										"src": "7822:457:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1461,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1456,
															"src": "7898:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1462,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7898:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1463,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7918:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7898:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1471,
													"nodeType": "Block",
													"src": "8228:45:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1468,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1458,
																		"src": "8249:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1467,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "8242:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1469,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8242:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1470,
															"nodeType": "ExpressionStatement",
															"src": "8242:20:5"
														}
													]
												},
												"id": 1472,
												"nodeType": "IfStatement",
												"src": "7894:379:5",
												"trueBody": {
													"id": 1466,
													"nodeType": "Block",
													"src": "7921:301:5",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8079:133:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8097:40:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "8126:10:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8120:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8120:17:5"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8101:15:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8165:2:5",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "8169:10:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8161:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8161:19:5"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "8182:15:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8154:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8154:44:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8154:44:5"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 1456,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8126:10:5",
																	"valueSize": 1
																},
																{
																	"declaration": 1456,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8169:10:5",
																	"valueSize": 1
																}
															],
															"id": 1465,
															"nodeType": "InlineAssembly",
															"src": "8070:142:5"
														}
													]
												}
											}
										]
									},
									"id": 1474,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "7748:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7769:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "7756:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1455,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7756:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7795:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "7781:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1457,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7781:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7755:53:5"
									},
									"returnParameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7822:0:5"
									},
									"scope": 1475,
									"src": "7739:540:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1476,
							"src": "194:8087:5",
							"usedErrors": []
						}
					],
					"src": "101:8181:5"
				},
				"id": 5
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1475
						],
						"ContextUpgradeable": [
							1517
						],
						"Initializable": [
							168
						]
					},
					"id": 1518,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1477,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1478,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1518,
							"sourceUnit": 169,
							"src": "110:42:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1480,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 168,
										"src": "691:13:6"
									},
									"id": 1481,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:6"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1479,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1517,
							"linearizedBaseContracts": [
								1517,
								168
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1486,
										"nodeType": "Block",
										"src": "763:7:6",
										"statements": []
									},
									"id": 1487,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1484,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1483,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "746:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:6"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1482,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:6"
									},
									"returnParameters": {
										"id": 1485,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:6"
									},
									"scope": 1517,
									"src": "711:59:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1492,
										"nodeType": "Block",
										"src": "838:7:6",
										"statements": []
									},
									"id": 1493,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1490,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1489,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "821:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:6"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1488,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:6"
									},
									"returnParameters": {
										"id": 1491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:6"
									},
									"scope": 1517,
									"src": "776:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1501,
										"nodeType": "Block",
										"src": "912:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1498,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1497,
												"id": 1500,
												"nodeType": "Return",
												"src": "922:17:6"
											}
										]
									},
									"id": 1502,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1494,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:6"
									},
									"returnParameters": {
										"id": 1497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "903:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:6"
									},
									"scope": 1517,
									"src": "850:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1510,
										"nodeType": "Block",
										"src": "1019:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1507,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1506,
												"id": 1509,
												"nodeType": "Return",
												"src": "1029:15:6"
											}
										]
									},
									"id": 1511,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:6"
									},
									"returnParameters": {
										"id": 1506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "1003:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1504,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:6"
									},
									"scope": 1517,
									"src": "952:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1512,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:6",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1516,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 1517,
									"src": "1316:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1513,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1515,
										"length": {
											"hexValue": "3530",
											"id": 1514,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:6",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1518,
							"src": "651:693:6",
							"usedErrors": []
						}
					],
					"src": "86:1259:6"
				},
				"id": 6
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol",
					"exportedSymbols": {
						"MathUpgradeable": [
							2613
						],
						"StringsUpgradeable": [
							1692
						]
					},
					"id": 1693,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1519,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:7"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol",
							"file": "./math/MathUpgradeable.sol",
							"id": 1520,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1693,
							"sourceUnit": 2614,
							"src": "126:36:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1521,
								"nodeType": "StructuredDocumentation",
								"src": "164:34:7",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1692,
							"linearizedBaseContracts": [
								1692
							],
							"name": "StringsUpgradeable",
							"nameLocation": "207:18:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1524,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "257:8:7",
									"nodeType": "VariableDeclaration",
									"scope": 1692,
									"src": "232:54:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1522,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "232:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1523,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "268:18:7",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1527,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "315:15:7",
									"nodeType": "VariableDeclaration",
									"scope": 1692,
									"src": "292:43:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1525,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "292:5:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1526,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "333:2:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1574,
										"nodeType": "Block",
										"src": "508:636:7",
										"statements": [
											{
												"id": 1573,
												"nodeType": "UncheckedBlock",
												"src": "518:620:7",
												"statements": [
													{
														"assignments": [
															1536
														],
														"declarations": [
															{
																"constant": false,
																"id": 1536,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "550:6:7",
																"nodeType": "VariableDeclaration",
																"scope": 1573,
																"src": "542:14:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1535,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "542:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1543,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1542,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1539,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1530,
																		"src": "581:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1537,
																		"name": "MathUpgradeable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2613,
																		"src": "559:15:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_MathUpgradeable_$2613_$",
																			"typeString": "type(library MathUpgradeable)"
																		}
																	},
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2450,
																	"src": "559:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1540,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "559:28:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1541,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "590:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "559:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "542:49:7"
													},
													{
														"assignments": [
															1545
														],
														"declarations": [
															{
																"constant": false,
																"id": 1545,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "619:6:7",
																"nodeType": "VariableDeclaration",
																"scope": 1573,
																"src": "605:20:7",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1544,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "605:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1550,
														"initialValue": {
															"arguments": [
																{
																	"id": 1548,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1536,
																	"src": "639:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1547,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "628:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1546,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "632:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1549,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "628:18:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "605:41:7"
													},
													{
														"assignments": [
															1552
														],
														"declarations": [
															{
																"constant": false,
																"id": 1552,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "668:3:7",
																"nodeType": "VariableDeclaration",
																"scope": 1573,
																"src": "660:11:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1551,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "660:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1553,
														"nodeType": "VariableDeclarationStatement",
														"src": "660:11:7"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "741:67:7",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "759:35:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "770:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "782:2:7",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "786:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "778:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "778:15:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "766:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "766:28:7"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "759:3:7"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1545,
																"isOffset": false,
																"isSlot": false,
																"src": "770:6:7",
																"valueSize": 1
															},
															{
																"declaration": 1536,
																"isOffset": false,
																"isSlot": false,
																"src": "786:6:7",
																"valueSize": 1
															},
															{
																"declaration": 1552,
																"isOffset": false,
																"isSlot": false,
																"src": "759:3:7",
																"valueSize": 1
															}
														],
														"id": 1554,
														"nodeType": "InlineAssembly",
														"src": "732:76:7"
													},
													{
														"body": {
															"id": 1569,
															"nodeType": "Block",
															"src": "834:267:7",
															"statements": [
																{
																	"expression": {
																		"id": 1557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "852:5:7",
																		"subExpression": {
																			"id": 1556,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1552,
																			"src": "852:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1558,
																	"nodeType": "ExpressionStatement",
																	"src": "852:5:7"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "935:84:7",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "965:3:7"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "979:5:7"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "986:2:7",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "975:3:7"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "975:14:7"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "991:8:7"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "970:4:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "970:30:7"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "957:7:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "957:44:7"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "957:44:7"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "london",
																	"externalReferences": [
																		{
																			"declaration": 1524,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "991:8:7",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1552,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "965:3:7",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1530,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "979:5:7",
																			"valueSize": 1
																		}
																	],
																	"id": 1559,
																	"nodeType": "InlineAssembly",
																	"src": "926:93:7"
																},
																{
																	"expression": {
																		"id": 1562,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1560,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1530,
																			"src": "1036:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1561,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1045:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1036:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1563,
																	"nodeType": "ExpressionStatement",
																	"src": "1036:11:7"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1564,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1530,
																			"src": "1069:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1565,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1078:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1069:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1568,
																	"nodeType": "IfStatement",
																	"src": "1065:21:7",
																	"trueBody": {
																		"id": 1567,
																		"nodeType": "Break",
																		"src": "1081:5:7"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "828:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1570,
														"nodeType": "WhileStatement",
														"src": "821:280:7"
													},
													{
														"expression": {
															"id": 1571,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1545,
															"src": "1121:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1534,
														"id": 1572,
														"nodeType": "Return",
														"src": "1114:13:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1528,
										"nodeType": "StructuredDocumentation",
										"src": "342:90:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1575,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "446:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "463:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "455:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "454:15:7"
									},
									"returnParameters": {
										"id": 1534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "493:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1532,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "493:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:15:7"
									},
									"scope": 1692,
									"src": "437:707:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1594,
										"nodeType": "Block",
										"src": "1323:111:7",
										"statements": [
											{
												"id": 1593,
												"nodeType": "UncheckedBlock",
												"src": "1333:95:7",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1584,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1578,
																	"src": "1376:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1590,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1587,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1578,
																				"src": "1406:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1585,
																				"name": "MathUpgradeable",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2613,
																				"src": "1383:15:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_MathUpgradeable_$2613_$",
																					"typeString": "type(library MathUpgradeable)"
																				}
																			},
																			"id": 1586,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2573,
																			"src": "1383:22:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1588,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1383:29:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1415:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1383:33:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1583,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1595,
																	1671,
																	1691
																],
																"referencedDeclaration": 1671,
																"src": "1364:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1591,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1364:53:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1582,
														"id": 1592,
														"nodeType": "Return",
														"src": "1357:60:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1576,
										"nodeType": "StructuredDocumentation",
										"src": "1150:94:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1595,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1258:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1578,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1278:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1595,
												"src": "1270:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1577,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1270:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1269:15:7"
									},
									"returnParameters": {
										"id": 1582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1581,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1595,
												"src": "1308:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1580,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1308:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1307:15:7"
									},
									"scope": 1692,
									"src": "1249:185:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1670,
										"nodeType": "Block",
										"src": "1647:347:7",
										"statements": [
											{
												"assignments": [
													1606
												],
												"declarations": [
													{
														"constant": false,
														"id": 1606,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1670:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1670,
														"src": "1657:19:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1605,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1657:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1615,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1611,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1609,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1689:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1610,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1600,
																	"src": "1693:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1689:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1612,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1702:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1689:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1608,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1679:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1607,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1683:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1679:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1657:47:7"
											},
											{
												"expression": {
													"id": 1620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1616,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1606,
															"src": "1714:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1618,
														"indexExpression": {
															"hexValue": "30",
															"id": 1617,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1721:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1714:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1619,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1726:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1714:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1621,
												"nodeType": "ExpressionStatement",
												"src": "1714:15:7"
											},
											{
												"expression": {
													"id": 1626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1622,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1606,
															"src": "1739:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1624,
														"indexExpression": {
															"hexValue": "31",
															"id": 1623,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1746:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1739:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1625,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1751:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1739:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1627,
												"nodeType": "ExpressionStatement",
												"src": "1739:15:7"
											},
											{
												"body": {
													"id": 1656,
													"nodeType": "Block",
													"src": "1809:83:7",
													"statements": [
														{
															"expression": {
																"id": 1650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1642,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1606,
																		"src": "1823:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1644,
																	"indexExpression": {
																		"id": 1643,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1629,
																		"src": "1830:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1823:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1645,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1524,
																		"src": "1835:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1649,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1648,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1646,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1598,
																			"src": "1844:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1852:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1844:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1835:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1823:33:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1651,
															"nodeType": "ExpressionStatement",
															"src": "1823:33:7"
														},
														{
															"expression": {
																"id": 1654,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1652,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1598,
																	"src": "1870:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1653,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1880:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1870:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1655,
															"nodeType": "ExpressionStatement",
															"src": "1870:11:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1636,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1629,
														"src": "1797:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1637,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1801:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1797:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1657,
												"initializationExpression": {
													"assignments": [
														1629
													],
													"declarations": [
														{
															"constant": false,
															"id": 1629,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1777:1:7",
															"nodeType": "VariableDeclaration",
															"scope": 1657,
															"src": "1769:9:7",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1628,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1769:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1635,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1634,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1632,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1630,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1781:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1631,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1600,
																"src": "1785:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1781:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1633,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1794:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1781:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1769:26:7"
												},
												"loopExpression": {
													"expression": {
														"id": 1640,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1804:3:7",
														"subExpression": {
															"id": 1639,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1629,
															"src": "1806:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1641,
													"nodeType": "ExpressionStatement",
													"src": "1804:3:7"
												},
												"nodeType": "ForStatement",
												"src": "1764:128:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1661,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1659,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1598,
																"src": "1909:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1660,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1918:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1909:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1662,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1921:34:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1658,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1901:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1901:55:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1664,
												"nodeType": "ExpressionStatement",
												"src": "1901:55:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1667,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1606,
															"src": "1980:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1666,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1973:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1665,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1973:6:7",
															"typeDescriptions": {}
														}
													},
													"id": 1668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1973:14:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1604,
												"id": 1669,
												"nodeType": "Return",
												"src": "1966:21:7"
											}
										]
									},
									"documentation": {
										"id": 1596,
										"nodeType": "StructuredDocumentation",
										"src": "1440:112:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1671,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1566:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1598,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1586:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "1578:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1597,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1578:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1600,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1601:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "1593:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1593:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1577:31:7"
									},
									"returnParameters": {
										"id": 1604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1603,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "1632:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1602,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1632:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1631:15:7"
									},
									"scope": 1692,
									"src": "1557:437:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1690,
										"nodeType": "Block",
										"src": "2219:76:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1684,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1674,
																			"src": "2264:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1683,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2256:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1682,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2256:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1685,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2256:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1681,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2248:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1680,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2248:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1686,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2248:22:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1687,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1527,
															"src": "2272:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1679,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1595,
															1671,
															1691
														],
														"referencedDeclaration": 1671,
														"src": "2236:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1688,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2236:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1678,
												"id": 1689,
												"nodeType": "Return",
												"src": "2229:59:7"
											}
										]
									},
									"documentation": {
										"id": 1672,
										"nodeType": "StructuredDocumentation",
										"src": "2000:141:7",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 1691,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2155:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2175:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "2167:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1673,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2167:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2166:14:7"
									},
									"returnParameters": {
										"id": 1678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1677,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "2204:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1676,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2204:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2203:15:7"
									},
									"scope": 1692,
									"src": "2146:149:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1693,
							"src": "199:2098:7",
							"usedErrors": []
						}
					],
					"src": "101:2197:7"
				},
				"id": 7
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1475
						],
						"ERC165Upgradeable": [
							1736
						],
						"IERC165Upgradeable": [
							1748
						],
						"Initializable": [
							168
						]
					},
					"id": 1737,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1694,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:8"
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol",
							"file": "./IERC165Upgradeable.sol",
							"id": 1695,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1737,
							"sourceUnit": 1749,
							"src": "124:34:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 1696,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1737,
							"sourceUnit": 169,
							"src": "159:45:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1698,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 168,
										"src": "822:13:8"
									},
									"id": 1699,
									"nodeType": "InheritanceSpecifier",
									"src": "822:13:8"
								},
								{
									"baseName": {
										"id": 1700,
										"name": "IERC165Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1748,
										"src": "837:18:8"
									},
									"id": 1701,
									"nodeType": "InheritanceSpecifier",
									"src": "837:18:8"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1697,
								"nodeType": "StructuredDocumentation",
								"src": "206:576:8",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 1736,
							"linearizedBaseContracts": [
								1736,
								1748,
								168
							],
							"name": "ERC165Upgradeable",
							"nameLocation": "801:17:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1706,
										"nodeType": "Block",
										"src": "913:7:8",
										"statements": []
									},
									"id": 1707,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1704,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1703,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "896:16:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "896:16:8"
										}
									],
									"name": "__ERC165_init",
									"nameLocation": "871:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1702,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "884:2:8"
									},
									"returnParameters": {
										"id": 1705,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "913:0:8"
									},
									"scope": 1736,
									"src": "862:58:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1712,
										"nodeType": "Block",
										"src": "987:7:8",
										"statements": []
									},
									"id": 1713,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1710,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1709,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "970:16:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "970:16:8"
										}
									],
									"name": "__ERC165_init_unchained",
									"nameLocation": "935:23:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "958:2:8"
									},
									"returnParameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "987:0:8"
									},
									"scope": 1736,
									"src": "926:68:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1747
									],
									"body": {
										"id": 1729,
										"nodeType": "Block",
										"src": "1151:75:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 1727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1722,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1716,
														"src": "1168:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1724,
																	"name": "IERC165Upgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1748,
																	"src": "1188:18:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165Upgradeable_$1748_$",
																		"typeString": "type(contract IERC165Upgradeable)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165Upgradeable_$1748_$",
																		"typeString": "type(contract IERC165Upgradeable)"
																	}
																],
																"id": 1723,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "1183:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1725,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1183:24:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165Upgradeable_$1748",
																"typeString": "type(contract IERC165Upgradeable)"
															}
														},
														"id": 1726,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "1183:36:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "1168:51:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1721,
												"id": 1728,
												"nodeType": "Return",
												"src": "1161:58:8"
											}
										]
									},
									"documentation": {
										"id": 1714,
										"nodeType": "StructuredDocumentation",
										"src": "999:56:8",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1730,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "1069:17:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1718,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1127:8:8"
									},
									"parameters": {
										"id": 1717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1716,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "1094:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "1087:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1715,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1087:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1086:20:8"
									},
									"returnParameters": {
										"id": 1721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "1145:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1719,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1145:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1144:6:8"
									},
									"scope": 1736,
									"src": "1060:166:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1731,
										"nodeType": "StructuredDocumentation",
										"src": "1232:254:8",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1735,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1511:5:8",
									"nodeType": "VariableDeclaration",
									"scope": 1736,
									"src": "1491:25:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1732,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1491:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1734,
										"length": {
											"hexValue": "3530",
											"id": 1733,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1499:2:8",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1491:11:8",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1737,
							"src": "783:736:8",
							"usedErrors": []
						}
					],
					"src": "99:1421:8"
				},
				"id": 8
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol",
					"exportedSymbols": {
						"IERC165Upgradeable": [
							1748
						]
					},
					"id": 1749,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1738,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1739,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:9",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1748,
							"linearizedBaseContracts": [
								1748
							],
							"name": "IERC165Upgradeable",
							"nameLocation": "415:18:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1740,
										"nodeType": "StructuredDocumentation",
										"src": "440:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1747,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "794:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1742,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "819:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1747,
												"src": "812:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1741,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "812:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "811:20:9"
									},
									"returnParameters": {
										"id": 1746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1745,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1747,
												"src": "855:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1744,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "855:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "854:6:9"
									},
									"scope": 1748,
									"src": "785:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1749,
							"src": "405:458:9",
							"usedErrors": []
						}
					],
					"src": "100:764:9"
				},
				"id": 9
			},
			".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol",
					"exportedSymbols": {
						"MathUpgradeable": [
							2613
						]
					},
					"id": 2614,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1750,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1751,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:10",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2613,
							"linearizedBaseContracts": [
								2613
							],
							"name": "MathUpgradeable",
							"nameLocation": "210:15:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "MathUpgradeable.Rounding",
									"id": 1755,
									"members": [
										{
											"id": 1752,
											"name": "Down",
											"nameLocation": "256:4:10",
											"nodeType": "EnumValue",
											"src": "256:4:10"
										},
										{
											"id": 1753,
											"name": "Up",
											"nameLocation": "298:2:10",
											"nodeType": "EnumValue",
											"src": "298:2:10"
										},
										{
											"id": 1754,
											"name": "Zero",
											"nameLocation": "329:4:10",
											"nodeType": "EnumValue",
											"src": "329:4:10"
										}
									],
									"name": "Rounding",
									"nameLocation": "237:8:10",
									"nodeType": "EnumDefinition",
									"src": "232:122:10"
								},
								{
									"body": {
										"id": 1772,
										"nodeType": "Block",
										"src": "491:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1767,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1765,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1758,
															"src": "508:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1766,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1760,
															"src": "512:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "508:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1769,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1760,
														"src": "520:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "508:13:10",
													"trueExpression": {
														"id": 1768,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1758,
														"src": "516:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1764,
												"id": 1771,
												"nodeType": "Return",
												"src": "501:20:10"
											}
										]
									},
									"documentation": {
										"id": 1756,
										"nodeType": "StructuredDocumentation",
										"src": "360:59:10",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 1773,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "433:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "445:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "437:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1760,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "456:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "448:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "436:22:10"
									},
									"returnParameters": {
										"id": 1764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "482:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "482:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "481:9:10"
									},
									"scope": 2613,
									"src": "424:104:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1790,
										"nodeType": "Block",
										"src": "666:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1785,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1783,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1776,
															"src": "683:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1784,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1778,
															"src": "687:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "683:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1787,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1778,
														"src": "695:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "683:13:10",
													"trueExpression": {
														"id": 1786,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1776,
														"src": "691:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1782,
												"id": 1789,
												"nodeType": "Return",
												"src": "676:20:10"
											}
										]
									},
									"documentation": {
										"id": 1774,
										"nodeType": "StructuredDocumentation",
										"src": "534:60:10",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 1791,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "608:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "620:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "612:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1775,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1778,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "631:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "623:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1777,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "623:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "611:22:10"
									},
									"returnParameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1781,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "657:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1780,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:9:10"
									},
									"scope": 2613,
									"src": "599:104:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1813,
										"nodeType": "Block",
										"src": "887:82:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1803,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1801,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1794,
																	"src": "942:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1802,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1796,
																	"src": "946:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "942:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1804,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "941:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1810,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1807,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1805,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1794,
																		"src": "952:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 1806,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1796,
																		"src": "956:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "952:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1808,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "951:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 1809,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "961:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "951:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "941:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1800,
												"id": 1812,
												"nodeType": "Return",
												"src": "934:28:10"
											}
										]
									},
									"documentation": {
										"id": 1792,
										"nodeType": "StructuredDocumentation",
										"src": "709:102:10",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 1814,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "825:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1794,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "841:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "833:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1796,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "852:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "844:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "832:22:10"
									},
									"returnParameters": {
										"id": 1800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1799,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "878:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "878:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "877:9:10"
									},
									"scope": 2613,
									"src": "816:153:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1838,
										"nodeType": "Block",
										"src": "1239:123:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1826,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1824,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "1327:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1825,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1332:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1327:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1835,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1833,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1830,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1828,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1817,
																			"src": "1341:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1829,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1345:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1341:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1831,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1340:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1832,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1819,
																"src": "1350:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1340:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1834,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1354:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1340:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1327:28:10",
													"trueExpression": {
														"hexValue": "30",
														"id": 1827,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1336:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1823,
												"id": 1837,
												"nodeType": "Return",
												"src": "1320:35:10"
											}
										]
									},
									"documentation": {
										"id": 1815,
										"nodeType": "StructuredDocumentation",
										"src": "975:188:10",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 1839,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1177:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1193:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "1185:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1816,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1819,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1204:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "1196:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1818,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1196:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1184:22:10"
									},
									"returnParameters": {
										"id": 1823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1822,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "1230:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1821,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1230:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1229:9:10"
									},
									"scope": 2613,
									"src": "1168:194:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1960,
										"nodeType": "Block",
										"src": "1806:3797:10",
										"statements": [
											{
												"id": 1959,
												"nodeType": "UncheckedBlock",
												"src": "1816:3781:10",
												"statements": [
													{
														"assignments": [
															1852
														],
														"declarations": [
															{
																"constant": false,
																"id": 1852,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2145:5:10",
																"nodeType": "VariableDeclaration",
																"scope": 1959,
																"src": "2137:13:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1851,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2137:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1853,
														"nodeType": "VariableDeclarationStatement",
														"src": "2137:13:10"
													},
													{
														"assignments": [
															1855
														],
														"declarations": [
															{
																"constant": false,
																"id": 1855,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2217:5:10",
																"nodeType": "VariableDeclaration",
																"scope": 1959,
																"src": "2209:13:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1854,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2209:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1856,
														"nodeType": "VariableDeclarationStatement",
														"src": "2209:13:10"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2289:157:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2307:30:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2324:1:10"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2327:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2334:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2330:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2330:6:10"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2317:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2317:20:10"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2311:2:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2354:18:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2367:1:10"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2370:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2363:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2363:9:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2354:5:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2389:43:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2406:2:10"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2410:5:10"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2402:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2402:14:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2421:2:10"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2425:5:10"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2418:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2418:13:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2398:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2398:34:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2389:5:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1852,
																"isOffset": false,
																"isSlot": false,
																"src": "2354:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1852,
																"isOffset": false,
																"isSlot": false,
																"src": "2410:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1852,
																"isOffset": false,
																"isSlot": false,
																"src": "2425:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1855,
																"isOffset": false,
																"isSlot": false,
																"src": "2389:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1842,
																"isOffset": false,
																"isSlot": false,
																"src": "2324:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1842,
																"isOffset": false,
																"isSlot": false,
																"src": "2367:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1844,
																"isOffset": false,
																"isSlot": false,
																"src": "2327:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1844,
																"isOffset": false,
																"isSlot": false,
																"src": "2370:1:10",
																"valueSize": 1
															}
														],
														"id": 1857,
														"nodeType": "InlineAssembly",
														"src": "2280:166:10"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1860,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1858,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1855,
																"src": "2527:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1859,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2536:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2527:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1866,
														"nodeType": "IfStatement",
														"src": "2523:75:10",
														"trueBody": {
															"id": 1865,
															"nodeType": "Block",
															"src": "2539:59:10",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1863,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1861,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1852,
																			"src": "2564:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 1862,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1846,
																			"src": "2572:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2564:19:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1850,
																	"id": 1864,
																	"nodeType": "Return",
																	"src": "2557:26:10"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1868,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "2708:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 1869,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1855,
																		"src": "2722:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2708:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 1867,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2700:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																	"typeString": "function (bool) pure"
																}
															},
															"id": 1871,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2700:28:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1872,
														"nodeType": "ExpressionStatement",
														"src": "2700:28:10"
													},
													{
														"assignments": [
															1874
														],
														"declarations": [
															{
																"constant": false,
																"id": 1874,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "2992:9:10",
																"nodeType": "VariableDeclaration",
																"scope": 1959,
																"src": "2984:17:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1873,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2984:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1875,
														"nodeType": "VariableDeclarationStatement",
														"src": "2984:17:10"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3024:291:10",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3093:38:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3113:1:10"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3116:1:10"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3119:11:10"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3106:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3106:25:10"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3093:9:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3213:41:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3226:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3236:9:10"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3247:5:10"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3233:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3233:20:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3222:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3222:32:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3213:5:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3271:30:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3284:5:10"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3291:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:21:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3271:5:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1846,
																"isOffset": false,
																"isSlot": false,
																"src": "3119:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1852,
																"isOffset": false,
																"isSlot": false,
																"src": "3247:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1852,
																"isOffset": false,
																"isSlot": false,
																"src": "3271:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1852,
																"isOffset": false,
																"isSlot": false,
																"src": "3284:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1855,
																"isOffset": false,
																"isSlot": false,
																"src": "3213:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1855,
																"isOffset": false,
																"isSlot": false,
																"src": "3226:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1874,
																"isOffset": false,
																"isSlot": false,
																"src": "3093:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1874,
																"isOffset": false,
																"isSlot": false,
																"src": "3236:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1874,
																"isOffset": false,
																"isSlot": false,
																"src": "3291:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1842,
																"isOffset": false,
																"isSlot": false,
																"src": "3113:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1844,
																"isOffset": false,
																"isSlot": false,
																"src": "3116:1:10",
																"valueSize": 1
															}
														],
														"id": 1876,
														"nodeType": "InlineAssembly",
														"src": "3015:300:10"
													},
													{
														"assignments": [
															1878
														],
														"declarations": [
															{
																"constant": false,
																"id": 1878,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3630:4:10",
																"nodeType": "VariableDeclaration",
																"scope": 1959,
																"src": "3622:12:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1877,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3622:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1886,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1879,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1846,
																"src": "3637:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1883,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1881,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3652:12:10",
																			"subExpression": {
																				"id": 1880,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1846,
																				"src": "3653:11:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1882,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3667:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3652:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1884,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3651:18:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3637:32:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3622:47:10"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3692:362:10",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3757:37:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3776:11:10"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3789:4:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3772:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3772:22:10"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "3757:11:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3861:25:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3874:5:10"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3881:4:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3870:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3870:16:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3861:5:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4001:39:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4021:1:10",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4024:4:10"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4017:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4017:12:10"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4031:4:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4013:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4013:23:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4038:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4009:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4009:31:10"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4001:4:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1846,
																"isOffset": false,
																"isSlot": false,
																"src": "3757:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1846,
																"isOffset": false,
																"isSlot": false,
																"src": "3776:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1852,
																"isOffset": false,
																"isSlot": false,
																"src": "3861:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1852,
																"isOffset": false,
																"isSlot": false,
																"src": "3874:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1878,
																"isOffset": false,
																"isSlot": false,
																"src": "3789:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1878,
																"isOffset": false,
																"isSlot": false,
																"src": "3881:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1878,
																"isOffset": false,
																"isSlot": false,
																"src": "4001:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1878,
																"isOffset": false,
																"isSlot": false,
																"src": "4024:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1878,
																"isOffset": false,
																"isSlot": false,
																"src": "4031:4:10",
																"valueSize": 1
															}
														],
														"id": 1887,
														"nodeType": "InlineAssembly",
														"src": "3683:371:10"
													},
													{
														"expression": {
															"id": 1892,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1888,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1852,
																"src": "4120:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1889,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1855,
																	"src": "4129:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1890,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1878,
																	"src": "4137:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4129:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4120:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1893,
														"nodeType": "ExpressionStatement",
														"src": "4120:21:10"
													},
													{
														"assignments": [
															1895
														],
														"declarations": [
															{
																"constant": false,
																"id": 1895,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4467:7:10",
																"nodeType": "VariableDeclaration",
																"scope": 1959,
																"src": "4459:15:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1894,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4459:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1902,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1901,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1898,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 1896,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4478:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1897,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1846,
																			"src": "4482:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4478:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1899,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4477:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 1900,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4497:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4477:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4459:39:10"
													},
													{
														"expression": {
															"id": 1909,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1903,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1895,
																"src": "4715:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1908,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1904,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4726:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1907,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1905,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "4730:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1906,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1895,
																		"src": "4744:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4730:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4726:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4715:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1910,
														"nodeType": "ExpressionStatement",
														"src": "4715:36:10"
													},
													{
														"expression": {
															"id": 1917,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1911,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1895,
																"src": "4784:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1916,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1912,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4795:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1915,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1913,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "4799:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1914,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1895,
																		"src": "4813:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4799:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4795:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4784:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1918,
														"nodeType": "ExpressionStatement",
														"src": "4784:36:10"
													},
													{
														"expression": {
															"id": 1925,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1919,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1895,
																"src": "4854:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1924,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1920,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4865:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1923,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1921,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "4869:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1922,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1895,
																		"src": "4883:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4869:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4865:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4854:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1926,
														"nodeType": "ExpressionStatement",
														"src": "4854:36:10"
													},
													{
														"expression": {
															"id": 1933,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1927,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1895,
																"src": "4924:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1932,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1928,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4935:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1931,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1929,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "4939:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1930,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1895,
																		"src": "4953:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4939:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4935:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4924:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1934,
														"nodeType": "ExpressionStatement",
														"src": "4924:36:10"
													},
													{
														"expression": {
															"id": 1941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1935,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1895,
																"src": "4994:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1940,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1936,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5005:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1939,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1937,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "5009:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1938,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1895,
																		"src": "5023:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5009:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5005:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4994:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1942,
														"nodeType": "ExpressionStatement",
														"src": "4994:36:10"
													},
													{
														"expression": {
															"id": 1949,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1943,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1895,
																"src": "5065:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1948,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1944,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5076:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1945,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "5080:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1946,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1895,
																		"src": "5094:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5080:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5076:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1950,
														"nodeType": "ExpressionStatement",
														"src": "5065:36:10"
													},
													{
														"expression": {
															"id": 1955,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1951,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1849,
																"src": "5535:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1954,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1952,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1852,
																	"src": "5544:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1953,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1895,
																	"src": "5552:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5544:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5535:24:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1956,
														"nodeType": "ExpressionStatement",
														"src": "5535:24:10"
													},
													{
														"expression": {
															"id": 1957,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1849,
															"src": "5580:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1850,
														"id": 1958,
														"nodeType": "Return",
														"src": "5573:13:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1840,
										"nodeType": "StructuredDocumentation",
										"src": "1368:305:10",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 1961,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1687:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1711:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1961,
												"src": "1703:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1703:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1730:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1961,
												"src": "1722:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1843,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1722:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1846,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1749:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1961,
												"src": "1741:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1845,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1741:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1693:73:10"
									},
									"returnParameters": {
										"id": 1850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1849,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1798:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1961,
												"src": "1790:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1848,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1790:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1789:16:10"
									},
									"scope": 2613,
									"src": "1678:3925:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2004,
										"nodeType": "Block",
										"src": "5883:189:10",
										"statements": [
											{
												"assignments": [
													1977
												],
												"declarations": [
													{
														"constant": false,
														"id": 1977,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "5901:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2004,
														"src": "5893:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1976,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5893:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1983,
												"initialValue": {
													"arguments": [
														{
															"id": 1979,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1964,
															"src": "5917:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1980,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1966,
															"src": "5920:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1981,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1968,
															"src": "5923:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1978,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1961,
															2005
														],
														"referencedDeclaration": 1961,
														"src": "5910:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5910:25:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5893:42:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$1755",
															"typeString": "enum MathUpgradeable.Rounding"
														},
														"id": 1987,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1984,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1971,
															"src": "5949:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$1755",
																"typeString": "enum MathUpgradeable.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1985,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1755,
																"src": "5961:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$1755_$",
																	"typeString": "type(enum MathUpgradeable.Rounding)"
																}
															},
															"id": 1986,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1753,
															"src": "5961:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$1755",
																"typeString": "enum MathUpgradeable.Rounding"
															}
														},
														"src": "5949:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1994,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1989,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1964,
																	"src": "5983:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1990,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1966,
																	"src": "5986:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1991,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1968,
																	"src": "5989:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1988,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "5976:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1992,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5976:25:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1993,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6004:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5976:29:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5949:56:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2001,
												"nodeType": "IfStatement",
												"src": "5945:98:10",
												"trueBody": {
													"id": 2000,
													"nodeType": "Block",
													"src": "6007:36:10",
													"statements": [
														{
															"expression": {
																"id": 1998,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1996,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1977,
																	"src": "6021:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1997,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6031:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6021:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1999,
															"nodeType": "ExpressionStatement",
															"src": "6021:11:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2002,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1977,
													"src": "6059:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1975,
												"id": 2003,
												"nodeType": "Return",
												"src": "6052:13:10"
											}
										]
									},
									"documentation": {
										"id": 1962,
										"nodeType": "StructuredDocumentation",
										"src": "5609:121:10",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2005,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "5744:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1964,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "5768:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "5760:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1963,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5760:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1966,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "5787:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "5779:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5779:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1968,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "5806:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "5798:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5798:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1971,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "5836:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "5827:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1755",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 1970,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1969,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1755,
														"src": "5827:8:10"
													},
													"referencedDeclaration": 1755,
													"src": "5827:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1755",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5750:100:10"
									},
									"returnParameters": {
										"id": 1975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1974,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "5874:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1973,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5874:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5873:9:10"
									},
									"scope": 2613,
									"src": "5735:337:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2116,
										"nodeType": "Block",
										"src": "6348:1585:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2013,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2008,
														"src": "6362:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2014,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6367:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6362:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2019,
												"nodeType": "IfStatement",
												"src": "6358:45:10",
												"trueBody": {
													"id": 2018,
													"nodeType": "Block",
													"src": "6370:33:10",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2016,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6391:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2012,
															"id": 2017,
															"nodeType": "Return",
															"src": "6384:8:10"
														}
													]
												}
											},
											{
												"assignments": [
													2021
												],
												"declarations": [
													{
														"constant": false,
														"id": 2021,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7090:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2116,
														"src": "7082:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2020,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7082:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2030,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2022,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7099:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2027,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2024,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2008,
																			"src": "7110:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2023,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2285,
																			2321
																		],
																		"referencedDeclaration": 2285,
																		"src": "7105:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2025,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7105:7:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2026,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7116:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7105:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2028,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7104:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7099:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7082:36:10"
											},
											{
												"id": 2115,
												"nodeType": "UncheckedBlock",
												"src": "7519:408:10",
												"statements": [
													{
														"expression": {
															"id": 2040,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2031,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "7543:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2039,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2036,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2032,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2021,
																				"src": "7553:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2035,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2033,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2008,
																					"src": "7562:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2034,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2021,
																					"src": "7566:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7562:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7553:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2037,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7552:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2038,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7577:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7552:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7543:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2041,
														"nodeType": "ExpressionStatement",
														"src": "7543:35:10"
													},
													{
														"expression": {
															"id": 2051,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2042,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "7592:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2050,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2047,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2043,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2021,
																				"src": "7602:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2046,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2044,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2008,
																					"src": "7611:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2045,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2021,
																					"src": "7615:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7611:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7602:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2048,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7601:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2049,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7626:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7601:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7592:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2052,
														"nodeType": "ExpressionStatement",
														"src": "7592:35:10"
													},
													{
														"expression": {
															"id": 2062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2053,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "7641:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2061,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2058,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2054,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2021,
																				"src": "7651:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2057,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2055,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2008,
																					"src": "7660:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2056,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2021,
																					"src": "7664:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7660:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7651:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2059,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7650:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2060,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7675:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7650:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7641:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2063,
														"nodeType": "ExpressionStatement",
														"src": "7641:35:10"
													},
													{
														"expression": {
															"id": 2073,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2064,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "7690:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2072,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2069,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2065,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2021,
																				"src": "7700:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2068,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2066,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2008,
																					"src": "7709:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2067,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2021,
																					"src": "7713:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7709:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7700:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2070,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7699:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2071,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7724:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7699:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7690:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2074,
														"nodeType": "ExpressionStatement",
														"src": "7690:35:10"
													},
													{
														"expression": {
															"id": 2084,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2075,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "7739:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2083,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2080,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2076,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2021,
																				"src": "7749:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2079,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2077,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2008,
																					"src": "7758:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2078,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2021,
																					"src": "7762:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7758:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7749:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2081,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7748:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2082,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7773:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7748:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7739:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2085,
														"nodeType": "ExpressionStatement",
														"src": "7739:35:10"
													},
													{
														"expression": {
															"id": 2095,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2086,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "7788:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2094,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2091,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2087,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2021,
																				"src": "7798:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2090,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2088,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2008,
																					"src": "7807:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2089,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2021,
																					"src": "7811:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7807:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7798:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2092,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7797:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2093,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7822:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7797:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7788:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2096,
														"nodeType": "ExpressionStatement",
														"src": "7788:35:10"
													},
													{
														"expression": {
															"id": 2106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2097,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "7837:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2105,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2102,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2098,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2021,
																				"src": "7847:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2101,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2099,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2008,
																					"src": "7856:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2100,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2021,
																					"src": "7860:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7856:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7847:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2103,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7846:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2104,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7871:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7846:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7837:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2107,
														"nodeType": "ExpressionStatement",
														"src": "7837:35:10"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2109,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2021,
																	"src": "7897:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2112,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2110,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2008,
																		"src": "7905:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2111,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2021,
																		"src": "7909:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7905:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2108,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1791,
																"src": "7893:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7893:23:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2012,
														"id": 2114,
														"nodeType": "Return",
														"src": "7886:30:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2006,
										"nodeType": "StructuredDocumentation",
										"src": "6078:208:10",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6300:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6313:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2117,
												"src": "6305:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2007,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6305:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6304:11:10"
									},
									"returnParameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2011,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2117,
												"src": "6339:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6339:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6338:9:10"
									},
									"scope": 2613,
									"src": "6291:1642:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2152,
										"nodeType": "Block",
										"src": "8109:161:10",
										"statements": [
											{
												"id": 2151,
												"nodeType": "UncheckedBlock",
												"src": "8119:145:10",
												"statements": [
													{
														"assignments": [
															2129
														],
														"declarations": [
															{
																"constant": false,
																"id": 2129,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8151:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2151,
																"src": "8143:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2128,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8143:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2133,
														"initialValue": {
															"arguments": [
																{
																	"id": 2131,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2120,
																	"src": "8165:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2130,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2117,
																	2153
																],
																"referencedDeclaration": 2117,
																"src": "8160:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8160:7:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8143:24:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2134,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2129,
																"src": "8188:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2144,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1755",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 2138,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2135,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2123,
																					"src": "8198:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1755",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2136,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1755,
																						"src": "8210:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1755_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 2137,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1753,
																					"src": "8210:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1755",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "8198:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2143,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2141,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2139,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2129,
																						"src": "8225:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2140,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2129,
																						"src": "8234:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8225:15:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2142,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2120,
																					"src": "8243:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8225:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8198:46:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2146,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8251:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8198:54:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2145,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8247:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2148,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8197:56:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8188:65:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2127,
														"id": 2150,
														"nodeType": "Return",
														"src": "8181:72:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2118,
										"nodeType": "StructuredDocumentation",
										"src": "7939:89:10",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8042:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2120,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8055:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "8047:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8047:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2123,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8067:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "8058:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1755",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 2122,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2121,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1755,
														"src": "8058:8:10"
													},
													"referencedDeclaration": 1755,
													"src": "8058:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1755",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8046:30:10"
									},
									"returnParameters": {
										"id": 2127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2126,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "8100:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8100:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8099:9:10"
									},
									"scope": 2613,
									"src": "8033:237:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2284,
										"nodeType": "Block",
										"src": "8455:922:10",
										"statements": [
											{
												"assignments": [
													2162
												],
												"declarations": [
													{
														"constant": false,
														"id": 2162,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8473:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2284,
														"src": "8465:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2161,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8465:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2164,
												"initialValue": {
													"hexValue": "30",
													"id": 2163,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8482:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8465:18:10"
											},
											{
												"id": 2281,
												"nodeType": "UncheckedBlock",
												"src": "8493:855:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2167,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2165,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "8521:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2166,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8530:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8521:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2168,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8536:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8521:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2179,
														"nodeType": "IfStatement",
														"src": "8517:99:10",
														"trueBody": {
															"id": 2178,
															"nodeType": "Block",
															"src": "8539:77:10",
															"statements": [
																{
																	"expression": {
																		"id": 2172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2170,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2156,
																			"src": "8557:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8567:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8557:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2173,
																	"nodeType": "ExpressionStatement",
																	"src": "8557:13:10"
																},
																{
																	"expression": {
																		"id": 2176,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2174,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2162,
																			"src": "8588:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2175,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8598:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8588:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2177,
																	"nodeType": "ExpressionStatement",
																	"src": "8588:13:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2184,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2182,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2180,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "8633:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2181,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8642:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8633:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2183,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8647:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8633:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2194,
														"nodeType": "IfStatement",
														"src": "8629:96:10",
														"trueBody": {
															"id": 2193,
															"nodeType": "Block",
															"src": "8650:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2185,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2156,
																			"src": "8668:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8678:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8668:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2188,
																	"nodeType": "ExpressionStatement",
																	"src": "8668:12:10"
																},
																{
																	"expression": {
																		"id": 2191,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2189,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2162,
																			"src": "8698:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2190,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8708:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8698:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2192,
																	"nodeType": "ExpressionStatement",
																	"src": "8698:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2199,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2197,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2195,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "8742:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2196,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8751:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8742:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2198,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8756:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8742:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2209,
														"nodeType": "IfStatement",
														"src": "8738:96:10",
														"trueBody": {
															"id": 2208,
															"nodeType": "Block",
															"src": "8759:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2202,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2200,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2156,
																			"src": "8777:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2201,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8787:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8777:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2203,
																	"nodeType": "ExpressionStatement",
																	"src": "8777:12:10"
																},
																{
																	"expression": {
																		"id": 2206,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2204,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2162,
																			"src": "8807:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2205,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8817:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8807:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2207,
																	"nodeType": "ExpressionStatement",
																	"src": "8807:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2210,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "8851:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2211,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8860:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "8851:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2213,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8865:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8851:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2224,
														"nodeType": "IfStatement",
														"src": "8847:96:10",
														"trueBody": {
															"id": 2223,
															"nodeType": "Block",
															"src": "8868:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2217,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2215,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2156,
																			"src": "8886:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2216,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8896:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8886:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2218,
																	"nodeType": "ExpressionStatement",
																	"src": "8886:12:10"
																},
																{
																	"expression": {
																		"id": 2221,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2219,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2162,
																			"src": "8916:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2220,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8926:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8916:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2222,
																	"nodeType": "ExpressionStatement",
																	"src": "8916:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2227,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2225,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "8960:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2226,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8969:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "8960:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2228,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8973:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8960:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2239,
														"nodeType": "IfStatement",
														"src": "8956:93:10",
														"trueBody": {
															"id": 2238,
															"nodeType": "Block",
															"src": "8976:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2232,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2230,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2156,
																			"src": "8994:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2231,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9004:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "8994:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2233,
																	"nodeType": "ExpressionStatement",
																	"src": "8994:11:10"
																},
																{
																	"expression": {
																		"id": 2236,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2234,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2162,
																			"src": "9023:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2235,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9033:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9023:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2237,
																	"nodeType": "ExpressionStatement",
																	"src": "9023:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2244,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2242,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2240,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "9066:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2241,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9075:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9066:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2243,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9079:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9066:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2254,
														"nodeType": "IfStatement",
														"src": "9062:93:10",
														"trueBody": {
															"id": 2253,
															"nodeType": "Block",
															"src": "9082:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2245,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2156,
																			"src": "9100:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2246,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9110:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9100:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2248,
																	"nodeType": "ExpressionStatement",
																	"src": "9100:11:10"
																},
																{
																	"expression": {
																		"id": 2251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2249,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2162,
																			"src": "9129:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2250,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9139:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9129:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2252,
																	"nodeType": "ExpressionStatement",
																	"src": "9129:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2259,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2257,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2255,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "9172:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9181:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9172:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2258,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9185:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9172:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2269,
														"nodeType": "IfStatement",
														"src": "9168:93:10",
														"trueBody": {
															"id": 2268,
															"nodeType": "Block",
															"src": "9188:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2262,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2260,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2156,
																			"src": "9206:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2261,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9216:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9206:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2263,
																	"nodeType": "ExpressionStatement",
																	"src": "9206:11:10"
																},
																{
																	"expression": {
																		"id": 2266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2264,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2162,
																			"src": "9235:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2265,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9245:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9235:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2267,
																	"nodeType": "ExpressionStatement",
																	"src": "9235:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2272,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2270,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "9278:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9287:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9278:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9291:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9278:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2280,
														"nodeType": "IfStatement",
														"src": "9274:64:10",
														"trueBody": {
															"id": 2279,
															"nodeType": "Block",
															"src": "9294:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2275,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2162,
																			"src": "9312:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2276,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9322:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9312:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2278,
																	"nodeType": "ExpressionStatement",
																	"src": "9312:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2282,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2162,
													"src": "9364:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2160,
												"id": 2283,
												"nodeType": "Return",
												"src": "9357:13:10"
											}
										]
									},
									"documentation": {
										"id": 2154,
										"nodeType": "StructuredDocumentation",
										"src": "8276:113:10",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8403:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2156,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8416:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2285,
												"src": "8408:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8408:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8407:15:10"
									},
									"returnParameters": {
										"id": 2160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2285,
												"src": "8446:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8446:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8445:9:10"
									},
									"scope": 2613,
									"src": "8394:983:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2320,
										"nodeType": "Block",
										"src": "9610:165:10",
										"statements": [
											{
												"id": 2319,
												"nodeType": "UncheckedBlock",
												"src": "9620:149:10",
												"statements": [
													{
														"assignments": [
															2297
														],
														"declarations": [
															{
																"constant": false,
																"id": 2297,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9652:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2319,
																"src": "9644:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2296,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9644:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2301,
														"initialValue": {
															"arguments": [
																{
																	"id": 2299,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2288,
																	"src": "9666:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2298,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2285,
																	2321
																],
																"referencedDeclaration": 2285,
																"src": "9661:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9661:11:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9644:28:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2317,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2302,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2297,
																"src": "9693:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2312,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1755",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 2306,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2303,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2291,
																					"src": "9703:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1755",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2304,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1755,
																						"src": "9715:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1755_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 2305,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1753,
																					"src": "9715:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1755",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "9703:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2311,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2309,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2307,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9730:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2308,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2297,
																						"src": "9735:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9730:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2310,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2288,
																					"src": "9744:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9730:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9703:46:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2314,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9756:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9703:54:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2313,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9752:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2316,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9702:56:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9693:65:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2295,
														"id": 2318,
														"nodeType": "Return",
														"src": "9686:72:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2286,
										"nodeType": "StructuredDocumentation",
										"src": "9383:142:10",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9539:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2288,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9552:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2321,
												"src": "9544:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9544:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9568:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2321,
												"src": "9559:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1755",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 2290,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2289,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1755,
														"src": "9559:8:10"
													},
													"referencedDeclaration": 1755,
													"src": "9559:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1755",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9543:34:10"
									},
									"returnParameters": {
										"id": 2295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2321,
												"src": "9601:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9601:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9600:9:10"
									},
									"scope": 2613,
									"src": "9530:245:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2449,
										"nodeType": "Block",
										"src": "9962:828:10",
										"statements": [
											{
												"assignments": [
													2330
												],
												"declarations": [
													{
														"constant": false,
														"id": 2330,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9980:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2449,
														"src": "9972:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2329,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9972:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2332,
												"initialValue": {
													"hexValue": "30",
													"id": 2331,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9989:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9972:18:10"
											},
											{
												"id": 2446,
												"nodeType": "UncheckedBlock",
												"src": "10000:761:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2333,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2324,
																"src": "10028:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2336,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10037:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2335,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10041:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10037:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10028:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2349,
														"nodeType": "IfStatement",
														"src": "10024:99:10",
														"trueBody": {
															"id": 2348,
															"nodeType": "Block",
															"src": "10045:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2338,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2324,
																			"src": "10063:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2341,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2339,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10072:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2340,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10076:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10072:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10063:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2343,
																	"nodeType": "ExpressionStatement",
																	"src": "10063:15:10"
																},
																{
																	"expression": {
																		"id": 2346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2344,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2330,
																			"src": "10096:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10106:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10096:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2347,
																	"nodeType": "ExpressionStatement",
																	"src": "10096:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2354,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2350,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2324,
																"src": "10140:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2353,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2351,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10149:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10153:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10149:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10140:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2366,
														"nodeType": "IfStatement",
														"src": "10136:99:10",
														"trueBody": {
															"id": 2365,
															"nodeType": "Block",
															"src": "10157:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2359,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2355,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2324,
																			"src": "10175:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2358,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2356,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10184:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2357,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10188:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10184:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10175:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2360,
																	"nodeType": "ExpressionStatement",
																	"src": "10175:15:10"
																},
																{
																	"expression": {
																		"id": 2363,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2361,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2330,
																			"src": "10208:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2362,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10218:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10208:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2364,
																	"nodeType": "ExpressionStatement",
																	"src": "10208:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2371,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2367,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2324,
																"src": "10252:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2370,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10261:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10265:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10261:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10252:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2383,
														"nodeType": "IfStatement",
														"src": "10248:99:10",
														"trueBody": {
															"id": 2382,
															"nodeType": "Block",
															"src": "10269:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2376,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2372,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2324,
																			"src": "10287:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2375,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2373,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10296:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2374,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10300:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10296:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10287:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2377,
																	"nodeType": "ExpressionStatement",
																	"src": "10287:15:10"
																},
																{
																	"expression": {
																		"id": 2380,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2378,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2330,
																			"src": "10320:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2379,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10330:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10320:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2381,
																	"nodeType": "ExpressionStatement",
																	"src": "10320:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2388,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2384,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2324,
																"src": "10364:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2387,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2385,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10373:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10377:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10373:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10364:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2400,
														"nodeType": "IfStatement",
														"src": "10360:96:10",
														"trueBody": {
															"id": 2399,
															"nodeType": "Block",
															"src": "10380:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2393,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2389,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2324,
																			"src": "10398:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2392,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2390,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10407:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2391,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10411:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10407:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10398:14:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2394,
																	"nodeType": "ExpressionStatement",
																	"src": "10398:14:10"
																},
																{
																	"expression": {
																		"id": 2397,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2395,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2330,
																			"src": "10430:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10440:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10430:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2398,
																	"nodeType": "ExpressionStatement",
																	"src": "10430:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2401,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2324,
																"src": "10473:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2404,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10482:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10486:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10482:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10473:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2417,
														"nodeType": "IfStatement",
														"src": "10469:96:10",
														"trueBody": {
															"id": 2416,
															"nodeType": "Block",
															"src": "10489:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2406,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2324,
																			"src": "10507:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2407,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10516:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2408,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10520:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10516:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10507:14:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2411,
																	"nodeType": "ExpressionStatement",
																	"src": "10507:14:10"
																},
																{
																	"expression": {
																		"id": 2414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2412,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2330,
																			"src": "10539:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10549:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10539:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2415,
																	"nodeType": "ExpressionStatement",
																	"src": "10539:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2418,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2324,
																"src": "10582:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 2421,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2419,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10591:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2420,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10595:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10591:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10582:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2434,
														"nodeType": "IfStatement",
														"src": "10578:96:10",
														"trueBody": {
															"id": 2433,
															"nodeType": "Block",
															"src": "10598:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2423,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2324,
																			"src": "10616:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 2426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2424,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10625:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 2425,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10629:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10625:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10616:14:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2428,
																	"nodeType": "ExpressionStatement",
																	"src": "10616:14:10"
																},
																{
																	"expression": {
																		"id": 2431,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2429,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2330,
																			"src": "10648:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2430,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10658:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10648:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2432,
																	"nodeType": "ExpressionStatement",
																	"src": "10648:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2435,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2324,
																"src": "10691:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 2438,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2436,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10700:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10704:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10700:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10691:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2445,
														"nodeType": "IfStatement",
														"src": "10687:64:10",
														"trueBody": {
															"id": 2444,
															"nodeType": "Block",
															"src": "10707:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2442,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2440,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2330,
																			"src": "10725:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2441,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10735:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10725:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2443,
																	"nodeType": "ExpressionStatement",
																	"src": "10725:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2447,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2330,
													"src": "10777:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2328,
												"id": 2448,
												"nodeType": "Return",
												"src": "10770:13:10"
											}
										]
									},
									"documentation": {
										"id": 2322,
										"nodeType": "StructuredDocumentation",
										"src": "9781:114:10",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "9909:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2324,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9923:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2450,
												"src": "9915:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9915:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9914:15:10"
									},
									"returnParameters": {
										"id": 2328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2327,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2450,
												"src": "9953:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9953:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9952:9:10"
									},
									"scope": 2613,
									"src": "9900:890:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2485,
										"nodeType": "Block",
										"src": "11025:165:10",
										"statements": [
											{
												"id": 2484,
												"nodeType": "UncheckedBlock",
												"src": "11035:149:10",
												"statements": [
													{
														"assignments": [
															2462
														],
														"declarations": [
															{
																"constant": false,
																"id": 2462,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11067:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2484,
																"src": "11059:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2461,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11059:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2466,
														"initialValue": {
															"arguments": [
																{
																	"id": 2464,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2453,
																	"src": "11082:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2463,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2450,
																	2486
																],
																"referencedDeclaration": 2450,
																"src": "11076:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2465,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11076:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11059:29:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2467,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2462,
																"src": "11109:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2477,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1755",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 2471,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2468,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2456,
																					"src": "11119:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1755",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2469,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1755,
																						"src": "11131:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1755_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 2470,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1753,
																					"src": "11131:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1755",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "11119:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2476,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2474,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 2472,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11146:2:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 2473,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2462,
																						"src": "11150:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11146:10:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2475,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2453,
																					"src": "11159:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11146:18:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11119:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2479,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11171:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2480,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11119:53:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2478,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11167:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2481,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11118:55:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11109:64:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2460,
														"id": 2483,
														"nodeType": "Return",
														"src": "11102:71:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2451,
										"nodeType": "StructuredDocumentation",
										"src": "10796:143:10",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2486,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10953:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2453,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10967:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2486,
												"src": "10959:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2452,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10959:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2456,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10983:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2486,
												"src": "10974:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1755",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 2455,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2454,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1755,
														"src": "10974:8:10"
													},
													"referencedDeclaration": 1755,
													"src": "10974:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1755",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10958:34:10"
									},
									"returnParameters": {
										"id": 2460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2459,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2486,
												"src": "11016:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2458,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11016:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11015:9:10"
									},
									"scope": 2613,
									"src": "10944:246:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2572,
										"nodeType": "Block",
										"src": "11504:600:10",
										"statements": [
											{
												"assignments": [
													2495
												],
												"declarations": [
													{
														"constant": false,
														"id": 2495,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11522:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2572,
														"src": "11514:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2494,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11514:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2497,
												"initialValue": {
													"hexValue": "30",
													"id": 2496,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11531:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11514:18:10"
											},
											{
												"id": 2569,
												"nodeType": "UncheckedBlock",
												"src": "11542:533:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2502,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2498,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2489,
																	"src": "11570:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2499,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11579:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11570:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2501,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11585:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11570:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2512,
														"nodeType": "IfStatement",
														"src": "11566:98:10",
														"trueBody": {
															"id": 2511,
															"nodeType": "Block",
															"src": "11588:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2505,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2503,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2489,
																			"src": "11606:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2504,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11616:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11606:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2506,
																	"nodeType": "ExpressionStatement",
																	"src": "11606:13:10"
																},
																{
																	"expression": {
																		"id": 2509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2507,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2495,
																			"src": "11637:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2508,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11647:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11637:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2510,
																	"nodeType": "ExpressionStatement",
																	"src": "11637:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2515,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2513,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2489,
																	"src": "11681:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2514,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11690:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11681:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2516,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11695:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11681:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2527,
														"nodeType": "IfStatement",
														"src": "11677:95:10",
														"trueBody": {
															"id": 2526,
															"nodeType": "Block",
															"src": "11698:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2520,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2518,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2489,
																			"src": "11716:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2519,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11726:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11716:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2521,
																	"nodeType": "ExpressionStatement",
																	"src": "11716:12:10"
																},
																{
																	"expression": {
																		"id": 2524,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2522,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2495,
																			"src": "11746:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2523,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11756:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11746:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2525,
																	"nodeType": "ExpressionStatement",
																	"src": "11746:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2532,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2530,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2528,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2489,
																	"src": "11789:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2529,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11798:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11789:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2531,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11803:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11789:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2542,
														"nodeType": "IfStatement",
														"src": "11785:95:10",
														"trueBody": {
															"id": 2541,
															"nodeType": "Block",
															"src": "11806:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2533,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2489,
																			"src": "11824:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2534,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11834:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11824:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2536,
																	"nodeType": "ExpressionStatement",
																	"src": "11824:12:10"
																},
																{
																	"expression": {
																		"id": 2539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2537,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2495,
																			"src": "11854:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2538,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11864:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11854:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2540,
																	"nodeType": "ExpressionStatement",
																	"src": "11854:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2547,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2545,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2543,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2489,
																	"src": "11897:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11906:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11897:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2546,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11911:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11897:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2557,
														"nodeType": "IfStatement",
														"src": "11893:95:10",
														"trueBody": {
															"id": 2556,
															"nodeType": "Block",
															"src": "11914:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2550,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2548,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2489,
																			"src": "11932:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2549,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11942:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11932:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2551,
																	"nodeType": "ExpressionStatement",
																	"src": "11932:12:10"
																},
																{
																	"expression": {
																		"id": 2554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2552,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2495,
																			"src": "11962:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2553,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11972:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11962:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2555,
																	"nodeType": "ExpressionStatement",
																	"src": "11962:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2560,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2558,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2489,
																	"src": "12005:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2559,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12014:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12005:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2561,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12018:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12005:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2568,
														"nodeType": "IfStatement",
														"src": "12001:64:10",
														"trueBody": {
															"id": 2567,
															"nodeType": "Block",
															"src": "12021:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2565,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2563,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2495,
																			"src": "12039:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2564,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12049:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12039:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2566,
																	"nodeType": "ExpressionStatement",
																	"src": "12039:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2570,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2495,
													"src": "12091:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2493,
												"id": 2571,
												"nodeType": "Return",
												"src": "12084:13:10"
											}
										]
									},
									"documentation": {
										"id": 2487,
										"nodeType": "StructuredDocumentation",
										"src": "11196:240:10",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 2573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11450:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2489,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11465:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2573,
												"src": "11457:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11457:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11456:15:10"
									},
									"returnParameters": {
										"id": 2493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2492,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2573,
												"src": "11495:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11495:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11494:9:10"
									},
									"scope": 2613,
									"src": "11441:663:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2611,
										"nodeType": "Block",
										"src": "12340:173:10",
										"statements": [
											{
												"id": 2610,
												"nodeType": "UncheckedBlock",
												"src": "12350:157:10",
												"statements": [
													{
														"assignments": [
															2585
														],
														"declarations": [
															{
																"constant": false,
																"id": 2585,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12382:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2610,
																"src": "12374:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2584,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12374:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2589,
														"initialValue": {
															"arguments": [
																{
																	"id": 2587,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2576,
																	"src": "12398:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2586,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2573,
																	2612
																],
																"referencedDeclaration": 2573,
																"src": "12391:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2588,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12391:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12374:30:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2590,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2585,
																"src": "12425:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2603,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1755",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 2594,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2591,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2579,
																					"src": "12435:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1755",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2592,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1755,
																						"src": "12447:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1755_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 2593,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1753,
																					"src": "12447:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1755",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "12435:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2602,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2600,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2595,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12462:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2598,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2596,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2585,
																									"src": "12468:6:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "38",
																									"id": 2597,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12477:1:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_8_by_1",
																										"typeString": "int_const 8"
																									},
																									"value": "8"
																								},
																								"src": "12468:10:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 2599,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12467:12:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12462:17:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2601,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2576,
																					"src": "12482:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12462:25:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12435:52:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2605,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12494:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2606,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12435:60:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2604,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12490:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2607,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12434:62:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12425:71:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2583,
														"id": 2609,
														"nodeType": "Return",
														"src": "12418:78:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2574,
										"nodeType": "StructuredDocumentation",
										"src": "12110:143:10",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2612,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12267:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2576,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12282:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2612,
												"src": "12274:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2575,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12274:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2579,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12298:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2612,
												"src": "12289:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1755",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 2578,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2577,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1755,
														"src": "12289:8:10"
													},
													"referencedDeclaration": 1755,
													"src": "12289:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1755",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12273:34:10"
									},
									"returnParameters": {
										"id": 2583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2582,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2612,
												"src": "12331:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2581,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12331:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12330:9:10"
									},
									"scope": 2613,
									"src": "12258:255:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2614,
							"src": "202:12313:10",
							"usedErrors": []
						}
					],
					"src": "103:12413:10"
				},
				"id": 10
			}
		}
	}
}